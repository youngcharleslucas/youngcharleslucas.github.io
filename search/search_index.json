{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"{ Bio }","text":"<p>My name is Charles. I am a junior developer based out of Salt Lake City, Utah.  I have been building my programming experience since 2021. </p>"},{"location":"#technical-skills","title":"Technical Skills","text":"<ul> <li>Programming Languages: C#, Python, Java</li> <li>Web Development: React, HTML, CSS</li> <li>Databases: MySQL </li> <li>Operating Systems: Windows, Linux </li> <li>Cloud Services: AWS, Google Cloud </li> </ul>"},{"location":"#developer-experience","title":"Developer Experience","text":""},{"location":"#alta-ski-area","title":"Alta Ski Area","text":"<p>Alta, Utah February 2022 - September 2024</p> <p>Title: Software Developer </p> <p>Responsibilities: I was part of a team responsible for converting legacy code  (Foxpro) into extensible web applications.  This involved designing a new MySQL  database and building React applications which could be used across the campus.  A major focus was put into deploying a new point of sales application for ticket  sellers. </p>"},{"location":"#education","title":"Education","text":""},{"location":"#bachelor-of-science-computer-science","title":"Bachelor of Science Computer Science","text":"<p>Western Governors University March 2022 - March 2025 </p>"},{"location":"#devcode-bootcamp","title":"DevCode Bootcamp","text":"<p>October 2021 - January 2022 </p>"},{"location":"#master-of-architecture","title":"Master of Architecture","text":"<p>Kansas State University August 2004 - August 2009 </p>"},{"location":"#certifications","title":"Certifications","text":"<ul> <li>Google AI Essentials </li> <li>Google Cloud Digital Leader  </li> <li>ITIL 4 Foundations  </li> <li>Comptia A+  </li> <li>Comptia Security+  </li> <li>Linux Essentials Certification  </li> <li>AWS Certified Cloud Practitioner  </li> </ul>"},{"location":"Quotes/","title":"Quotes","text":"<p>The problem with quick and dirty, as some people have said, is that the dirty remains long after the quick has been forgotten.    </p> <p>\u2003\u2003- Steve McConnell  </p> <p>When to use iterative development? You should use iterative development only on projects that you want to succeed.    </p> <p>\u2003\u2003- Martin Fowler  </p> <p>The best way to predict your future is to create it.    </p> <p>\u2003\u2003- Abraham Lincoln  </p> <p>A good programmer is someone who always looks both ways before crossing a one-way street.  </p> <p>\u2003\u2003- Doug Linder  </p> <p>Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.  </p> <p>\u2003\u2003- Martin Golding  </p> <p>If you don't know where you are going, you'll end up someplace else.  </p> <p>\u2003\u2003- Yogi Berra  </p> <p>It's not whether you win or lose, it's how you place the blame.  </p> <p>\u2003\u2003- Oscar Wilde  </p> <p>The only thing constant is change  </p> <p>\u2003\u2003- Heraclitus, Greek Philosopher  </p> <p>It is easier to tone down a wild idea than to think up a new one.  </p> <p>\u2003\u2003- Alex Faickney Osborn  </p> <p>Failure is simply the opportunity to begin again, this time more intelligently.  </p> <p>\u2003\u2003- Henry Ford  </p>"},{"location":"setup/","title":"Setting up MakeDocs","text":""},{"location":"setup/#setup-the-github-pages-repository","title":"Setup the GitHub pages repository","text":"<p>This is optional. If deploying to GitHub pages, create the repository for the  site, then clone down the repository.  Complete the following steps in the repository.  </p>"},{"location":"setup/#automate-publishing-in-github","title":"Automate publishing in GitHub","text":"<p>Add the configuration file withing the repository folder: - Create the folder <code>.github/workflows/ci.yml</code> - Insert the configuration code from: <code>https://squidfunk.github.io/mkdocs-material/publishing-your-site/#with-github-actions-material-for-mkdocs</code> </p>"},{"location":"setup/#deployment-branch","title":"Deployment Branch","text":"<p>In the repository's settings, click on \"Pages\" on the left navigation bar.  Change the Branch to \"gh-pages\" and \"/docs\". It may not let the change to  \"/docs\" occur until the new mkdocs file has been pushed, and added the  \"/docs\" folder.  </p>"},{"location":"setup/#add-gitignore","title":"Add .gitignore","text":"<p>Google .gitignore for mkdocs and add the file.  </p> <p>Info</p> <p>Make sure to include the python virtual environment folder in the .gitignore.  When cloning down the repository, a new python virtual environment must be  created and <code>mkdocs-material</code> must be re-installed in the virtual environment.  </p>"},{"location":"setup/#package-installation","title":"Package installation","text":""},{"location":"setup/#create-the-python-virtual-environment","title":"Create the python virtual environment","text":"<p>https://docs.python.org/3/library/venv.html</p> <ul> <li>Build the envrionment with:  </li> </ul> <p><code>python -m venv /Users/Luke/Documents/Repo/Blog/virtual</code> </p> <ul> <li>\"Activate\" the virtual environment:  <ul> <li>with cmd: <code>C:\\&gt; Users\\Luke\\Documents\\Repo\\Blog\\virtual\\Scripts\\activate.bat</code> </li> <li>with PowerShell: <code>PS C:\\&gt; Users\\Luke\\Documents\\Repo\\Blog\\virtual\\Scripts\\Activate.ps1</code> </li> </ul> </li> </ul>"},{"location":"setup/#install-packages-in-the-python-virtual-environment","title":"Install packages in the python virtual environment","text":"<p>https://realpython.com/what-is-pip/#using-pip-in-a-python-virtual-environment  </p> <p>Install Material for MakeDocs in the Virtual python environment: <code>pip install mkdocs-material</code></p> <p>Create a new makedocs project: <code>mkdocs new .</code> </p> <p>Open the parent folder of the project in VS Code.  </p> <p>Add the following minimal configuration to <code>mkdocs.yml</code> to set a theme:  </p> <pre><code>site_name: My site\nsite_url: https://mydomain.org/mysite\ntheme:\n  name: material\n</code></pre>"},{"location":"setup/#add-yaml-support-to-vs-code","title":"Add yaml support to VS Code","text":"<p>https://squidfunk.github.io/mkdocs-material/creating-your-site/</p> <p>Add the extension \"YAML\" by Red Hat to VS Code.  </p> <ul> <li> <p>Navigate to the User's settings, which in VS Code, requires clicking on the  little cog in the lower left corner, then selecting \"Settings\". In the upper  right hand corner of the IDE, there is an icon that looks like two pages, side  by side. Click this and it should open \"settings.json\".   </p> </li> <li> <p>Add the following configuration:  </p> </li> </ul> <pre><code>{\n  \"yaml.schemas\": {\n    \"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\"\n  },\n  \"yaml.customTags\": [ \n    \"!ENV scalar\",\n    \"!ENV sequence\",\n    \"!relative scalar\",\n    \"tag:yaml.org,2002:python/name:material.extensions.emoji.to_svg\",\n    \"tag:yaml.org,2002:python/name:material.extensions.emoji.twemoji\",\n    \"tag:yaml.org,2002:python/name:pymdownx.superfences.fence_code_format\",\n    \"tag:yaml.org,2002:python/object/apply:pymdownx.slugs.slugify mapping\"\n  ]\n}\n</code></pre>"},{"location":"setup/#see-live-changes-to-the-mkdocs-site","title":"See live changes to the Mkdocs site","text":"<p>Execute <code>mkdocs serve</code> in cmd terminal, where the virtual environment is running. Navigate to the local address returned.  </p>"},{"location":"setup/#styling-and-features","title":"Styling and Features","text":""},{"location":"setup/#add-code-block-styling","title":"Add code block styling","text":"<p>For the language you want to be formated in the code block, find the associated  configuration codes from the following site:  </p> <p>https://pygments.org/docs/lexers/  </p> <p>Add the lexer code to the mkdocs.yml file under \"markdown_extensions:\"  </p> <p>You can also add more format to the code block by adding the following on the  first line:  </p> <p><code>\\</code>``py title=\"Code Block Title\" linenums=\"1\" `</p> <p>You can highlight lines by:  </p> <p><code>hl_lines=\"2-4\"</code></p>"},{"location":"setup/#add-tabbed-content-blocks","title":"Add tabbed content blocks","text":"<p>Add the following block to the mkdocs.yml file under extentions:  </p> <pre><code>markdown_extensions:\n  - pymdownx.tabbed:\n      alternate_style: true\n      combine_header_slug: true  \n</code></pre> <p>Add the tabbed content as the example below:  </p> <pre><code>=== \"Plain text\"  \n\n    Feed me a stray cat...  \n\n=== \"List\"  \n\n    * One  \n    * Two  \n    * Three \n</code></pre> Plain textList <p>Feed me a stray cat...  </p> <ul> <li>One  </li> <li>Two  </li> <li>Three </li> </ul>"},{"location":"setup/#admonitions","title":"Admonitions","text":"<p>Admonitions are a way to call out blocks of information.  </p> <ul> <li>Add <code>- admonition</code> to the mkdocs.yml  </li> <li>Place the text information under a title using exclaimation marks. The information block may need to be indented 4 spaces:    </li> </ul> <pre><code>!!! note \"Title of callout\"  \n\n    Now each of us from time to time, has gazed upon the sea.\n    And watched the warships pulling out, to keep this country free.\n    And most of us have read a book, or heard a lusty tale.\n    About the men who sail these ships, through lightening, wind and hail.  \n</code></pre> <p>Title of callout</p> <p>Now each of us from time to time, has gazed upon the sea. And watched the warships pulling out, to keep this country free. And most of us have read a book, or heard a lusty tale. About the men who sail these ships, through lightening, wind and hail.  </p> <p>A collapsable can be made with question marks <code>???</code>:  </p> The Hole <p>But theres a place within each ship, that legend fails to teach, Within the shell, deep down in Hell, where legend cannot reach. Its down below the waterline, it takes a living toil A hot metal living hell, that sailors call the HOLE.</p>"},{"location":"setup/#math-equations","title":"Math equations","text":"<p>\\(O(N)\\)</p>"},{"location":"setup/#references","title":"References","text":"<p>Material for MakeDocs Installation: Getting Started </p> <p>Manage python packages with pip: What is pip? </p> <p>Tutorial for setup: James Willett </p> <p>Print the MkDocs site to PDF: mkdocs-with-pdf</p>"},{"location":"Library/Data_Structures_and_Algos/basics/","title":"Algorithms","text":""},{"location":"Library/Data_Structures_and_Algos/basics/#resources","title":"Resources","text":"<ul> <li> <p>Introduction to Algorithms by Thomas H. Cormen  </p> </li> <li> <p>A Common-Sense Guide to Data Structures and Algorithms, Second Edition: Level Up Your Core Programming Skills by Jay Wengrow  </p> </li> </ul>"},{"location":"Library/Data_Structures_and_Algos/basics/#big-o","title":"Big O","text":"<p>Big O is a way to categorize algorithm time or memory requirements based on input.  It is not meant to be an exact measurement. It is a generalized measurement of  algorithm growth.  </p> <p>As the input grows, how fast does computation or memory grow?  </p> <p>Always drop constants.  N represents the length of the input. If the input is  looped through once, then the Big O is represented by \\(O(N)\\)</p>"},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/","title":"AWS for Fronted Engineers v2","text":""},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/#resources","title":"Resources","text":"<p>https://github.com/stevekinney/aws-v2 </p>"},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/#topics","title":"Topics","text":"<ul> <li>Hosted on AWS  </li> <li>Distributed globally  </li> <li>Secured with SSL  </li> <li>Automatically deployed with CI/CD  </li> <li>Dynamically responding to requests    </li> </ul> <p>Warning</p> <p>This does not cover servers or serverless architecture  </p>"},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/#setting-up-aws-account","title":"Setting up AWS account","text":"<p>Choose Basic Support.  </p>"},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/#billing-alerts","title":"Billing Alerts","text":"<p>Search for the Billing service and select Receive Free Tier Usage Alerts.  </p>"},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/#budgets","title":"Budgets","text":"<p>Search for the Budgets service.  </p> <p>Select a Cost Budget.  </p> <p>Enter Your budget amount.  </p>"},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/#iam","title":"IAM","text":""},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/#root-user","title":"Root User","text":"<p>Root user starts without an API key, for saftey reasons.  </p> <p>Add two-factor authentication.  </p> <p>Look for creating an Account Alias in the IAM dashboard. This will simplify  the account id name.  </p>"},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/#add-user","title":"Add User","text":"<p>Go to Users from IAM Dashboard. Create a new one.  </p> <p>You can select both AWS credential types Access Key and Password.  </p> <p>Set up the first account to replace the root user with Basic Administrative Access,  this will include most everything but Billing.  </p> <p>Group Policies</p> <p>Ideally, you would have groups with specific permissions already applied. You  would add the new user to the user group. In this tutorial, the permissions are  being applied specifically to the user.  </p> <p>Attach the AdministratorAccess policy to the first user.  </p> <p>Tags are meta data added to the user that would be helpful for the organization.  This tutorial will not be using Tags.  </p> <p>Access Key</p> <p>You will be showed the Access Key once. Store the Access Key in a secure area  Immediately. If this is lost, the root user will have to regenerate and access  key for the user.  </p> <p>Store the Access Key in a secure location.  </p> <p>Sign out as root user and log in with new administrator account. Setup the two-factor  authentication for the admin user.  </p>"},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/#s3","title":"S3","text":"<p>Simple Storage Service. You can store files and host webpages from an S3.  S3 is called a bucket with key/value storage.  </p> <p>Uploading is free. You are charged for the storage. You will be charged for requests.  </p> <p>The bucket needs to be the same name as the website domain name.  For this  reason, before setting up the S3, check for your domain name availability.  </p>"},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/#route-53","title":"Route 53","text":"<p>AWS Route 53 DNS for registering a domain name. Go to the Route 53 service  for registering a domain name. This will take some time to register.  </p>"},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/#create-s3-bucket","title":"Create S3 bucket","text":"<p>Tip</p> <p>If you are creating the S3 bucket as a website, the bucket name must be the  same as your registered domain name, like \"catherding.com\"  </p> <p>Search for the S3 service. Create the bucket.  </p> <p>Select ACLs disabled.  </p> <p>If the bucket is for a website, you will have to temporarily Un-Block all public access.  Later this will have to be turned back on, but if it is regular storage, leave  the box checked. Do not allow public access.  </p> <p>Don't need server side encrytion or advanced settings.  </p>"},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/#setting-up-policies-for-the-bucket","title":"Setting up policies for the bucket","text":"<p>You will set up a policy allowing anyone to read from the bucket, but nothing else.  This will allows people to visit the site.  </p> <p>Go to the bucket. Open up the permissions. Look at the policies.  </p> <p>When looking at the JSON of the policies, Principal is who the policy applies to,  Effect is either allowing or blocking the principal, Action is what the principal  is doing, and Resource is what the action is on.  </p> <p>There is a Policy Generator button. Click on this and for allowing people on the  internet to see the S3 bucket's website, you will set:  </p> <p>Effect: Allow Principle: * AWS Service: null Actions: 1 Action(s) Selected Resource Name: arn:aws:s3:::bucketName/keyName  </p> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:GetObject\",\n      \"Resource\": \"arn:aws:s3:::YOUR_BUCKET_NAME_HERE/*\"\n    }\n  ]\n}\n</code></pre> <p>You can then copy the generated policy and add it back to the bucket policies.  He added <code>*</code> for the keyName above.  </p>"},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/#upload-a-test-page","title":"Upload a Test page","text":"<p>You can upload any html file as the test website. Start from the S3 bucket, there  should be a button that says Upload. Select it and upload a simple html file.  You can compy the url for th html from the S3 bucket for the html file and paste  that into the browser to see it online.  </p> <p>To improve on the url there is an option on the S3 bucket for hosting a static website.</p> <p>Scroll down in the options on Properties on the S3 bucket until you find Static website hosting.  Choose Edit and select enable. Add the name of the file for the site's index.html.  </p>"},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/#aws-cli","title":"AWS CLI","text":"<p>Install the AWS CLI. You can look up how to add multiple credentials for multiple  users.  </p>"},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/#commands-and-deploying","title":"Commands and Deploying","text":"<p>Show the contents of a bucket:  </p> <p><code>aws s3 ls s3://bucketName</code></p> <p>I guess you can open the AWS cli inside a React project. Run <code>npm install</code> if the  React project was recently cloned. Build the project with <code>npm run build</code>.  </p> <p>Copy the build folder to your bucket: <code>aws s3 cp build s3://bicketName --recursive</code> </p> <p>The build of the files should now be showing up in the bucket. You can visit  the website. But the urls will not work and the site is not secure.  </p>"},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/#adding-the-registered-domain","title":"Adding the registered domain","text":"<p>Go to Route 53 and find your registed domain. If you don't intend on keeping the  domain for more than a year, cancel auto-renewal.  </p> <p>On the domain name, select Manage DNS, click on the comain name and select  Details. There is a toggle for Alias, switch it to on. You can select from  the Alias dropdown to select Route Traffic To your S3 bucket. Select S3 bucket,  then region, and the bucket you want to direct the domain to. When done, click  Create Record.  </p>"},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/#register-ssl-certificate","title":"Register SSL certificate","text":"<p>Find the Amazon Certificate Manager Service. Request a public certificate. In the  example he creates two fully qualified domain names for his site, one with 'www.'  and one without it.  </p> <p>DNS validation is the easiest way to do it.  </p> <p>NOT DONE YET! You have to the domains and click \"Create records in Route 53\".  </p>"},{"location":"Library/Frontend_Masters/aws_frontend_v2/aws_frontend_v2/#www-redirect","title":"www Redirect","text":""},{"location":"Library/Frontend_Masters/react_v18/intro/","title":"React 19","text":"<p>Resources:  </p> <p>Course Website: https://react-v9.holt.courses/ Course Repo: https://github.com/btholt/citr-v9-project </p>"},{"location":"Library/Frontend_Masters/react_v18/intro/#run-the-react-page-using-unpkgcom","title":"Run the React page using unpkg.com","text":"<p>The first commit will have the React dependencies imported via a script in the  index.html file. You can run the project with:  </p> <p><code>npx serve</code> </p>"},{"location":"Library/Frontend_Masters/react_v18/intro/#packagejson","title":"Package.json","text":"<p><code>npm init -y</code> to create package.json  </p>"},{"location":"Library/Frontend_Masters/react_v18/intro/#prettier","title":"Prettier","text":"<p>This adds a file that is checked during the Continuos Integration path. If the  project is failing the Prettier Linter, then it will not push the code.  </p> <p>Add Prettier code formatting. Install into VS Code. Then install Prettier onto  the project:   </p> <pre><code>`npm i -D prettier`\n</code></pre> <p>Note</p> <p>The <code>D</code> means that it is a development tool     </p> <p>Add a command that formats the project. Open package.json, then under \"scripts\"  include:  </p> package.json<pre><code>\"format\": \"prettier --write \\\"src/**/*.{js,jsx,css,html}\\\"\"\n</code></pre> <p>To run the added script to clean up the document, enter into the terminal:  </p> <pre><code>npm run format  \n</code></pre>"},{"location":"Library/Frontend_Masters/react_v18/intro/#eslint","title":"ESLint","text":"<p><code>npm i -D eslint</code> <code>npm install --save-dev eslint-config-prettier</code> <code>npm i -D eslint-plugin-react@7.37.1</code> </p> <p>Create a new file called <code>eslint.config.mjs</code> </p> <p>Add the following code to that file:  </p> <pre><code>import js from \"@eslint/js\";\nimport globals from \"globals\"; \nimport prettier from \"eslint-config-prettier\";  \n\n/** @type {import('eslint').Linter.Config[]} */\n\nexport default [\n    js.configs.recommended,\n    {\n        files: [\"**/*.js\", \"**/*.jsx\"],\n        languageOtpions: {\n            globals: {...globals.browser, ...globals.node },\n            parserOptions: {\n                ecmaFeatures: {\n                    jsx: true,\n                },\n            },\n        },\n    },\n    prettier\n]\n</code></pre> <p>Add this line under \"scripts\" in package.json:  </p> <p><code>\"lint\": \"eslint\",</code> </p> <p>You can now execute the linter with the command: <code>npm run lint</code> </p> <p>If there are errors, they can be fixed with the following command:  </p> <p><code>npm run lint -- --fix</code></p>"},{"location":"Library/Frontend_Masters/react_v18/intro/#vite","title":"Vite","text":"<p>The bundler  </p> <p><code>npm i vite</code> </p> <p><code>npm i @vitejs/plugin-react</code> </p> <p>Create a file called <code>vite.config.js</code> and paste in the following code:  </p> <pre><code>import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\nexport default defineConfig({\n  plugins: [react()],\n});  \n</code></pre>"},{"location":"Library/Frontend_Masters/react_v18/intro/#react","title":"React","text":"<p><code>npm i react@18.3.1</code> <code>npm i react-dom@18.3.1</code> </p>"},{"location":"Library/Frontend_Masters/react_v18/intro/#react-dev-tools","title":"React Dev tools","text":"<p><code>$0</code> entered into the console will print the last element selected by the dev  inspector.  </p> <p><code>$r</code> entered into the console prints the last React component selected into the  console.  </p>"},{"location":"Library/Frontend_Masters/react_v18/jsx/","title":"JSX","text":"<p>Vite prefers the tags to end in <code>.jsx</code>. But for the most part, .jsx is interchangable  with <code>.js</code>.  </p>"},{"location":"Library/Frontend_Masters/react_v18/jsx/#setting-up-a-proxy-server-with-vite","title":"Setting up a Proxy Server with Vite","text":"<p>For this example, there is a local server running on port 3000 that contains  apis. The Vite React project is running on port 5173. To eliminate CORS errors,  Vite can establish a proxy server and tells the react project that the target,  which is the api server, is actually running on port 5173 also. This will give  the appearance that both the frontend client and the api server are on the same  port.  </p> <p>Inside of <code>vite.config.js</code>, modify it to look like this:  </p> vite.config.js<pre><code>import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\nexport default defineConfig({\n  server: {\n    proxy: {\n      \"/api\": {\n        target: \"http://localhost:3000\",\n        changeOrigin: true,\n      },\n      \"/public\": {\n        target: \"http://localhost:3000\",\n        changeOrigin: true,\n      },\n    },\n  },\n  plugins: [react()],\n});\n</code></pre> <p>To run the api server, it is found in the supplied code for repository  <code>citr-v9-project</code> by Brain Holt. There is a folder called <code>api</code>. Open a command  prompt from that folder. Run <code>npm i</code>, then <code>npm run dev</code> to get the server running.  </p> <p>Tip</p> <p>When building component, like Order component, it is better to declare  it with <code>function</code> rather than as an annonymous function. A component created  with <code>function</code> will show up in the console as a function if there is an error  or for logging. Annonymous functions are not identified as function, making tracing  them down in the stack trace a little harder.  </p> <p>The parenthesis on arrow functions means continued on next row:  </p> <p>```js {cart.map((item, index) =&gt; ( </p> <li> {item.size} \u2013   {item.pizza.name} \u2013   {item.price} </li> <p>))```</p>"},{"location":"Library/Frontend_Masters/react_v18/react/","title":"React","text":""},{"location":"Library/Frontend_Masters/react_v18/react/#strict-mode","title":"Strict Mode","text":"<p>The intention of \\&lt;StrictMode&gt; is to inform developers of legacy code or updating  changes that will have an impact on the future of the code. </p> <p>Strict mode double renders everything.  </p>"},{"location":"Library/Frontend_Masters/react_v18/react/#custom-hooks","title":"Custom Hooks","text":"<p>Placing effects in custom hooks allow you to test the function. A custom hook  is essentially a function calling another function. An example of a custom hook  is in the file <code>usePizzaOfTheDay.jsx</code>. The custom hook, wich contacts an api,  is called in the componenent <code>PizzaOfTheDay.jsx</code>.  </p> <p>Naming the custom hook with the prefix <code>use</code> can potentially allow the React linter  to catch errors in the hook.  </p>"},{"location":"Library/Frontend_Masters/react_v18/react/#usedebugvalue","title":"useDebugValue()","text":"<p>It creates a debug variable name for your values. Look at the example in  <code>usePizzaOfTheDay.jsx</code>. When the project is running, you can check the  <code>pizzaOfTheDay</code> variable in the inspector. There will be a snake case debug variable  in the inspector.  </p>"},{"location":"Library/Frontend_Masters/react_v18/react/#react-forms","title":"React forms","text":"<p>It is recommended to use <code>&lt;button type=\"submit\"&gt;</code> vs <code>&lt;button onClick={()=&gt;}&gt;</code>  because submit allows the user to submit the form by hitting <code>Enter</code>, as well as  clicking the button.  </p>"},{"location":"Library/Frontend_Masters/react_v18/react/#tanstack-router","title":"Tanstack Router","text":"<p>Focused on client-side routing.   </p> <p>React Router would work as well. It does more server-side rendering.  </p> <p>Install Tanstack:  </p> <pre><code>npm install @tanstack/react-router@1.65.0\nnpm install -D @tanstack/router-plugin@1.65.0 @tanstack/router-devtools@1.65.0\n</code></pre> <p>Add Tanstack to vite.config.js:  </p> vite.config.js<pre><code>// at top\nimport { TanStackRouterVite } from \"@tanstack/router-plugin/vite\";\n\n// add before react() in plugins\nplugins: [TanStackRouterVite(), react()],  \n</code></pre> <p>Add a new folder under <code>src</code> called <code>router</code>. Add a root folder, <code>__root.jsx</code> in  that folder. This root fill will contain the root attributes that all routes will  inherit. </p> <p>The <code>__</code> double underscore is called \"dunder score\". It is from python.  </p> <p>Inside of <code>App.jsx</code>, add:  </p> App.jsx<pre><code>import { RouterProvider, createRouter } from \"@tanstack/react-router\";\nimport {routeTree } from \"./routeTree.gen\";\n\nconst router = createRouter({routeTree});  \n\nconst App = () =&gt; {\n\n  return (\n    &lt;!-- Stuff --&gt;  \n    &lt;RouterProvider router={route} /&gt;  \n  );\n};\n</code></pre> <p>Create an index route in the file <code>index.lazy.jsx</code> located inside the <code>src +&gt; routes</code>  folder.  </p> index.lazy.jsx<pre><code>import { createLazyFileRoute, Link } from \"@tanstack/react-router\";\n\nexport const Route = createLazyFileRoute(\"/\")({\n  component: Index,\n});\n\nfunction Index() {\n  return (\n    &lt;!-- code --&gt;\n  );\n}\n</code></pre> <p>Move the components using the Tanstack rouning into the <code>routes</code> folder. Change  the name of the component to lower case. Add <code>.lazy</code> before the file type. This  will lazy load the component. Example is moving <code>Order.jsx</code> to <code>src =&gt; routes</code>  and renaming to <code>order.lazy.jsx</code>.  </p> <p>Inside the <code>order.lazy.jsx</code>, add code to give the component a route:    </p> order.layz.jsx<pre><code>import { createLazyFileRoute } from \"@tanstack/react-router\";  \n\nexport const Route = createLazyFileRoute(\"/order\")({\n  component: Order,\n});\n\nfunction Order() {\n  return (\n    &lt;!-- code --&gt;\n  );\n};\n\nexport default Order;\n</code></pre>"},{"location":"Library/Frontend_Masters/react_v18/react/#tanstack-query","title":"Tanstack Query","text":"<p>Resource</p> <p>Handles some of the function as <code>useEffect()</code>?  Built in caching. Always use this  for api, is his recommendation.  </p> <p>Install Tanstack Query:  </p> <pre><code>npm i @tanstack/react-query@5.59.13\nnpm i -D @tanstack/react-query-devtools@5.59.13 @tanstack/eslint-plugin-query@5.59.7  \n</code></pre> <p>Add this to the eslint.config.mjs file:  </p> eslint.config.mjs<pre><code>// at top\nimport pluginQuery from \"@tanstack/eslint-plugin-query\";\n\n// under reactPlugin.configs.flat[\"jsx-runtime\"]\n...pluginQuery.configs[\"flat/recommended\"],\n</code></pre> <p>Let's also add the dev tools, like we did for the router. In src/routes/__root.jsx:  </p> __root.jsx<pre><code>// at top\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\n\n// under router dev tools\n&lt;ReactQueryDevtools /&gt;\n</code></pre> <p>Finally, we need to add the QueryClient. In App.jsx, add: </p> App.jsx<pre><code>// Add imports\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\n\n// Create a property under the router\nconst queryClient = new QueryClient()\n\n// Add the provider to the app\n&lt;QueryClientProvider client={queryClient}&gt;\n  &lt;RouterProvider router={router} /&gt;\n&lt;/QueryClientProvider&gt;\n</code></pre> <p>So react-query makes interacting with APIs very simple and makes it easy to read.  You just read a hook and it'll either give you a isLoading status or the data.  Once the data comes back, it'll refresh the component with the data. So let's start  by writing our very simple fetch call. Create a folder called <code>api</code> inside of <code>src</code> and  create <code>getPastOrders.js</code> and add:</p> <p>src =&gt; api =&gt; getPastOrders.js:  </p> getPastOrders.js<pre><code>export default async function getPastOrders(page) {\n  const response = await fetch(`/api/past-orders?page=${page}`);\n  const data = await response.json();\n  return data;\n}\n</code></pre> <p>Very simple request to an API that returns data. That's it!</p> <p>Let's now go make <code>past.lazy.jsx</code> inside of <code>routes</code>: </p> <pre><code>import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { createLazyFileRoute } from \"@tanstack/react-router\";\nimport getPastOrders from \"../api/getPastOrders\";\n\nexport const Route = createLazyFileRoute(\"/past\")({\n  component: PastOrdersRoute,\n});\n\nfunction PastOrdersRoute() {\n  const [page, setPage] = useState(1);\n  const { isLoading, data } = useQuery({\n    queryKey: [\"past-orders\", page],\n    queryFn: () =&gt; getPastOrders(page),\n    staleTime: 30000,\n  });\n  if (isLoading) {\n    return (\n      &lt;div className=\"past-orders\"&gt;\n        &lt;h2&gt;LOADING \u2026&lt;/h2&gt;\n      &lt;/div&gt;\n    );\n  }\n  return (\n    &lt;div className=\"past-orders\"&gt;\n      &lt;table&gt;\n        &lt;thead&gt;\n          &lt;tr&gt;\n            &lt;td&gt;ID&lt;/td&gt;\n            &lt;td&gt;Date&lt;/td&gt;\n            &lt;td&gt;Time&lt;/td&gt;\n          &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n          {data.map((order) =&gt; (\n            &lt;tr key={order.order_id}&gt;\n              &lt;td&gt;{order.order_id}&lt;/td&gt;\n              &lt;td&gt;{order.date}&lt;/td&gt;\n              &lt;td&gt;{order.time}&lt;/td&gt;\n            &lt;/tr&gt;\n          ))}\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n      &lt;div className=\"pages\"&gt;\n        &lt;button disabled={page &lt;= 1} onClick={() =&gt; setPage(page - 1)}&gt;\n          Previous\n        &lt;/button&gt;\n        &lt;div&gt;{page}&lt;/div&gt;\n        &lt;button disabled={data.length &lt; 10} onClick={() =&gt; setPage(page + 1)}&gt;\n          Next\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p><code>queryKey</code> inside of <code>useQuery()</code> is a key for a cache. If the query has been run  before, the browser may have that query saved in cache. So, the browser will be  quicker and just return the cahce, using the <code>queryKey</code>. Similar to Redis.  </p> <p>useQuery() returns a lot of <code>is---</code> variables. Check them out, like <code>isLoading</code>.  </p>"},{"location":"Library/Frontend_Masters/react_v18/react/#creating-modals","title":"Creating Modals","text":"<p>Resource </p> <p>Create a file in src called <code>Modal.jsx</code>. Look at the code in the resource file.  <code>useRef()</code> can only point at on thing, that is the <code>.current</code> of the elRef object.  The object does not change? It is consistent through re-renders.  </p> <p>Inside the useEffect() of the Modal.jsx file, a dispose type action needs to be  performed:  </p> <p><code>return () =&gt; modalRoot.removeChild(elRef.current);</code> </p> <p>This is because every time the modal is called, it is creating a new modal  \\&lt;div&gt; and not disposing the old one. This is preventing a memory leak.  </p> <p>Inside of <code>past.lazy.jsx</code> there is <code>enabled</code> inside of useQuery. Using this will  reach out to that cache and check for the requested object first? Double exclaimation  is just converting truthy and falsy. It may not be required.  </p> <pre><code>  const { isLoading: isLoadingPastOrder, data: pastOrderData } = useQuery({\n    queryKey: [\"past-order\", focusedOrder],\n    queryFn: () =&gt; getPastOrder(focusedOrder),\n    enabled: !!focusedOrder,\n    staleTime: 24 * 60 * 60 * 1000, // one day in milliseconds,\n  });\n</code></pre>"},{"location":"Library/Frontend_Masters/react_v18/react/#error-boundaries","title":"Error Boundaries","text":"<p>Resource </p> <p>An alternative to the React ErrorBoundary is found on npm react-error-boundary.  This tutorial though uses the react version. If there is an error in the code,  rather than allowing the whole app to crash, the error is contained within a  boundary.  </p> <p>This way requires a class component. Class components cannot use hooks.  </p> <p>The example below shows a page that has a button to redirect back to the home page  if there is an error. The error is suppose to be printed in the dev console in the  web browser.  </p> <p>ErrorBoundary.jsx:  </p> <pre><code>// mostly code from reactjs.org/docs/error-boundaries.html\nimport { Component } from \"react\";\nimport { Link } from \"@tanstack/react-router\";\n\nclass ErrorBoundary extends Component {\n  state = { hasError: false };\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n  componentDidCatch(error, info) {\n    console.error(\"ErrorBoundary caught an error\", error, info);\n  }\n  render() {\n    if (this.state.hasError) {\n      return (\n        &lt;div className=\"error-boundary\"&gt;\n          &lt;h2&gt;Uh oh!&lt;/h2&gt;\n          &lt;p&gt;\n            There was an error with this listing. &lt;Link to=\"/\"&gt;Click here&lt;/Link&gt;{\" \"}\n            to back to the home page.\n          &lt;/p&gt;\n        &lt;/div&gt;\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n</code></pre> <p>The Error Boundary component must wrap the component that it is creating a boundary  around. If it is within the component, it will not catch the error:  </p> <pre><code>function ErrorBoundaryWrappedPastOrderRoutes(props) {\n  return(\n    &lt;ErrorBoundary&gt; \n      &lt;PastOrderRoute {...props} /&gt; \n    &lt;ErrorBoundary&gt;  \n  );\n}\n</code></pre>"},{"location":"Library/Frontend_Masters/react_v18/react/#uncontrolled-forms","title":"Uncontrolled Forms","text":"<p>Resource </p> <p>Uncontrolled means that the state is not being managed by the state of React. </p> <p>This is written in the src =&gt; api =&gt; <code>postContact.js</code> file. A new file is added in src=&gt; routes =&gt; <code>contact.lazy.jsx</code>.  </p> <p><code>useMutation()</code> from Tanstack is a form of <code>PUT</code> and <code>PATCH</code>.  </p>"},{"location":"Library/Frontend_Masters/react_v18/testing/","title":"Testing","text":""},{"location":"Library/Frontend_Masters/react_v18/testing/#vitest-setup","title":"Vitest Setup","text":"<p>Resource for final test project </p> <p>Vitest replaces Jest, but mimics Jest.  </p> <p>Install the following:  </p> <p><code>npm install -D vitest@2.1.3 @testing-library/react@16.0.1 happy-dom@15.7.4</code> </p> <p>Create a folder src =&gt; <code>__tests__</code>. It is a magical name meaning that the testing  will be looking for this name. All files inside this folder will be inside considered  tests.  </p> <p>It is good practice to label all the test files with the suffix <code>test</code>, like  <code>App.test.jsx</code>.  </p> <p>Add a script inside of <code>package.json</code> for executing Vitest:  </p> <p><code>\"test\": \"vitest\"</code> </p> <p>In the <code>vite.config.js</code> file add the following after and at the same level of  \"pluggins\":  </p> <pre><code>test: {\n  envirionment: \"happy-dom\", \n} \n</code></pre> <p>Note: happy-dom will probably be replaced by playwright in the future. </p> <p>Execute all test with:  </p> <p><code>npm run test</code> or <code>npm test</code> or <code>npm t</code> </p>"},{"location":"Library/Frontend_Masters/react_v18/testing/#clean-up","title":"Clean up","text":"<p>The <code>screen</code> object holds on to state. So previous test results will show up in  new tests. To clear the old test, one way is to add <code>cleanup</code> and <code>afterEach</code> to  the test component:  </p> <pre><code>import { render, cleanup } from \"@testing-library/react\";\nimport { expect, test, afterEach } from \"vitest\";  \n\nafterEach(cleanup);\n</code></pre> <p>You could also call cleanup() at the end of every test method instead.  </p> <p>Adding async to the testing methods has no negative affect if the component does  not call async. His examlpes use async just in case the component gets an async  method in the future:  </p> <p><code>test(\"alt text renders on image\", async () =&gt; { ...</code> </p>"},{"location":"Library/Frontend_Masters/react_v18/testing/#vitest-mock","title":"Vitest Mock","text":"<p>Install: <code>npm i -D vitest-fetch-mock@0.3.0</code> </p> <p>The mock api is in the file <code>contact.lazy.node.test.jsx</code> </p> <p>some things that are being tested: <pre><code>const requests = fetchMocker.requests(); &lt;!-- Everything returned by mocker ---&gt; \nexpect(requests.length).toBe(1); &lt;!-- Make sure only one call was returned ---&gt; \nexpect(requests[0].url).toBe(\"/api/contact\"); &lt;!-- Called the right api ---&gt; \nexpect(fetchMocker).toHaveBeenCalledWith(\"/api/contact\", {\nbody: JSON.stringify(testData),\nheaders: {\n  \"Content-Type\": \"application/json\",\n},\nmethod: \"POST\",\n});\n</code></pre></p>"},{"location":"Library/Frontend_Masters/react_v18/testing/#testing-custom-hooks","title":"Testing Custom Hooks","text":"<p><code>usePizzaOfTheDay.node.test.jsx</code> is the test hook example. The code below is what  is going on:  </p> <pre><code>import { expect, test, vi } from \"vitest\";  \nimport {render } from \"@testing-library/react\";  \nimport createFetchMock from \"vitest-fetch-mock\";\nimport { usePizzaOfTheDay } from \"../usePizzaOfTheDay\"' \n\nconst fetchMocker = createFetchMock(vi);  \nfetchMocker.enableMocks();  \n\nconst testPizza = { \n  id: \"calabrese\", \n  name: \"The Calabrese Pizza \", \n  category: \"Supreme\", \n  description: \"lol pizza from Calabria\", \n  image: \"/public/pizzas/calabrese.webp\", \n  siz: { S: 12.25, M: 16.25, L: 20.25 }, \n};  \n\n// A hook cannot exist outside of a component. So a component for the hook must be made:  \n\nfunction getPizzaOfTheDay() {\n  let pizza; \n\n  function TestComponent() {\n    pizza = usePizzaOfTheDay(); \n    return null;  \n  }\n\n  render(&lt;TextComponent /&gt;); \n\n  return pizza;\n}  \n\ntest(\"gives null when first called\", async () =&gt; {\n  fetch.mockResponseOnce(JSON.stringify(testPizza)); \n  const pizza = getPizzaOfTheDay(); \n  expect(pizza).toBeNull();  \n});  \n</code></pre> <p>If you look at the example in the git repository, it is simplified to use  <code>renderHook()</code> which generates mock data instead of calling <code>fetch.mockResponseOnce()</code>. </p>"},{"location":"Library/Frontend_Masters/react_v18/testing/#snapshot-testing","title":"Snapshot Testing","text":"<p>Low effort and low accuracy for coverage of 100% of the code. Because it isn't the  most accurate at testing, it is not considered reliable. It is easy to implement  though.  </p> <p>For the Cart component:</p> <p>Cart.text.jsx  </p> <pre><code>import { expect, test } from \"vitest\"; \nimport { render } from \"@testing-library/react\"; \nimport Cart from \"../Cart\";  \n\ntest(\"snapshot with neothing in cart\", () +&gt; {\n  const { asFragment } = render(&lt;Cart cart={{}} /&gt;); \n  expect(asFragment()).toMatchSnapshot();  \n});  \n</code></pre> <p>This will generate a folder called \"snapshots\". What is happening is that a  file is being created of what the component is suppose to look like. Then every  following time that the component is rendered, it is compared to the snapshot.  </p>"},{"location":"Library/Frontend_Masters/react_v18/testing/#vite-code-coverage","title":"Vite Code Coverage","text":"<p>Install:  </p> <p><code>npm i -D @vitest/coverage-v8@2.1.3</code> </p> <p>In <code>vite.config.js</code> add the following underneath <code>plugins</code>:  </p> <pre><code>test: {\n  environment: \"happy-dom\", \n  coverage: {\n    reporter: [ \"text\", \"json\", \"html\"], \n  },\n},\n</code></pre> <p>Inside of package.json scripts add:  </p> <pre><code>\"coverage\": \"vitest --coverage\"  \n</code></pre> <p>Then to execute the test coverage report <code>npm run coverage</code>.  The results  generated will appear in the console and also a new directory will be created in  the root folder containing an html document displaying the coverage.  </p>"},{"location":"Library/Frontend_Masters/react_v18/testing/#vitest-ui","title":"Vitest UI","text":"<p>Another fun little tool let's you use is Vitest UI. It allows you to see and  manage all your tests from the web browser. Let's add it.</p> <pre><code>npm i -D @vitest/ui@2.1.3\n</code></pre> <p>And in your package.json</p> <pre><code>// in scripts\n\"test:ui\": \"vitest --ui\"\n</code></pre> <p>Now from the command line run npm run test:ui and it should pop up your browser  with the Vitest UI open. Super convenient, particularly in places you need to  run individual tests repeatedly and you don't have the VS Code extension. The  module graph is a cool visualization as well.  </p> <p>Install the <code>Vitest</code> VS Code extension.  </p>"},{"location":"Library/Frontend_Masters/react_v18/testing/#browser-test","title":"Browser Test","text":"<p>Playwright offers browser testing. It is still experimental in this  turtorial, so I am not going to include it.  </p>"},{"location":"Library/Frontend_Masters/react_v18/testing/#istanbul","title":"Istanbul","text":"<p>React 19 may not support the V8 version of testing used earlier. In that  case, you will have to install <code>Istanbul</code> for code coverage.  </p> <p>Intall: <code>npm install -D @vitest/istanbul</code> </p> <p>Then move the coverage configuration to the vitest.workspace.js file:</p> <pre><code>export default defineWorkspace([\n  {\n    extends: \"./vite.config.js\",\n    test: {\n      // ...\n      // add to the end of the happy-dom test object \n      coverage: {\n        provider: \"istanbul\"\n        reporter: [\"text\", \"json\", \"html\"],\n      },\n    },\n  },\n  {\n    extends: \"./vite.config.js\",\n    test: {\n      // ...\n      // add to the end of the browser test object \n      coverage: {\n        reporter: [\"text\", \"json\", \"html\"],\n      },\n    },\n  },\n]);\n</code></pre>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/","title":"1 Introduction","text":"<p>Sources:  </p> <p>zyBook ISBN: 978-1-394-09384-7</p> <p>Operating Systems: - Lubomir Bic / Professor of Computer Science / University of California, Irvine  </p> <p>Operating System Concepts: - Abraham Silberschatz / Yale University - Greg Gagne / Westminster College - Peter B. Galvin / Starfish Storage</p> <p>https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/</p> <p>Last minute ZyBook review: - table 1.1 - table 1.3.1 - table 1.3.2  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#11-the-role-of-an-os","title":"1.1 The role of an OS","text":"<p>operating system (OS) is the software that runs on the bare hardware of a computer and provides essential support for users to develop and use applications in the most efficient and safe manner.  </p> <p> </p> <p>Abstraction is the act of removing unimportant details or attributes of objects in order to construct more general and less complex objects</p> <p>Virtualization is the act of creating the illusion of having one or more objects with more desirable characteristics than the real object. OSs rely on virtualization to create virtual CPUs, memory, I/O devices, and other system components that facilitate the work of programmers and users.</p> <p>One of the main tasks of an OS is to optimize the use of all computational resources to ensure good overall performance and allowing safe communication among different tasks  </p> <p>The overall performance of all applications can be improved by using concurrency. The OS strives to keep the CPU, main memory, and all storage and I/O devices busy at all times by overlapping independent operations whenever possible.  </p> <p>Multiprogramming is a technique that keeps several programs active in memory and switches execution among the different programs to maximize the use of the CPU and other resources.  </p> <p>Time-sharing (multitasking) is an extension of multiprogramming where the CPU is switched periodically among all active computations to guarantee acceptable response times to each user. Time-sharing employs the concept of virtualization by creating the illusion of having a separate virtual CPU for each computation.</p> <p> </p> <p>For Time-sharing; The time interval during which a process runs is typically much shorter than the compute phase and thus the processes appear to run concurrently, albeit at half the speed.  </p> <p> </p> <p>The main objective of time-sharing is to improve resource utilization. FALSE! </p> <p>Resource utilization is improved by multiprogramming, which overlaps CPU-bound and I/O-bound computations. Time-sharing only switches the CPU among different computations to create the illusion of simultaneous execution, which generally does not improve resource utilization beyond simple multiprogramming.  </p> <p>The use of time-sharing will guarantee reasonable response to each computation,  no computation can monopolize the CPU indefinitely.  </p> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#12-the-os-structure","title":"1.2 The OS Structure","text":"<p>The kernel of an OS is the minimal set of functions necessary to manage the system resources safely and efficiently.  - Services for memory - Device management - communications among the concurrent activities  </p> <p>To deal with issues of security, the instruction set provided by the CPU is divided into two sets: privileged and non-privileged. - A privileged instruction performs critical operations.  Only the OS kernel is allowed to execute privileged instructions.     - access I/O devices      - access the CPU's status and control registers  </p> <p>To guarantee that no programs outside of the trusted kernel can use privileged instructions, the CPU operates in two different modes, indicated by a special mode bit. - Kernel mode: both privileged and non-privileged instructions are used. - User mode: only non-privilegedinstructions are used.  </p> <p> </p> <p>A system call is a request from an application for an OS service. - It is a libarary function  </p> <p>A supervisor call (kernel call) is a privileged instruction that automatically transfers execution control to a well-defined location within the OS kernel. Thus supervisor calls provide the interface between the OS kernel and the higher-level software.  </p> <p>A supervisor call is similar to a function call with two special features: - switch mode bit from user to kernel - Function is specified by an index into a branch vector. kernel-mode execution is limited to only well-defined entry points within the kernel.  </p> <p>A supervisor call can be executed by any program. Any program can make direct use of a kernel function by issuing the corresponding supervisor call.  </p> <p>Changing from user mode to kernel mode must be done in a controlled manner using a supervisor call instruction (privileged instruction).  </p> <p>An interrupt is an event that diverts the current execution of a program to a predefined location in the kernel in order to respond to an event. An interrupt is triggered by a hardware signal sent to the CPU from an external device. </p> <p>The two most common uses of interrupts are as follows: - Signal to the OS the completion of an I/O operation. The interrupt is generated by the I/O device. - Implement time-sharing by periodically switching the CPU among multiple concurrent computations. The interrupt is generated by a countdown timer.  </p> <p>A trap (also called an internal interrupt) is an interrupt triggered by the currently executing instruction.  - Divide by zero - invalid opcode - arithmetic overflow  </p> <p>An interrupt, both external and internal, stops the execution of the current program, saves the state of the computation, and transfers control to the kernel.  </p> <p>An interrupt handler is a kernel function, invoked whenever an interrupt occurs, that determines the cause of the interrupt and invokes the appropriate kernel function to provide the response.  </p> <p>An application is requesting an I/O operation from the OS, which consists of several steps: Execute supervisor_call in user mode Execute kernel function in kernel mode Start the I/O device  Block the current application Transfer execution to another application Data transfer for the current application completes An interrupt occurs Transfer execution from another application back to the kernel in kernel mode Handle the I/O completion in kernel mode Transfer execution back to S() in user mode Execute another supervisor_call in user mode to restart I/O and again block current application. Resume the other application in user mode.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#13-the-evolution-and-scope-of-os","title":"1.3 The evolution and scope of OS","text":"<p>Moore's law, formulated by the scientist Gordon Moore, is the observation that the number of transistors in an integrated circuit doubles about every two years.  </p> <p> </p> <p>OS applications: </p> <p>Mainframes are considered to be general-purpose computers  </p> <p>An advanced aircraft is likely to have a real-time computer on board to help control the aircraft  </p> <p>Select the typical defining characteristics associated with each OS type: Interactive multi-user OS: - Time-sharing - Interrupts - GUI - Multiprogramming OSs for supercomputers, distributed systems, and mobile devices - Time sharing - Parallel/distributed computing - Interrupts - GUI - Multiprogramming  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#14-computer-system-organization","title":"1.4 Computer system organization","text":"<p>A device controller maintains some local buffer storage and a set of special-purpose registers. The device controller is responsible for moving the data between the peripheral devices that it controls and its local buffer storage.  </p> <p>Typically, operating systems have a device driver for each device controller. This device driver understands the device controller and provides the rest of the operating system with a uniform interface to the device.  </p> <p>A memory controller synchronizes access to shared memory between the CPU and device controllers.  </p> <p>How does the controller inform the device driver that it has finished its operation? This is accomplished via an interrupt.  </p> <p>There is a table of pointers to interrupt routines. The table of pointers is stored in  low memory (the first 100 or so locations). These locations hold the addresses to the interrupt  service routines of various devices. This array, called interrupt vector </p> <p>The purpose of a vectored interrupt mechanism is to reduce the need for a single interrupt handler to search all possible sources of interrupts to determine which one needs service. </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#how-the-less-sophistocated-interrupt-mechanism-works","title":"How the (less sophistocated) interrupt mechanism works:","text":"<ul> <li>The CPU hardware has a wire called the interrupt-request line. This is checked after every execution.  </li> <li>A controller sends a signal     </li> <li>The CPU jumps to the interrupt-handler routine by using the interrupt number as an index into the interrupt vector.  </li> <li>CPU begins execution at the address associated with the index.  </li> <li>The interrupt handler saves any state that it will be changing.  </li> <li>Interrupt handler determines the cause of the interrupt  </li> <li>Interrupt handler performs the necessary processing  </li> <li>Interrupt handler restores original state  </li> <li>Interrupt handler executes <code>return_from_interrupt</code> instruction to CPU  </li> </ul> <p>Device controllers raise an interrupt by asserting a signal on the request line  </p> <p>The CPU catches the interrupt and dispatches it to the interrupt handler   </p> <p>The handler clears the interrupt by servicing the device.  </p> <p>Modern OS need a more sophistocated interrupt-handling: - Need the ability to defer interrupt handling during critical processing - Need an efficient way to dispatch to the proper interrupt handler for a device - Need multilevel interrupts, so that the OS can distinguish between high and low  priority.  </p> <p>The above features are provided by interrupt-controller hardware </p> <p>Most CPUs have two interrupt request lines: - Nonmaskable interrupt: events like unrecoverable memory errors. - Maskable: can be turned off by CPU before the execution of critical instructions.     - USed by device controllers to request service  </p> <p>interrupt chaining, in which each element in the interrupt vector points to the head of a list of interrupt handlers. This structure is a compromise between the overhead of a huge interrupt table and the inefficiency of dispatching to a single interrupt handler.  </p> <p>interrupt priority levels: These levels enable the CPU to defer the handling of low-priority interrupts without masking all interrupts and makes it possible for a high-priority interrupt to preempt the execution of a low-priority interrupt.  </p> <p>The first program to run on computer power-on is a bootstrap program, which then loads the operating system  </p> <p>erasable programmable read-only memory (EEPROM):     - infrequently wirtten to     - Nonvolatile     - iPhone stores serial numbers and harware information here  </p> <p>Direct memory access is a bus designed to load data from the peripherial directly to  the volatile memory. This is so that the peripherial data does not have to travel  to the CPU before being moved to Volatile memeory.  </p> <p> </p> <p>tertiary storage: A type of storage that is slower and cheaper than main memory or secondary storage; frequently magnetic tape or optical disk.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#15-computing-environments","title":"1.5 Computing Environments","text":"<p>application-specific integrated circuits (ASICs) that perform their tasks without an operating system.</p> <p>Embedded systems almost always run real-time operating systems.  </p> <p>A real-time system has well-defined, fixed time constraints. Processing must be done within the defined constraints, or the system will fail. For instance, it would not do for a robot arm to be instructed to halt after it had smashed into the car it was building.  </p> <p>portals: Gateways between requestors and services running on provider computers.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#16-free-and-open-source-operating-systems","title":"1.6 Free and open-source operating systems","text":"<p>free operating system: An operating system released under a license that makes its source code available and allows no-cost use, redistribution, and modification.  </p> <p>open-source operating system: An operating system or other program available in source-code format rather than as compiled binary code.  </p> <p>Solaris: A UNIX derivative that is the main operating system of Sun Microsystems (now owned by Oracle Corporation). There is an active open source version called Illumos.</p> <p>SunOS: The predecessor of Solaris by Sun Microsystems Inc.  </p> <p>GNU General Public License (GPL): A license agreement that codifies copylefting (allowing and requiring open sourcing of the associated programs); a common license under which free software is released.</p> <p>GNU/Linux (aka Linux): An open-source operating system composed of components contributed by the GNU foundation and Linus Torvalds, as well as many others.  </p> <p>Apple's macOS operating system comprises a hybrid approach. It contains an open-source kernel named Darwin but includes proprietary, closed-source components as well.  </p> <p>Richard Stallman in 1984 started developing a free, UNIX-compatible operating system called GNU (which is a recursive acronym for \"GNU's Not Unix!\"). To Stallman, \"free\" refers to freedom of use, not price. The free-software movement does not object to trading a copy for an amount of money but holds that users are entitled to four certain freedoms: - Free to run the program - To study and change the source code, and give or sell copies of either - With charges - Or without charges  </p> <p>In 1985, Stallman published the GNU Manifesto, which argues that all software should be free. He also formed the Free Software Foundation (FSF) with the goal of encouraging the use and development of free software.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#17-benefits-and-features","title":"1.7 Benefits and features","text":"<p>How to sharing resources/data on VMs: - First, it is possible to share a file-system volume and thus to share files.  - Second, it is possible to define a network of virtual machines, each of which can send information over the virtual communications network.  </p> <p>VMMs go one step further and allow copies and snapshots to be made of the guest. The copy can be used to create a new VM or to move a VM from one machine to another with its current state intact.   </p> <p>system-development time: The time during which an operating system is developed, before it is made available in final \"release\" form.  </p> <p>templating: In virtualization, using one standard virtual-machine image as a source for multiple virtual machines.  </p> <p>live migration: In virtualization, the movement of a running guest between two separate physical hosts.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#18-linux-history","title":"1.8 Linux History","text":"<p>Development kernel: - Kernels with an odd minor-version number, like 1.1 or 2.5  - development kernels may include newer and relatively untested functionality  </p> <p>Production Kernels:  - even-numbered minor-version numbers are stable - Updates for the stable kernels are intended only as remedial versions  </p> <p>Linux 2.0 was given a major version-number because: - supports multiple architectures - symmetric multiprocessing (SMP) support - memory-management code was substantially improved to provide a unified cache for file-system data independent of the caching of block devices     - incresed file-system and virtual-memory performance  </p> <p>Red Hat: commercial Linux support  </p> <p>Debian: free-software Linux community  </p> <p>Public domain implies that the authors have waived copyright rights in the software, but copyright rights in Linux code are still held by the code's various authors. - Linux is not public-domain - public domain: The total absence of copyright protection. Software in the public domain can be used as desired by anyone, with no limits.  </p> <p>Linux is free software, however, in the sense that people can copy it, modify it, use it in any manner they want, and give away (or sell) their own copies.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#operating-system-structures-ch-2-silbersachatz","title":"Operating-System Structures (Ch 2 Silbersachatz)","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#22-operating-system-services","title":"2.2 Operating-system services","text":"<p>Other operating-system functions that exist for ensuring efficient operation of the system: - Resource Allocation - Logging - Protection and Security  </p> <p>message passing: In interprocess communication, a method of sharing data in which messages are sent and received by processes. Packets of information in predefined formats are moved between processes or between computers.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#23-user-and-operating-system-interface","title":"2.3 User and operating-system interface","text":"<p>Unix GUIs: K Desktop Environment (KDE) and GNOME  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#24-system-calls","title":"2.4 System calls","text":"<p>System calls provide an interface to the services made available by an operating system. These calls are generally available as functions written in C and C++  </p> <p>The API specifies a set of functions that are available to an application programmer - Windows API for Windows systems - POSIX API for UNIX, Linux, macOS     - Written in C, in the library called libc - Java API for programs that run on the Java VM  </p> <p>Why would an application programmer prefer programming according to an API rather than invoking actual system calls? - Program portability - Less complicated than a system call  </p> <p>run-time environment (RTE): The full suite of software needed to execute applications written in a given programming language, including its compilers, libraries, and loaders. The RTE provides system-call interface that serves as the link to system calls made available by the operating system.  </p> <p> </p> <p>Each system call has a number, and that number is used as an index in the system call table, to invoke the appropriate routine.  </p> <p>Three general methods are used to pass parameters to the operating system: - Pass parameters in registers - Address of the block is passed as a parameter in a register, \"block method\"     - Parameters also can be placed, or pushed, onto a stack by the program and popped off the stack by the operating system.     - Some operating systems prefer the block or stack method because those approaches do not limit the number or length of parameters being passed. - Linux uses a combination of these approaches. If there are five or fewer parameters, registers are used. If there are more than five parameters, the block method is used.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#system-call-6-categories","title":"System call 6 categories:","text":"<ul> <li>Process control<ul> <li>create process, terminate process</li> <li>load, execute</li> <li>get process attributes, set process attributes</li> <li>wait event, signal event</li> <li>allocate and free memory</li> </ul> </li> <li>File management<ul> <li>create file, delete file</li> <li>open, close</li> <li>read, write, reposition</li> <li>get file attributes, set file attributes</li> </ul> </li> <li>Device management<ul> <li>request device, release device</li> <li>read, write, reposition</li> <li>get device attributes, set device attributes</li> <li>logically attach or detach devices</li> </ul> </li> <li>Information maintenance<ul> <li>get time or date, set time or date</li> <li>get system data, set system data</li> <li>get process, file, or device attributes</li> <li>set process, file, or device attributes</li> </ul> </li> <li>Communications<ul> <li>create, delete communication connection</li> <li>send, receive messages</li> <li>transfer status information</li> <li>attach or detach remote devices</li> </ul> </li> <li>Protection<ul> <li>get file permissions</li> <li>set file permissions</li> </ul> </li> </ul>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#process-control","title":"Process Control","text":"<p>The dump is written to a special log file on disk and may be examined by a debugger\u2014a system program designed to aid the programmer in finding and correcting errors, or bugs  </p> <p> </p> <p>To write a program for the Arduino, we first write the program on a PC and then upload the compiled program (known as a sketch) from the PC to the Arduino's flash memory via a USB connection. </p> <p>The standard Arduino platform does not provide an operating system; instead, a small piece of software known as a boot loader loads the sketch into a specific region in the Arduino's memory  </p> <p>An Arduino is considered a single-tasking system, as only one sketch can be present in memory at a time  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#informatin-maintenance","title":"Informatin Maintenance","text":"<p>Many systems provide system calls to dump() memory. This provision is useful for debugging.  </p> <p>Even microprocessors provide a CPU mode, known as single step, in which a trap is executed by the CPU after every instruction. The trap is usually caught by a debugger.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#communication","title":"Communication","text":"<p>Two common models of interprocess communication: - Message-passing model: the communicating processes exchange messages with one another to transfer information.     - directly or indirectly through a common mailbox     - Most processes that will be receiving connections are special-purpose daemons - Shared-memory model: An interprocess communication method in which multiple processes share memory and use that memory for message passing.  </p> <p>daemon: A service that is provided outside of the kernel by system programs that are loaded into memory at boot time and run continuously.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#25-system-services","title":"2.5 System services","text":"<p>System services, also known as system utilities, provide a convenient environment for program development and execution. - File management - Status Information     - Some programs simply ask the system for the date, time, amount of available memory or disk space, number of users, or similar status information.     - Some systems also support a registry, which is used to store and retrieve configuration information. - File modification - Programming-language support: compilers, assemblers, debuggers, etc..  - Program loading and execution - Communications - Background Services:      - Constantly running system-program processes are known as services, subsystems, or daemons.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#26-resource-management","title":"2.6 Resource Management","text":"<p>An operating system is a resource manager.  </p> <p>program counter: A CPU register indicating the main memory location of the next instruction to load and execute.  </p> <p>A single-threaded process has one program counter specifying the next instruction to execute. A multithreaded process has multiple program counters, each pointing to the next instruction to execute for a given thread.  </p> <p>caching: The use of temporary data storage areas to improve performance.  </p> <p>cache coherency: The coordination of the contents of caches such that an update to a value stored in one cache is immediately reflected in all other caches that hold that value.  </p> <p>I/O subsystem: The I/O devices and the part of the kernel that manages I/O.  </p> <p>A program in execution is a process. - Operating system processes     - Creating and deleting both user and system processes     - Scheduling processes and threads on the CPUs     - Suspending and resuming processes     - Providing mechanisms for process synchronization     - Providing mechanisms for process communication   - User processes    </p> <p>A process is the unit of work in a system. </p> <p>A program is a passive entity, like the contents of a file stored on disk, whereas a process is an active entity.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#memory-management","title":"Memory Management","text":"<p>The CPU reads instructions from main memory during the instruction-fetch cycle.   The CPU reads and writes data from main memory during the data-fetch cycle.  </p> <p>The operating system is responsible for the following activities in connection with memory management: - Keeping track of which parts of memory are currently being used and which process is using them - Allocating and deallocating memory space as needed - Deciding which processes (or parts of processes) and data to move into and out of memory  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#file-system-management","title":"File System Management","text":"<p>The operating system is responsible for the following activities in connection with file management: - Creating and deleting files - Creating and deleting directories to organize files - Supporting primitives for manipulating files and directories - Mapping files onto mass storage - Backing up files on stable (nonvolatile) storage media  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#mass-storage-management","title":"Mass-storage management","text":"<p>The operating system is responsible for the following activities in connection with secondary storage management: - Mounting and unmounting - Free-space management - Storage allocation - Disk scheduling - Partitioning - Protection  </p> <p>Some operating systems take on this task, while others leave tertiary-storage management to application programs.  </p> <p>Data transfer from cache to CPU and registers is usually a hardware function, with no operating-system intervention. In contrast, transfer of data from disk to memory is usually controlled by the operating system.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#cache-management","title":"Cache management","text":"<p>Loading a variable: magnetic disk =&gt; main memory =&gt; cache =&gt; hardware register  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#io-system-management","title":"I/O system management","text":"<p>The I/O subsystem hides the peculiarities of the I/O devices from the OS. Only the device driver knows the peculiarities of the specific device to which it is assigned.  </p> <p>The I/O subsystem consists of several components: - A memory-management component that includes buffering, caching, and spooling - A general device-driver interface - Drivers for specific hardware devices</p> <p>Two important design issues for cache memory:  - Size - replacement policy  </p> <p>The size of cache memory is small and because of this limitation, the replacement policy for managing data is crucial to gaining the most benefit from cache memory.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#3-processes-threads-and-resources","title":"3 Processes, Threads, and Resources","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#31-the-process-concept","title":"3.1 The process concept","text":"<p>The OS is a collection of processes  </p> <p>The OS keeps track of each process using a process control block (PCB): A data structure that holds information for a process, including the current instruction address, the execution stack, the set of resources used by the process, and the program being executed. The PCB is the concrete representation of a process.  </p> <p>Two processes can be executing the same program.  </p> <p> </p> <p>A process has the states of ready, running, and blocked.  </p> <p>The transition (running -&gt; blocked) of a process p is caused by the process itself.  </p> <p>The transition (ready -&gt; running) of a process p is caused by the OS.  </p> <p>The transition (running -&gt; ready) of a process p is caused by the OS.  </p> <p>The transition (blocked -&gt; ready) of a process p is caused by some other process.  </p> <p>Additional States: - A newly created process is placed into the new state before the process is allowed to compete for the CPU. Ex: The OS may want to regulate the number of processes competing for the CPU. - A process is placed into the terminated state when execution can no longer continue but before the PCB is deleted. Ex: The OS may want to examine the final state of a process that committed a fatal error. - A process may be placed into the suspended state even though the CPU and all resources are available. Ex: The OS may want to stop a process to allow debugging or to regulate performance.  </p> <p> </p> <p>The transition of a process p from running to terminated can be caused by p itself.  </p> <p>From the suspended state, the process can only be restored to the ready or blocked states.  </p> <p>The CPU is always running one process at a time. Multiple processes can share a single CPU by taking turns. A context switch is the transfer of control from one process to another. The information that needs to be saved during the context switch is called CPU state.  The CPU state is stored in the PCB during an interrupt. A context switch is either caused by the OS or the process, nothing else.  </p> <p>Running -&gt; Ready: OS Scheduler  </p> <p>Blocked -&gt; Ready: Resource Release  </p> <p>Suspend -&gt; Ready: Reactive    </p> <p>Suspend -&gt; Blocked: Reactive  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#32-why-processes","title":"3.2 Why processes","text":"<p>Multiple processes may run on one physical CPU using a technique known as time sharing. Each process is given a virtual CPU: A CPU that the process assumes is available only to itself.</p> <p>A virtual CPU can be just an abstraction of the physical CPU or it can be software that emulates the behavior of a different CPU.  </p> <p>Benefits of virtual CPUs: - Multi-user support: Multiple users, each represented by one or more separate processes, can share the same machine without being aware of each other. - Multi-CPU transparency: An application written to utilize multiple CPUs will run correctly, although perhaps more slowly, if only one CPU is available. - Portability: An application compiled for one type of CPU can run on a different CPU without being modified or even recompiled.    </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#33-the-process-control-block","title":"3.3 The process control block","text":"<p>The PCB is the instantiation of a process. Upon creation, the OS assigns every process a unique identifier. This identifier, p, could be a pointer to the PCB structure or an index into an array of PCBs.  </p> <p> </p> <p> </p> <ul> <li>The process_state encodes the possible states, such as ready, running, or blocked, using most likely integers or characters.  </li> <li>The memory field contains one or more pointers (memory address) and the parent field designates the parent process using a pointer or array index.  </li> <li>The open_files field is a pointer to a linked list of open files where each list element points to one open file.  </li> <li>The remaining two fields are also pointers to linked lists. One is the list of other resources held by the process and the other is a list of child processes.    </li> </ul> <p>Two ways exist to organize all PCBs: - An array of structures. The PCBs are marked as free or allocated, which eliminates the need for any dynamic memory management. The main drawback is a lot of wasted memory space to maintain a sufficient number of PCB slots. - An array of pointers to dynamically allocated PCBs. The pointer array wastes little space and can be made much larger than the array of structures. The drawback is the overhead of dynamic memory management to allocate each new PCB and to free the memory when the process terminates.  </p> <p>Avoiding Linked Lists: Linux OS avoids linked lists by only having a pointer from the  parent to the first child. Then all other children have pointers to the younger and older  children.  </p> <p>The list-free implementation has the fields parent, child, older sibling, and younger sibling. The main reason for the list-free implementation was to improve time-efficiency Adding a new child process with the list-free implementation uses the same amount of memory as the linked-list implementation.  </p> <p> </p> <p>The OS maintains all PCBs organized on various lists: - Waiting list is associated with every resource and contains all processes blocked on that resource because the resource is not available. - Ready list (RL): A list containing all processes that are in the ready state     - maintains all processes sorted by their importance usning an integer called the priority </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#34-operations-on-processes","title":"3.4 Operations on processes","text":"<p>A process creation hierarchy is a graphical representation of the dynamically changing parent-child relationships among all processes. The process creation hierarchy changes each time a process is created or destroyed.  </p> <p>What would be the most likely outcome if a process called destroy(self)? The process woule crash. The destroy function is executing as part of the current process. Releasing all memory, resources, PCB, and closing all files would prevent the process from completing the entire destroy function.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#35-resources","title":"3.5 Resources","text":"<p>Resource control block (RCB) is a data structure that represents a resource. - resource_description - state - waiting_list  </p> <p>A resource is allocated to a process if the process has access to and is able to utilize the resource. A resource is free if the resource may be allocated to a requesting process.  </p> <p>Functions: - Request a resource - Release a resource - Scheduler:  determines which process should run next and starts the process.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#36-threads","title":"3.6 Threads","text":"<p>A thread is an instance of executing a portion of a program within a process without incurring the overhead of creating and managing separate PCBs.</p> <p> </p> <ul> <li>A process with multiple threads has a separate program counter (pc) for each thread.</li> <li>The different pc's advance through the code independently from one another as each thread executes a different sequence of instructions within the same code.</li> <li>When multiple CPUs are available, the threads can proceed in parallel.</li> </ul> <p>Since each thread within a process is an independent execution activity, the runtime information held in the PCB and the execution stack must be replicated for each thread. A thread control block (TCB) is a data structure that holds a separate copy of the dynamically changing information necessary for a thread to execute independently. The replication of only the bare minimum of information in each TCB, while sharing the same code, global data, resources, and open files, is what makes threads much more efficient to manage than processes.  </p> <p> </p> <p>User Level vs Kernel level threads  </p> <p> </p> <p>With a multi-threaded process, each TCB maintains a separate copy of the thread state (running, ready, or blocked) but the PCB must also have a copy of the process state (running, ready, or blocked). Only with user-level threads The kernel is aware of only the PCB, not the individual TCBs, and thus can only keep track of the process state as a whole in the PCB. The individual thread states are manipulated by the thread library independently of the process state.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#advantages-of-user-level-threads-ults-over-kernel-level-threads-klts","title":"Advantages of user-level threads (ULTs) over kernel-level threads (KLTs):","text":"<ul> <li>Because ULTs do not require any cooperation from the kernel, ULTs are much faster to manage (create, destroy, and schedule) and thus many more can be created than KLTs.  </li> <li>Applications using ULTs are portable between different OSs without modifications.  </li> </ul>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#main-disadvantages-of-ults-over-klts","title":"Main disadvantages of ULTs over KLTs:","text":"<ul> <li>ULTs are not visible to the kernel. When one ULT blocks, the entire process blocks, which decreases concurrency and thus the performance and responsiveness of the application.</li> <li>ULTs cannot take advantage of multiple CPUs because the process is perceived by the kernel as a single thread of execution.</li> </ul> <p>Combining User Level Threads and Kernel Level Threads:  </p> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#37-interprocess-communication","title":"3.7 Interprocess communication","text":"<p>A process is independent if it does not share data with any other processes executing in the system. A process is cooperating if it can affect or be affected by the other processes executing in the system.  </p> <p>Resons for cooperation: - Information sharing  - Computation speedup - Modularity  </p> <p>Cooperating processes require an interprocess communication (IPC) mechanism that will allow them to exchange data - Shared memory (a)   - Message passing (b)   </p> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#38-ipc-in-shared-memory-systems","title":"3.8 IPC in shared-memory systems","text":"<p>Buffers for a producer-consumer model: - Unbounded buffer: places no practical limit on the size of the buffer   - Bounded buffer:  assumes a fixed buffer size. In this case, the consumer must wait if the buffer is empty, and the producer must wait if the buffer is full.  </p> <p>What is the valid test for determining if the bounded buffer is empty? (in == out)  \"in\" points to the next free position in the buffer and \"out\" points to the first full position in the buffer. Therefore, if the value of \"out\" is equal to \"in\", the buffer is empty.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#39-ipc-in-message-passing-systems","title":"3.9 IPC in message-passing systems","text":"<p>Message passing provides a mechanism to allow processes to communicate and to synchronize their actions without sharing the same address space. It is particularly useful in a distributed environment, where the communicating processes may reside on different computers connected by a network.  </p> <p>Message variable sizes: - Fixed-size: System-level implementation is straightforward, programming is more difficult. - Variable-size: complex system-level implementation, programming is simpler.  </p> <p>Logically implementing a communication link and the send()/receive() operations: - Direct or indirect communication - Synchronous or asynchronous communication - Automatic or explicit buffering  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#naming","title":"Naming","text":"<p>direct communication: each process that wants to communicate must explicitly name the recipient or sender of the communication. - A link is established automatically between every pair of processes that want to communicate. The processes need to know only each other's identity to communicate. - A link is associated with exactly two processes. - Between each pair of processes, there exists exactly one link.  </p> <p>Think of direct communication as hard-coding because the identifiers must be stated.  </p> <p>indirect communication: the messages are sent to and received from mailboxes, or ports. - A link is established between a pair of processes only if both members of the pair have a shared mailbox. - A link may be associated with more than two processes. - Between each pair of communicating processes, a number of different links may exist, with each link corresponding to one mailbox.  </p> <p>The process that creates a new mailbox is that mailbox's owner by default.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#synchronization","title":"Synchronization","text":"<p>Message passing may be either blocking or nonblocking\u2014also known as synchronous and asynchronous. - Blocking send. The sending process is blocked until the message is received by the receiving process or by the mailbox. - Nonblocking send. The sending process sends the message and resumes operation. - Blocking receive. The receiver blocks until a message is available. - Nonblocking receive. The receiver retrieves either a valid message or a null.  </p> <p>Rendezvous: In interprocess communication, when blocking mode is used, the meeting point at which a send is picked up by a receive.  </p> <p>Synchronous: In interprocess communication, a mode of communication in which the sending process is blocked until the message is received by the receiving process or by a mailbox and the receiver blocks until a message is available. In I/O, a request that does not return until the I/O completes.</p> <p>Asynchronous: In I/O, a request that executes while the caller continues execution.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#buffering","title":"Buffering","text":"<p>Whether communication is direct or indirect, messages exchanged by communicating processes reside in a temporary queue. Basically, such queues can be implemented in three ways: - Zero Capacity: Queue has a maximum length of zero; thus the link cannot have a message  waiting in it. The sender must block until the recipient recieves the message. - Bounded capacity: The queue has finite length n; thus, at most n messages can reside in it. If the queue is not full when a new message is sent, the message is placed in the queue (either the message is copied or a pointer to the message is kept), and the sender can continue execution without waiting. The link's capacity is finite, however. If the link is full, the sender must block until space is available in the queue. - Unbounded capacity: The queue's length is potentially infinite; thus, any number of messages can wait in it. The sender never blocks.  </p> <p>A blocking send() and blocking receive() is known as a rendezvous. A rendezvous has occurred between communicating processes when a blocking send() and receive() are being used: after sending the message, the sender is blocked until the receiver receives the message and the receiver is blocked until the message is sent.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#310-examples-of-ipc-systems","title":"3.10 Examples of IPC systems","text":"<p>Four different IPC systems</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#posix-shared-memory","title":"POSIX shared memory","text":"<p>Several IPC mechanisms are available for POSIX systems, including shared memory and message passing. Here, we explore the POSIX API for shared memory.  </p> <p>POSIX shared memory is organized using memory-mapped files, which associate the region of shared memory with a file.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#mach-message-passing","title":"Mach message passing","text":"<p>Message passing  </p> <p>Mach was especially designed for distributed systems, but was shown to be suitable for desktop and mobile systems as well, as evidenced by its inclusion in the MacOS and iOS operating systems  </p> <p>The Mach kernel supports the creation and destruction of multiple tasks, which are similar to processes but have multiple threads of control and fewer associated resources.  </p> <p>Messages are sent to, and received from, mailboxes, which are called ports in Mach.</p> <p>Ports are finite in size and unidirectional;  </p> <p>A simple message contains ordinary, unstructured user data that are not interpreted by the kernel. A complex message may contain pointers to memory locations containing data (known as \"out-of-line\" data) or may also be used for transferring port rights to another task.  </p> <ul> <li>If a port's queue is full:    </li> <li>Wait indefinitely until there is room in the queue.  </li> <li>Wait at most n milliseconds.  </li> <li>Do not wait at all but rather return immediately.  </li> <li>Temporarily cache a message.  </li> </ul>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#windows","title":"Windows","text":"<p>Employs modularity to increase functionality and decrease the time needed to implement new features.  </p> <p>Windows provides support for multiple operating environments, or subsystems.  Application programs communicate with these subsystems via a message-passing mechanism.  </p> <p>The message-passing facility in Windows is called the advanced local procedure call (ALPC) facility. Used for communication between two processes on the same machine.  </p> <p>RPC: Remote Procedure Call  </p> <p>Windows uses a port object to establish and maintain a connection between two processes. Windows uses two types of ports:  - connection ports - communication ports </p> <p>When an ALPC channel is created, one of three message-passing techniques is chosen: - For small messages (up to 256 bytes), the port's message queue is used as intermediate storage, and the messages are copied from one process to the other. - Larger messages must be passed through a section object, which is a region of shared memory associated with the channel. - When the amount of data is too large to fit into a section object, an API is available that allows server processes to read and write directly into the address space of a client.  </p> <p> </p> <p>It is important to note that the ALPC facility in Windows is not part of the Windows API and hence is not visible to the application programmer.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#pipes","title":"Pipes","text":"<p>A pipe acts as a conduit allowing two processes to communicate. Pipes were one of the first IPC mechanisms in early UNIX systems.  </p> <p>Considerations with Pipe: 1. Does the pipe allow bidirectional communication, or is communication unidirectional? 2. If two-way communication is allowed, is it half duplex (data can travel only one way at a time) or full duplex (data can travel in both directions at the same time)? 3. Must a relationship (such as parent-child) exist between the communicating processes? 4. Can the pipes communicate over a network, or must the communicating processes reside on the same machine?  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#ordinary-pipes","title":"Ordinary Pipes","text":"<p>Ordinary pipes allow two processes to communicate in standard producer-consumer fashion: the producer writes to one end of the pipe (the write end) and the consumer reads from the other end (the read end). - Unidirectional, only allowing one-way communication. - If two way communication is required, a second pipe is established - Can only be used on the same machine   - once the processes have finished communicating and have terminated, the ordinary pipe ceases to exist.  </p> <p>Ordinary pipes on Windows systems are termed anonymous pipes  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#named-pipes","title":"Named Pipes","text":"<p>Communication can be bidirectional, and no parent-child relationship is required.  Once a named pipe is established, several processes can use it for communication. Exists until explicitly deleted. FIFO. UNIX named pipes are half-duplex. Windows named pipes are full-duplex. Windows communication can reside on different machines.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#311-mulitcore-programming","title":"3.11 Mulitcore programming","text":"<p>multicore: Multiple processing cores within the same CPU chip or within a single system.</p> <p>data parallelism: A computing method that distributes subsets of the same data across multiple cores and performs the same operation on each core.</p> <p>task parallelism: A computing method that distributes tasks (threads) across multiple computing cores, with each task is performing a unique operation.</p> <p> </p> <p>Concurrency means all threads make progress on a single-core system as each thread gets to run for a short period of time on the single processing core.  </p> <p> </p> <p>Parallelism allows two threads to run at the same time as each thread runs on a separate processing core\u200b.  </p> <p>It is possible to have concurrency without parallelism.  </p> <p>Five areas present challenges in programming for multicore systems: - Identifying tasks - Balance - Data splitting - Data dependency - Testing and debugging  </p> <p>Amdahl's Law is a formula that identifies potential performance gains from adding additional computing cores to an application that has both serial (nonparallel) and parallel components.  </p> <p>S is the portion of the application that must be performed serially on a system. N is the number of processing cores.  </p> <p> </p> <p>According to Amdahl's Law, what is the maximum speedup gain on a system with 4 processing cores for an application that is 20% serial? 2.50 On a system with four processing cores, there is a speedup of up to 250% going from 1 to 4 processing cores. (S=0.2, N=4)  </p> <p>One interesting fact about Amdahl's Law is that as N approaches infinity, the speedup converges to 1/S.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#types-of-parallelism","title":"Types of Parallelism","text":"<p>Data parallelism focuses on distributing subsets of the same data across multiple computing cores and performing the same operation on each core.  </p> <p>Task parallelism involves distributing not data but tasks (threads) across multiple computing cores.   </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#312-multithreading-models","title":"3.12 Multithreading models","text":"<p>Relationship models between user threads and kernel threads:</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#many-to-one","title":"Many-to-one:","text":"<ul> <li>Thread management is done by the thread library in user space  </li> <li>The entire process will block if a thread makes a blocking system call  </li> <li>Multiple threads are unable to run in parallel on multicore systems  </li> </ul> <p>Green threads\u2014a thread library available for Solaris systems and adopted in early versions of Java\u2014used the many-to-one model.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#one-to-one","title":"One-to-one:","text":"<p>Maps each user thread to a kernel thread  </p> <p>The only drawback to this model is that creating a user thread requires creating the corresponding kernel thread, and a large number of kernel threads may burden the performance of a system.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#many-to-many","title":"Many-to-many","text":"<p>Multiplexes many user-level threads to a smaller or equal number of kernel threads.  </p> <p> </p> <p>Developers can create as many user threads as necessary, and the corresponding kernel threads can run in parallel on a multiprocessor.  </p> <p>When a thread performs a blocking system call, the kernel can schedule another thread for execution.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#two-level-model","title":"Two-level model","text":"<p>Two-level model is a variation of the many-to-many model still multiplexes many user-level  threads to a smaller or equal number of kernel threads but also allows a user-level thread  to be bound to a kernel thread.  </p> <p>Difficult to implement  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#313-threading-issues","title":"3.13 Threading issues","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#the-fork-and-exec-system-calls","title":"The fork() and exec() system calls","text":"<p>If one thread in a program calls fork(), does the new process duplicate all threads, or is the new process single-threaded?  </p> <p>fork() system call is used to create a separate, duplicate process.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#signal-handling","title":"Signal handling","text":"<p>A signal is used in UNIX systems to notify a process that a particular event has occurred.  </p> <p>Examples of synchronous signals include illegal memory access and division by 0.   </p> <p>When a signal is generated by an event external to a running process, that process receives the signal asynchronously. Examples of such signals include terminating a process with specific keystrokes (such as ) and having a timer expire.    <p>Every signal has a default signal handler that the kernel runs when handling that signal.  </p> <p>This default action can be overridden by a user-defined signal handler   </p> <p>Where to deliver the signal in a multithreaded program? - Deliver the signal to the thread to which the signal applies. - Deliver the signal to every thread in the process. - Deliver the signal to certain threads in the process. - Assign a specific thread to receive all signals for the process.  </p> <p>Although Windows does not explicitly provide support for signals, it allows us to emulate them using asynchronous procedure calls (APCs). The APC facility enables a user thread to specify a function that is to be called when the user thread receives notification of a particular event.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#thread-cancellation","title":"Thread Cancellation","text":"<p>Thread cancellation involves terminating a thread before it has completed. A thread that is to be canceled is often referred to as the target thread.  </p> <ul> <li>Asynchronous cancellation: One thread immediately terminates the target thread.  </li> <li>Deferred cancellation: The target thread periodically checks whether it should terminate, allowing it an opportunity to terminate itself in an orderly fashion.  </li> </ul> <p>The default cancellation type is deferred cancellation. However, cancellation occurs only when a thread reaches a cancellation point.  </p> <p>Cleanup Handler: This function allows any resources a thread may have acquired to be released before the thread is terminated.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#thread-local-storage","title":"Thread-local storage","text":"<p>Thread-local storage: (TLS) a thread has its own copy of certain data.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#scheduler-activations","title":"Scheduler activations","text":"<p>communication between the kernel and the thread library  </p> <p>lightweight process (LWP): A virtual processor-like data structure allowing a user thread to map to a kernel thread.  </p> <p>scheduler activation: A threading method in which the kernel provides an application with a set of LWPs, and the application can schedule user threads onto an available virtual processor and receive upcalls from the kernel to be informed of certain events.</p> <p>upcall: A threading method in which the kernel sends a signal to a process thread to communicate an event.  </p> <p>Cancellation points are associated with defeered cancellation. Deferred cancellation allows a target thread to use a cancellation point to determine if the thread should cancel itself.  </p> <p>Thread-local storage is data that is unique to each thread Thread-local storage allows a thread to have data that is not accessible to other threads belonging to the same process.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#4-scheduling","title":"4 Scheduling","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#41-principles-of-scheduling","title":"4.1 Principles of scheduling","text":"<p>Long-term scheduling decides when a process should enter the ready state and start competing for the CPU. - New process - Suspended list  </p> <p>Short-term scheduling decides which of the ready processes should run next on the CPU. - Wait list - CPU  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#preemptive-and-non-preemptive-scheduling","title":"Preemptive and non-preemptive scheduling","text":"<p>A non-preemptive scheduling algorithm allows a running process to continue until the process terminates or blocks on a resource.  </p> <p>A preemptive scheduling algorithm may stop the currently running process and choose another process to run. The decision is made whenever: - A new process enters the ready list. - A previously blocked or suspended process re-enters the RL. - The OS periodically interrupts the currently running process to give other processes a chance to run.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#priority-for-short-term-scheduling","title":"Priority for short-term scheduling","text":"<p>The arbitration rule decides which process should proceed if two or more processes have the same priority.  </p> <p>Common parameters used to compute short-term priority </p> Parameter Explanation Arrival The point in time when the process enters the RL. Departure The point in time when the process leaves the RL by entering the blocked or suspended state, or by terminating all work. Attained CPU time The amount of CPU time used by the process since arrival. Real time in system The amount of actual time the process has spent in the system since arrival. Total CPU time The amount of CPU time the process will consume between arrival and departure. For short-term scheduling, total CPU time is sometimes called the CPU burst. External priority A numeric priority value assigned to the process explicitly at the time of creation. Deadline A point in time by which the work of the process must be completed. Period A time interval during which a periodically repeating computation must be completed. The end of each period is the implicit deadline for the current computation. Other considerations The resource requirements of a process, such as the amount of memory used, or the current load on the system. <p>For a process in the ready state, the real time in the system keeps increasing.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#priority-for-long-term-scheduling","title":"Priority for long-term scheduling","text":"<p>Long-term scheduling occurs much less frequently than short-term scheduling and thus the decisions are made at a higher granularity of time. - Arrival is the time of process creation. - Departure is the time of process destruction.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#42-shceduling-of-batch-processes","title":"4.2 Shceduling of batch processes","text":"<p>A batch process performs a long-running and generally repetitive task that does not require any intervention from the user. Ex: Payroll, insurance claims processing, weather prediction, scientific calculations.  </p> <p>FIFO or FCFS (First-come-first-serve)    </p> <p>Shortest Job First (SJF) algorithm or SJN (Shortest job next), shcedules processes according to the  total CPU time requirements. The shorter the CPU time, the higher the priority. non-preemptive.  </p> <p>Shortest Remaining Time (SRT) algorithm: shcedules processes according to the  remaining CPU time needed to complete work. preemptive, the scheduler will  interrupt a running process.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#estimate-cpu-time","title":"Estimate CPU time:","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#performance-of-the-algorithm","title":"Performance of the algorithm","text":"<p>The main objective in scheduling batch processes is to maximize the number of processes completed per unit of time. The order in which processes are executed cannot reduce the total CPU times of the individual processes but can reduce the waiting times.  </p> <p>The turnaround time of a process is the time between arrival and departure, and is the sum of the total CPU time and the waiting time  </p> <p>The average turnaround time (ATT) for a set of n processes is the mean of the n individual turnaround times.  </p> <p>Starvation is the indefinite postponement of a process while other processes are allowed to proceed.   </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#average-turnaround-time","title":"Average Turnaround Time:","text":"<ul> <li>SJF: The arrival of new processes of length less than 3 (the length of p2) prior to time 8 could lead to an indefinite postponement (starvation) of p2.  </li> <li>SRT: The arrival of new processes of length less than 5 (the remainder of p1) prior to time 6 could lead to an indefinite postponement (starvation) of p1.  </li> </ul>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#43-scheduling-of-interactive-processes","title":"4.3 Scheduling of interactive processes","text":"<p>An interactive process communicates with the user in the form of a dialog by receiving commands or data from the keyboard or a pointing device and responding by generating output on the user's terminal or another output device. - time-share the CPU using preemptive scheduling  </p> <p>A time quantum, Q, is a small amount of time (typically 10 to 100 milliseconds) during which a process is allowed to use the CPU.  </p> <p>The round-robin (RR) algorithm uses a single queue of processes. The priority is determined solely by a process's position within the queue. The process at the head of the queue has the highest priority and is allowed to run for Q time units. Breaks the processes up into equal time quantums and takes turns executing the time quantums. Treats all processes as equals.  </p> <p>Multilevel (ML) scheduling maintains a separate queue of processes at each priority level. Within each level, processes are scheduled using RR. preemptive, it will interrupt a lower priority process if a new higher priority process arrives. Lower level queues can only run once the higher level queues have finished.  </p> <p>Multilevel feedback scheduling is similar to ML but addresses the problems of starvation and fairness by: - using a different time quantum at each priority level - changing the priority of every process dynamically  </p> <p>Under the multilevel feedback (MLF) algorithm a newly arriving process enters the highest-priority queue, N, and is allowed to run for Q time units. When Q is exceeded, the process is moved to the next lower priority queue, N-1, and is allowed to run for 2Q time units. At the lowest priority level the time is unlimited and so p eventually terminates at this level.  </p> <p>The response time of a process is the elapsed time from the submission of a request (pressing the Enter key or clicking a mouse button) until the response begins to arrive. Guaranteeing adequate response time is the primary goal in the scheduling of interactive processes.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#44-scheduling-of-real-time-processes","title":"4.4 Scheduling of real-time processes","text":"<p>A real-time process is characterized by continual input, which must be processed fast enough to generate nearly instantaneous output.  </p> <p>A period is a time interval (typically in milliseconds or even microseconds) within which each input item must be processed  </p> <p>The rate monotonic (RM) algorithm schedules processes according to the period. The shorter the period, the higher the priority. RM is preemptive.  </p> <p>The earliest deadline first (EDF) algorithm schedules processes according to the shortest remaining time until the deadline. The shorter the remaining time, the higher the priority. EDR is preemptive.  </p> <p>A schedule is feasible if the deadlines of all processes can be met.</p> <p>The CPU utilization (U) is the sum of the individual fractions of CPU times used by each process.  </p> <p> </p> <p>If U = 1 then the CPU is utilized 100%. A feasible schedule exists as long as U \u2264 1.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#45-combined-approaches","title":"4.5 Combined approaches","text":"<p>2-tier approach: Real-time processes run at the highest priority level but due to their short running times can use FIFO. Interactive and batch processes can be scheduled together using MLF.  </p> <p>2-tier approach with floating priorities: Real time processes use either FIFO or RR in an ML scheme. Interactive and batch processes use a variation of MLF.  Modern general-purpose OSs (Windows and LInuz) use more sophistocated scheduling.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#46-scheduling-criteria","title":"4.6 Scheduling criteria","text":"<p>Criteria for comparing CPU-shceduling algorithms: - CPU utilization: We want to keep the CPU as busy as possible. - Throughput: measure of work is the number of processes that are completed per time unit - Turnaround time: the time of submission of a process to the time of completion. - Waiting time - Response time </p> <p>It is desirable to maximize CPU utilization and throughput and to minimize turnaround time, waiting time, and response time.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#47-multi-processor-scheduling","title":"4.7 Multi-processor scheduling","text":"<p>If multiple CPUs are available, load sharing, where multiple threads may run in parallel, becomes possible, however scheduling issues become correspondingly more complex.  </p> <p>Multiprocessor: - Multiple CPUs - Multithreaded cores - NUMA systems    -Non-uniform memory access, or NUMA, is a method of configuring a cluster of microprocessors in a multiprocessing system so they can share memory locally. - Heterogeneous multiprocessing   </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#approaches-to-multiprocessor-scheduling","title":"Approaches to multiprocessor scheduling","text":"<p>One way is to have a master server, which is one processor that handles all the  scheduling. This is a form of asymmetric multiprocessing. Bottle necking is an issue.  </p> <p>symmetric multiprocessing (SMP) is the standard. Each processor is self-scheduling. Two options for ready queues: - All threads may be in a common ready queue.     - race condition     - Locks on resources     - Bottlenecks - Each processor may have its own private queue of threads.     - Most popular  </p> <p>Traditionally, SMP systems have allowed several processes to run in parallel by providing multiple physical processors.  However, most contemporary computer hardware now places multiple computing cores  on the same physical chip, resulting in a multicore processor. Each core maintains its architectural state and thus appears to the operating system to be a separate logical CPU.  </p> <p>Memory stall: when a processor accesses memory, it spends a significant amount of time waiting for the data to become available.  This is because processors operate at a faster rate than memory. Can also occur due to  cache misses.  </p> <p>Applying two or more hardware threads to each core can reduce memory stall.  While one thread is stalled, the cpu can switch to the other thread. Dual-thread  processing cores.  </p> <p>chip multithreading (CMT): A CPU with multiple cores, where each core supports multiple hardware threads supports chip multithreading.  </p> <p>So a computer with 4 computing cores, each containing two hardware threads, appears  to the OS as 8 logical CPUs.  </p> <p> </p> <p>Intel processors use the term hyper-threading (also known as simultaneous multithreading or SMT) to describe assigning multiple hardware threads to a single processing core.  </p> <p>Two ways to multithread a processing core: - Coarse-grained: coarse-grained multithreading, a thread executes on a core until a long-latency event such as a memory stall occurs.  To work around the latency, the core switches to another thread. the cost of switching between threads is high, since the instruction pipeline must be flushed before the other thread can begin execution on the processor core. - Fine-grained or interleaved:  switches between threads at a much finer level of granularity\u2014typically at the boundary of an instruction cycle. However, the architectural design of fine-grained systems includes logic for thread switching. As a result, the cost of switching between threads is small.  </p> <p>A multithreaded, multicore processor actually requires two different levels of scheduling (software threads and hardware threads)  </p> <p>Load balancing is typically necessary only on systems where each processor has its own private ready queue of eligible threads to execute.  </p> <p>Two general approaches to load balancing: - push migration: a task moves loads from busy processors to idle processors. - pull migration: idle processor pulls a waiting task from a busy processor.  </p> <p>cache memory (known as a \"warm cache\")  </p> <p>Processor affinity: that is, a process has an affinity for the processor on which it is currently running. Because of the high cost of invalidating and repopulating caches, most operating systems with SMP support try to avoid migrating a thread from one processor to another and instead attempt to keep a thread running on the same processor and take advantage of a warm cache.  </p> <p>Soft affinity: When an operating system has a policy of attempting to keep a process running on the same processor\u2014but not guaranteeing that it will do so.</p> <p>Hard affinity: When an operating system supports or allows a process's threads to run on the same processor at all times (as opposed to being moved to various processors as the thread is scheduled onto CPU).  </p> <p> </p> <p>heterogeneous multiprocessing (HMP): A feature of some mobile computing CPUs in which cores vary in their clock speed and power management.  </p> <p>big.LITTLE: ARM processor implementation of HMP in which high performance big cores are combined with energy efficient LITTLE cores.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#48-real-time-cpu-scheduling","title":"4.8 Real-time CPU scheduling","text":"<p>soft real-time systems: Soft real-time systems provide no guarantee as to when a critical real-time thread will be scheduled - they guarantee only that the thread will be given preference over noncritical threads hard real-time systems: Hard real-time systems have strict scheduling facilities - a thread must be serviced by its deadline and service after the deadline has expired is the same as no service at all.  </p> <p>event latency as the amount of time that elapses from when an event occurs to when it is serviced  </p> <p>Two types of latencies affect the performance of real-time systems: 1. Interrupt latency: the period of time from the arrival of an interrupt at the CPU to the start of the routine that services the interrupt. 2. Dispatch latency: The amount of time the dispatcher takes to stop one thread and put another thread onto CPU.  </p> <p>The conflict phase of dispatch latency has two components: - Preemption of any process running in the kernel - Release by low-priority processes of resources needed by a high-priority process</p> <p>periodic: A type of real-time process that repeatedly moves between two modes at fixed intervals- needing CPU time and not needing CPU time.</p> <p>rate: A periodic real-time process has a scheduling rate of 1 / p (where p is the length of its running period).</p> <p>admission-control: In real-time scheduling, the scheduler may not allow a process to start if its scheduling request as impossible - if it cannot guarantee that the task will be serviced by its deadline.</p> <p>rate-monotonic: The rate-monotonic scheduling algorithm schedules periodic tasks using a static priority policy with preemption.</p> <p>Earliest-Deadline-First (EDF): A real-time scheduling algorithm in which the scheduler dynamically assigns priorities according to completion deadlines. - Unlike the rate-monotonic algorithm, EDF scheduling does not require that processes be periodic, nor must a process require a constant amount of CPU time per burst.  </p> <p>proportional share: Proportional share schedulers operate by allocating T shares among all applications assuring each gets a specific portion of CPU time.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#49-algorithm-evaluation","title":"4.9 Algorithm evaluation","text":"<p>analytic evaluation: A means of comparing scheduling algorithm effectiveness by analyzing an algorithm against a workload and assigning it a score.</p> <p>deterministic modeling: One type of analytic evaluation - takes a particular predetermined workload and defines the performance of each algorithm for that workload.</p> <p>queueing-network analysis: An area of computing study in which algorithms are analyzed for various aspects and effectiveness.</p> <p>On many systems, the processes that are run vary from day to day, so there is no static set of processes (or times) to use for deterministic modeling.  </p> <p>Little's formula: A scheduling equation (n = \u03bb \u00d7 W) that is particularly useful because it is valid for any scheduling algorithm and arrival distribution.</p> <p>trace files: A scheduling algorithm evaluation method in which thread details are captured on real systems and various scheduling algorithms analyzed to determine effectiveness.</p> <p>Regression testing confirms that the changes haven't made anything worse, and haven't caused new bugs or caused old bugs to be recreated   </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#5-concurrency","title":"5 Concurrency","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#51-process-interactions","title":"5.1 Process interactions","text":"<p>Concurrency is the act of multiple processes (or threads) executing at the same time. When multiple physical CPUs are available, the processes may execute in parallel. On a single CPU, concurrency may be achieved by time-sharing.  </p> <p>A critical section is a segment of code that cannot be entered by a process while another process is executing a corresponding segment of the code.  This protects shared data that is accessed at the same time. A critical section and must not be interleaved because it will return incorrect results.  </p> <p>Any solution to the critical section (CS) problem must satisfy the following requirements: - Guarantee mutual exclusion: Only one process may be executing within the CS. - Prevent lockout: A process not attempting to enter the CS must not prevent other processes from entering the CS. - Prevent starvation: A process (or a group of processes) must not be able to repeatedly enter the CS while other processes are waiting to enter. - Prevent deadlock: Multiple processes trying to enter the CS at the same time must not block each other indefinitely.  </p> <p> </p> <p> </p> <p>The buffer is a data structure vs a critical section is a segment of code  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#52-mutex-locks","title":"5.2 Mutex locks","text":"<p>mutex lock: A mutual exclusion lock; the simplest software tool for assuring mutual exclusion. - The mutex lock protects critical sections and thus prevents race conditions.  </p> <p>contended: A term describing the condition of a lock when a thread blocks while trying to acquire it. - High contention: many threads trying to acquire the lock - Low contention: small number of threads attempting to acquire the lock  </p> <p>uncontended: A term describing a lock that is available when a thread attempts to acquire it.</p> <p>busy waiting: A practice that allows a thread or process to use CPU time continuously while waiting for something. An I/O loop in which an I/O thread continuously reads status information while waiting for I/O to complete.</p> <p>spinlock: A locking mechanism that continuously uses the CPU while waiting for access to the lock. - short duration  </p> <p>The software solution to the CS problem has several major shortcomings: - The solutions works only for 2 processes. When 3 or more processes need to share a CS, a different solution must be developed. - The solution is inefficient. While one process is in the CS, the other process must wait by repeatedly testing and setting the synchronization variables. The waiting process is only wasting CPU and memory resources without accomplishing any useful work. - The solution addresses only competition among processes. To address problems of process cooperation, entirely different solutions must be devised.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#53","title":"5.3","text":"<p>A semaphore is a non-negative integer variable that can be accessed using only two special operations, P and V.</p> <ul> <li>V(s): increment s by 1</li> <li>P(s): if s &gt; 0, decrement s by 1, otherwise wait until s &gt; 0  </li> </ul> <p>The bounded-buffer problem is a classic synchronization problem intended to illustrate process cooperation. A producer process shares a buffer with a consumer process. The buffer has a fixed number of slots.   </p> <p>The bounded buffer problem using semaphores: Semaphores offer a very intuitive and elegant solution to the bounded-buffer problem that satisfies the requirements that producers do not overtake consumers and vice versa.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#54-implementation-of-semaphores","title":"5.4 Implementation of semaphores","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#hardware-support-for-synchronization","title":"Hardware support for synchronization","text":"<p>Most contemporary computer architectures offer hardware support for process synchronization in the form of specialized machine instructions.  </p> <p>The test-and-set instruction (TS) copies a variable into a register and sets the variable to zero in one indivisible machine cycle. Test-and-set has the form TS(R, x) where R is a register and x is a memory location and performs the following operations:  </p> <p>A lock is a synchronization barrier through which only one process can pass at a time. TS allows an easy implementation of a lock.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#55-monitors","title":"5.5 Monitors","text":"<p>P and V operations are low-level primitives that are prone to difficult-to-diagnose programming errors.  </p> <p>A monitor is a high-level synchronization primitive implemented using P and V operations. Following the principles of abstract data types, a monitor encapsulates data along with functions through which the data may be accessed and manipulated.  </p> <p>A condition variable is a named queue on which processes can wait for some condition to become true.  </p> <p>The implementation of a monitor must: - guarantee that the functions are mutually exclusive. Thus only one process at a time may be executing inside a monitor. - provide condition variables such that a process can step outside of the monitor while waiting for a condition and thus not prevent other processes from entering the monitor. - A condition variable c is accessed using two special operations:     - c.wait causes the executing process to block and be placed on a waiting queue associated with the condition variable c.     - c.signal reactivates the process at the head of the queue associated with the condition variable c.    </p> <p>The monitor primitive offers a simple solution to the bounded-buffer problem. Since the monitor guarantees mutual exclusion,  the functions to deposit and to remove data automatically become critical sections. Consequently, the solution works for multiple producers and multiple consumers.  </p> <p>A priority wait has the form c.wait(p), where c is a conditional variable and p is an integer specifying a priority according to which processes blocked on c are reactivated.  </p> <p>A compiler or preprocessor uses P and V operations on semaphores to enforce the different features of a monitor. - A semaphore mutex (initialized to 1) is used to enforce mutual exclusion among the functions. - A semaphore c (initialized to 0) is used for each condition variable c to allow a process to block itself on the condition. - A semaphore urg (initialized to 0) is used to block a process executing a signal operation. - Associated with each semaphore c is a counter c_cnt, which keeps track of the number of processes blocked on c. - Associated with the semaphore urg is a counter urg_cnt, which keeps track of the number of processes blocked on urg.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#56-class-synchronization-problems","title":"5.6 Class synchronization problems","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#the-readers-writers-problem","title":"The readers-writers problem","text":"<p>The readers-writers problem is an extension of the critical section problem where two types of processes, readers and writers, compete for access to a common resource. Readers are allowed to enter the critical section (CS) concurrently but only one writer is allowed to enter at a time.</p> <p>The main challenge is to guarantee maximum concurrency of readers while preventing the starvation of either type of process. Specifically, two rules must be enforced:</p> <ul> <li>A reader is permitted to join other readers currently in the CS only when no writer is waiting. When the last readers exits the CS, the writer is allowed to enter.</li> <li>All readers that have arrived while a writer is in the CS must be allowed to enter before the next writer.  </li> </ul> <p>Rule 1 guarantees that writers cannot starve. Rule 2 guarantees that readers cannot starve. Jointly the two rules guarantee maximum concurrency of readers.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#a-montor-solution-to-the-readers-writers-problem","title":"A montor solution to the readers-writers problem","text":"<p>The monitor provides 4 functions:</p> <ul> <li>start_read is called by a reader to get a permission to read</li> <li>end_read is called by a reader when finished reading</li> <li>start_write is called by a writer to get a permission to write</li> <li>end_write is called by a writer when finished writing  </li> </ul> <p>Two counters, reading and writing, are used to keep track of the number of readers and the number of writers currently in CS, respectively.</p> <p>Two condition variables, ok_to_read and ok_to_write, are used to block readers and writers, respectively.</p> <p>To avoid maintaining separate counters of processes blocked on a condition c, a primitive count(c) is provided, which returns the number of processes blocked on c. Ex: count(ok_to_read) returns the number of processes blocked on ok_to_read.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#the-dining-philosophers-problem","title":"The dining-philosopher's problem","text":"<p>The dining-philosophers problem is representative of situations where multiple processes compete for shared resources but each process needs more than one resource at a time.</p> <p>Five \"philosophers\", each representing a concurrent process, are seated around a table. Five \"forks\", each representing a resource, are placed on the table such that each two neighboring philosophers share one fork. Each philosopher alternates asynchronously between a phase of \"thinking\", which represents execution not requiring any shared resources, and \"eating\", which requires the prior acquisition of the two forks adjacent to the philosopher and shared with the two respective neighbors.</p> <p>The main challenge is to prevent deadlock while guaranteeing that any two nonadjacent philosophers can always eat concurrently.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#approaches-to-preventing-deadlock","title":"Approaches to preventing deadlock","text":"<p>The behavior of each philosopher p[i] can be represented as a loop that alternates between the phases of thinking and eating. Prior to eating, p[i] requests the two adjacent forks and returns the forks when finished eating. The forks can be represented as 5 semaphores, f[0] through f[4], all initialized to 1. P(f[i]) then corresponds to picking up fork f[i] and V(f[i]) corresponds to putting down fork f[i].</p> <pre><code>p(i) {\n   while (1) {\n          think\n          P(f[i])\n          P(f[i+1 mod 5])\n          eat\n          V(f[i])\n          V(f[i+1 mod 5])\n   }\n}\n</code></pre> <p>This code leads to deadlock since all philosophers can pick up the left fork f[i] concurrently and then block indefinitely on picking up the right fork. Several approaches exist to avoid the problem:</p> <ul> <li>Approach 1: Request both forks at the same time in a critical section.</li> <li>Approach 2: One philosopher picks up the forks in the opposite order from all other philosophers.</li> </ul>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#a-monitor-solution-to-the-dining-philosophers-problem","title":"A monitor solution to the dining philosophers problem","text":"<p>Each of the 5 philosophers, p[i], can be in one of 3 states: thinking, hungry, or eating. Thinking does not require any forks. Hungry is a state where the philosopher is blocked because one or both forks are not available. In the eating state the philosopher is holding both forks and is executing.</p> <ul> <li>The forks are not represented explicitly by any data structure. Rather, the pickup(i) function switches p[i] from thinking to eating if p[i-1] and p[i+1] are not eating. Consequently, deadlock is not possible because no forks are picked up one at a time. Instead, the act of picking up the forks is represented implicitly by the single state transition from thinking to eating.</li> <li>Concurrent execution is guaranteed in that the putdown(i) function explicitly enables neighbor p[i-1] if p[i-2] is not eating and similarly the function enables neighbor p[i+1] if p[i+2] is not eating.  </li> </ul>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#the-elevator-algorithm","title":"The elevator algorithm","text":"<p>A storage disk consists of n concentric tracks that need to be accessed by read/write requests arriving in some unspecified order. The goal is to minimize the travel distance between tracks while preventing starvation.</p> <p>The elevator algorithm mimics the behavior of an elevator in an n-story building. The elevator (representing the read-write head of the disk), maintains a direction of motion, up or down, for as long as requests for floors (representing disk tracks) exist, in the current direction. When moving up and no more requests for higher floors exist, the elevator reverses direction and services all requests in descending order. When the request for the lowest floor is serviced, the elevator again reverses direction and proceeds moving up.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#57-petersons-solution","title":"5.7 Peterson's solution","text":"<p>Peterson's solution: A historically interesting algorithm for implementing critical sections.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#6-deadlock","title":"6 Deadlock","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#61-a-system-model-for-deadlocks","title":"6.1 A system model for deadlocks","text":"<p>A resource allocation graph shows the current allocation of resources to processes and the current requests by processes for new resources.</p> <ul> <li>Processes are represented by circles.</li> <li>Resources are represented by rectangles. If a resource contains multiple units then each unit is represented by a small circle.</li> <li>Resource allocations are represented by edges directed from a resource to a process.</li> <li>Resource requests are represented by edges directed from a process to a resource.</li> </ul> <p>A process p is blocked on a resource r if one or more request edges directed from p to r exist and r does not contain sufficient free units to satisfy all requests.</p> <p> </p> <p>A deadlock involves at least 2 processes and 2 resources (or resource units), where each process holds one resource and is blocked indefinitely on another resource held by another process.  </p> <p> </p> <p>State transitions: - resource request - resource acquisition - resource release  </p> <p>A process is deadlocked in a state s if the process is blocked in s and if no matter what state transitions occur in the future, the process remains blocked.</p> <p>A state s is called a deadlock state if s contains two or more deadlocked processes.</p> <p>A state s is a safe state if no sequence of state transitions exists that would lead from s to a deadlock state.</p> <p>When the sequence of all requests and releases by each process is known, a complete state transition graph can be constructed and analyzed for the presence of deadlock states and safe states.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#62-deadlock-detection","title":"6.2 Deadlock detection","text":"<p>A resource allocation graph is completely reducible if at the termination of the graph reduction algorithm all processes have been deleted.</p> <p>During continuous deadlock detection, the current state s is not a deadlock state.  </p> <p>A wait-for graph is a resource allocation graph containing only processes where each process can have multiple incoming resource allocation edges but only one outgoing resource request edge.  </p> <p>The term \"wait-for\" indicates that process p is blocked on a resource currently held by another process p'.</p> <p>Theorem: A cycle in the wait-for graph is a necessary and sufficient condition for deadlock.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#wait-for-graph","title":"Wait for graph:","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#63-dynamic-deadlock-avoidance","title":"6.3 Dynamic deadlock avoidance","text":"<p>One approach to dealing with deadlocks is to allow deadlocks to occur and to provide means for detection and recovery. Recovery from a deadlock can be accomplished by destroying one or more of the processes involved in the deadlock, or by removing some of the resources held by the deadlocked processes.</p> <p>An alternative is to avoid the possibility of a deadlock by delaying the acquisition of resources that could cause the system to enter a deadlock state.  </p> <p>The maximum claim of a process is the set of all resources the process may ever request. Each potential future claim of a resource is represented by a dashed edge in the resource allocation graph.  </p> <p>A resource claim graph is an extension of the general resource allocation graph. The extended graph shows - the current allocation of resources to processes and - all current as well as all potential future requests by processes for new resources.    </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#claims-graph","title":"Claims graph:","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#the-bankers-algorithm","title":"The banker's algorithm","text":"<p>The banker's algorithm emulates the strategy used by a bank when issuing loans. A loan corresponds to a resource allocation and a maximum claim corresponds to the credit limit of a customer (requesting process). The bank grants a request as long as a sequence of loans exist that would satisfy the needs of all customers in some order. Otherwise the granting of the request is postponed.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#deadlock-avoidance-with-single-unit-resources","title":"Deadlock avoidance with single-unit resources","text":"<p>The banker's algorithm is then simplified:</p> <ul> <li>Given a request for a resource in a state s, temporarily grant the request by changing the request edge to an allocation edge.  </li> <li>Starting with the requesting process p, determine if the graph in the temporary state s' contains a directed cycle.  </li> <li>If no cycle exists then accept s' as the new state. Otherwise disallow the acquisition by reverting to the state s.    </li> </ul> <p>A directed cycle can be formed only if the graph already contains an undirected cycle. The reason is that no new edges are added to or removed from a claim graph. A claim edge can only change into a request edge, which in turn can change into an allocation edge, and eventually back to a claim edge.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#64-static-deadlock-prevention","title":"6.4 Static deadlock prevention","text":"<p>Two conditions must hold for a deadlock to occur with reusable resources:</p> <ul> <li>Hold and wait: A process is already holding one resource and is requesting another resource.  </li> <li>Circular wait: A process must issue a resource request that closes a cycle involving at least two processes and two resources.  </li> </ul> <p>Deadlock is structurally impossible if either of the two conditions are eliminated.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#eliminate-hold-and-wait","title":"Eliminate hold-and-wait","text":"<p>Several alternatives to eliminating the hold-and-wait condition exist:</p> <ul> <li>Every process must request all resources ever needed at the same time. The price paid for the simplicity of the approach is poor resource utilization since resources are held for unnecessarily long periods of time and thus unavailable to other processes.  </li> <li>Every process must release all currently held resources prior to making any new request. The approach improves resource utilization but results in repeated requests and releases of frequently used resources.  </li> <li>A process can be given the ability to test whether a needed resource is currently available. The process must release all currently held resources only if the requested resource is not currently available. Otherwise the new resource may be requested and allocated immediately.    </li> </ul> <p>The below image uses the above three techniques when p is requesting r3:  </p> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#eliminating-circular-wait","title":"Eliminating circular wait","text":"<p>A cycle in the resource graph can be closed only when two or more processes request the same resources but in a different order. A circular wait is prevented if all processes are required to request all resources in the same order.</p> <p>In the below image, a closed loop would be created if p1 requested r2 (the dashed line)  or r1.  p1 can only request r4 without creating a closed loop.  p3 can request all  resouces without creating a closed loop. p2 can only request r3 and r4.  </p> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#7-memory-management","title":"7 Memory management","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#71-requirements-for-efficient-memory-management","title":"7.1 Requirements for efficient memory management","text":"<p>A computer's physical memory (RAM) is a hardware structure consisting of a linear sequence of words that hold a program during execution. A word is a fixed-size unit of data. </p> <p>A typical word size is 1, 2, or 4 bytes.  </p> <p>A physical address is an integer in the range [0 : n-1] that identifies a word in a physical memory of size n.  </p> <p>Because when a program is being developed the address of the program in physical  memory is unknown, a logical address space is employed.  </p> <p>A logical address space is an abstraction of physical memory, consisting of a sequence of imaginary memory locations in a range [0 : m-1], where m is the size of the logical address space.</p> <p>A logical address is an integer in the range [0 : m-1] that identifies a word in a logical address space. Prior to execution, a logical address space is mapped to a portion of physical memory and the program is copied into the corresponding locations.  </p> <p>A source module is a program or a program component written in a symbolic language, like C, or an assembly language, that must be translated by a compiler or assembler into executable machine code.</p> <p>An object module is the machine-language output of a compiler or assembler generated from a source module. An object module may be self-contained and executable or multiple object modules may be linked together into a load module by a linker or linkage editor.</p> <p>A load module is a program or combination of programs in a form ready to be loaded into main memory and executed.  </p> <p> </p> <p>System Libraries may be added to the load module either prior to execution or during execution.  </p> <p>Program relocation is the act of moving a program component from one address space to another.  - Static relocation binds all logical addresses to physical addresses prior to execution.   - Dynamic relocation postpones the binding of a logical address to a physical address until the addressed item is accessed during execution.    </p> <p>A relocation register contains the physical starting address of a program or program component in memory.</p> <p>Most programs consist of 3 main components: code, static data, and dynamic data. A simple memory management scheme treats the 3 components as one unit  </p> <p>Dynamic location using relocation registers:  </p> <p> </p> <p> </p> <p>The OS keeps track of all free spaces, referred to as holes, using a linked list.  The OS has to find a place to put a new program loaded into memory by:  </p> <p>First-fit always starts the search from the beginning of the list and allocates the first hole large enough to accommodate the request.</p> <p>*Next-fit starts each search at the point of the last allocation.</p> <p>Best-fit searches the entire list and chooses the smallest hole large enough to accommodate the request.</p> <p>Worst-fit takes the opposite approach from best-fit by always choosing the largest available hole for any request.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#72-linkers-and-loaders","title":"7.2 Linkers and loaders","text":"<p>relocatable object file: The output of a compiler in which the contents can be loaded into any location in physical memory.</p> <p>linker: A system service that combines relocatable object files into a single binary executable file.</p> <p>executable file: A file containing a program that is ready to be loaded into memory and executed.</p> <p>loader: A system service that loads a binary executable file into memory, where it is eligible to run on a CPU core.</p> <p>relocation: An activity associated with linking and loading that assigns final addresses to program parts and adjusts code and data in the program to match those addresses.</p> <p>dynamically linked libraries (DLLs): System libraries that are linked to user programs when the processes are run, with linking postponed until execution time.</p> <p>executable and linkable format (ELF): The UNIX standard format for relocatable and executable files.</p> <p>portable executable (PE): The Windows format for executable files.</p> <p>Mach-O: The macOS format of executable files.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#73-managing-insufficient-memory","title":"7.3  Managing insufficient memory","text":"<p>External memory fragmentation:  is the loss of usable memory space due to holes between allocated blocks of variable sizes.  </p> <p>The 50% rule states that, if the probability of finding an exact match for a request approaches 0, one third of all memory partitions are holes and two thirds are occupied blocks. Formally, n = 0.5 m, where n is the number of holes and m is the number of occupied blocks.  </p> <p>The 50% rule only refers to the number of holes but not the amount of space occupied by the holes.  </p> <p>When no hole large enough for a request is available, the process can either be delayed until more memory is released or two possible actions may be taken to create more space:</p> <p>Swapping is the temporary removal of a module from memory. The module is saved on a disk and later moved back to memory. Dynamic relocation is necessary so that the module can be placed into a different location without modification.</p> <p>Memory compaction is the systematic shifting of modules in memory, generally in one direction, to consolidate multiple disjoint holes into one larger hole.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#74-paging","title":"7.4 Paging","text":"<p>The main disadvantage of dividing memory into variable partitions is external fragmentation, which requires the searching of memory for holes large enough to satisfy each request.   </p> <p> </p> <p>A page is a fixed-size contiguous block of a logical address space identified by a single number, the page number.</p> <p>A page frame is a fixed-size contiguous block of physical memory identified by a single number, the page frame number.</p> <p>A page frame is the smallest unit of data for memory management and may contain a copy of any page.</p> <p>A page table is an array that keeps track of which pages of a given logical address space reside in which page frames. Each page table entry corresponds to one page and contains the number or the starting address of the frame containing the page.  </p> <p>Page addressing:  </p> <p> </p> <p> </p> <p>The size of p determines the number of pages in the logical address space. p is added to the start of the page table. The size of p determines how many page numbers can be generated.</p> <p>The size of f determines the number of frames in the physical space. The size of f determines how many frame numbers can be generated.  </p> <p>Address Translation:  </p> <p> </p> <p>Paging avoids external fragmentation by having all pages and page frames the same size so that any page fits into any frame without creating holes between frames. However, the size of a program is generally not an exact multiple of the page size and thus some space remains unused at the end of the last page.  </p> <p>Internal fragmentation is the loss of usable memory space due to the mismatch between the page size and the size of a program, which creates a hole at the end of the program's last page.</p> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#75-segmentation-and-paging","title":"7.5 Segmentation and paging","text":"<p>Segmentation addresses the problem by providing multiple logical address spaces for each process, where each segment can have a different size.</p> <p>A segment is a variable-size block of a logical address space identified by a single number, the segment number.  </p> <p>With pure segmentation (no paging), a segment occupies a contiguous area of physical memory and is the smallest unit of data for memory management.</p> <p>A segment table is an array that keeps track of which segment resides in which area of physical memory. Each entry corresponds to one segment and contains the starting address of the segment.  </p> <p>Segmentation:  </p> <p> </p> <p> </p> <p> </p> <p>Segmentation addressing:  </p> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#segmentation-with-paging","title":"Segmentation with paging","text":"<ul> <li>The main advantage of segmentation is the ability to create multiple variable-size address spaces. </li> <li>The main advantage of paging is the ability to place any page into any frame in memory. To gain the advantages of both, segmentation can be combined with paging.  </li> </ul> <p>Address translation with segmentation and paging:  </p> <p> </p> <p> </p> <p>Mapping segmentation with paging to physical memory:  </p> <p> </p> <p> </p> <p>When segmentation is combined with paging, the number of memory accesses triples: First the segment table is accessed, then a page table, and finally the page holding the addressed word.  </p> <p>A translation lookaside buffer (TLB) is a fast associative memory buffer that maintains recent translations of logical addresses to frames in physical memory for faster retrieval.  </p> <p>The principle of locality states that locations accessed recently are more likely to be accessed again than locations accessed in the distant past.  </p> <p>The TLB's hit ratio is the fraction of memory accesses that find a match in the TLB. The higher the TLB hit ratio, the lower the overhead of address translation.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#8-virtual-memory","title":"8 Virtual Memory","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#81-principles-of-virtual-memory","title":"8.1 Principles of virtual memory","text":"<p>Virtual memory (VM) is a collection of one or more logical address spaces, each of which may exceed the size of physical memory. A logical address is then referred to as a virtual address. A paged VM creates a single large contiguous address space per process. A paged VM with segmentation creates multiple large address spaces per process, each of which is paged.  </p> <p>Demand paging is the principle of loading a page into memory only when the page is needed, rather than at the start of the execution.  </p> <p>A present bit is a binary flag in each page table entry that indicates whether the corresponding page is currently resident in memory.  </p> <p>A page fault is an interrupt that occurs when a program attempts to reference a non-resident page. The interrupt triggers the operating system to find the page on disk, copy the page into a frame, and set the present bit to 1.  </p> <p>Demand paging:  </p> <p> </p> <p>Page replacement is the act of overwriting a page in memory with a different page loaded from the disk when needed.  </p> <p>A modified-bit (m-bit) is a binary flag in each page table entry that indicates whether the corresponding page has been modified during execution. The modified bit is set to 1 automatically by any instruction that stores data into the page and is used by the operating system to minimize the movement of data to disk.  </p> <p> </p> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#82-page-replacement-with-fixed-numbers-of-frames","title":"8.2 Page replacement with fixed numbers of frames","text":"<p>Memory consists of a fixed number of frames.  </p> <p>A reference string is the sequence of page numbers referenced by an executing program during a given time interval. Reference strings are used to compare different page replacement algorithms by counting the number of page faults generated.  </p> <p>The optimal page replacement algorithm selects the page that will not be referenced for the longest time in the future.  </p> <p>The FIFO page replacement algorithm selects the page that has been resident in memory for the longest time.  </p> <p>The least-recently-used page replacement algorithm (LRU) selects the page that has not been referenced for the longest time.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#83-approximation-of-the-lru-algorithm","title":"8.3 Approximation of the LRU algorithm","text":"<p>The LRU requires the queue of pages to be modified at each memory reference, which makes the algorithm too inefficient in practice.  </p> <p>Several algorithms exist that approximate LRU and can be implemented efficiently:  </p> <ul> <li>The aging page replacement algorithm does not maintain pages sorted in the exact LRU order, but groups together pages referenced during a period of d consecutive references. Each period is represented by 1 bit in a periodically shifting aging register.  <ul> <li>A referenced bit (r-bit) is a bit associated with a page and is set automatically by the hardware whenever the page is referenced by any instruction.  </li> <li>An aging register is associated with a page and is shifted periodically to the right by 1 bit. Unless the most significant bit is set to 1, the page is aging in the sense that the associated register value is steadily decreasing.  </li> </ul> </li> </ul> <p> </p> <ul> <li>The second-chance page replacement algorithm is a coarse-grain approximation of LRU. The algorithm uses the r-bit to divide all pages into only two categories: recently referenced and not recently referenced. A page is selected from the not-recently referenced category.  </li> </ul> <p> </p> <ul> <li>The third-chance page replacement algorithm, also known as the not-recently-used page replacement algorithm (NRU), is a coarse-grain approximation of LRU, which divides pages into 4 categories based on the 4 possible combination of the r- bit and the m-bit.  </li> </ul>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#84-page-replacement-with-variable-numbers-of-frames","title":"8.4 Page replacement with variable numbers of frames","text":"<p>The optimal working set of a process is the set of resident pages that will still be needed in the immediate future and thus should remain resident.   </p> <p>The optimal working set is unrealizable in practice because the algorithm requires advance knowledge of the RS. </p> <p>The working set page replacement algorithm relies on the principle of temporal locality by assuming that recently referenced pages will be similar to pages referenced in the immediate future.  </p> <p>The working set (WS) of a process at time t is the set of pages referenced during the past d memory operations preceding t.</p> <p>The working set page replacement algorithm uses a trailing window of size d superimposed on the RS to determine the size and composition of the working set at time t. Analogous to the forward-looking window of the optimal working set, pages visible in the trailing window belong to the working set.  </p> <p>At each memory reference, the algorithm follows the steps:</p> <ol> <li>Advance the sliding window by 1 to include the current reference.  </li> <li>Keep resident only the pages that appear in the window.  </li> </ol> <p>Working-set page replacement:  </p> <p> </p> <p>The page-fault-frequency replacement algorithm takes a direct approach to controlling the page fault rate by adjusting the current resident set based on how frequently consecutive page faults occur.  </p> <p>When a page fault occurs:</p> <ol> <li>Add the currently referenced page causing the page fault to the resident set.</li> <li>When the time since the previous page fault is greater than d, remove all pages from the resident set that have not been referenced since the previous page fault.  </li> </ol> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#85-time-and-space-efficiendy-of-virtual-memory","title":"8.5 Time and space efficiendy of virtual memory","text":"<p>Page fault rate is the number of page faults, f, occurring during a number of memory references, t. The page fault rate can be expressed as P = f/t, where 0 \u2264 P \u2264 1. P = 1 means that every memory reference results in a page fault, and P = 0 means that no page faults occur.  </p> <p>Effective access time is the average time to access memory in the presence of page faults. The effective access time, E, depends on the frequency of page faults:  </p> <p><code>E = (1 - P) * m + P * S</code> </p> <p>where m is the time to access physical memory and S is the time to process a page fault.  </p> <p>Page fault overhead:  </p> <p> </p> <p>Load control is the activity of determining how many processes should be running concurrently at any given time to maximize overall system performance.  </p> <p>Thrashing is an execution state during which most of the time is spent on moving pages between the memory and the disk while the CPU is mostly idle and no process is making any real progress.  </p> <p>Thrashing occurs when too many processes are sharing memory concurrently and no process has enough pages to operate without frequent page faults.  </p> <p> </p> <p> </p> <p>The most common page sizes range between 512 and 4096 bytes but the number has been increasing in recent years with improvements in disk technology.  </p> <p>Choice of page size:  </p> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#9-main-memory","title":"9 Main Memory","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#91-swapping","title":"9.1 Swapping","text":"<p>swapped: Moved between main memory and a backing store. A process may be swapped out to free main memory temporarily and then swapped back in to continue execution.</p> <p>backing store: The secondary storage area used for process swapping.</p> <p>application state: A software construct used for data storage.  </p> <p>Standard swapping involves moving entire processes between main memory and a backing store. - allows physical memory to be oversubscribed (accomodate more processes than there is physical space) - Not used in contemporary os.  </p> <p>Swapping with pages - Still allows oversubscription - Does not move entire process - paging refers to swapping with paging  </p> <p>Mobile devices do not have the storage capacity for swapping: - Android adopts a strategy similar to that used by IOS. It may terminate a process if insufficient free memory is available. However, before terminating a process, Android writes its application state to flash memory so that it can be quickly restarted. - Apple's IOS asks applications to voluntarily relinquish allocated memory. However, any applications that fail to free up sufficient memory may be terminated by the operating system.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#10-file-system","title":"10 File System","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#101-files","title":"10.1 Files","text":"<p>A file is a named collection of information managed on secondary storage by the FS.  </p> <p>A record is a structure of related data items, possibly of different data types, identified within a file by a record number or a unique key field. Ex: A student ID would uniquely distinguish all student records in a file.</p> <p>An access method is a set of operations provided by the OS as part of the user interface to access files. The most common access method is sequential. </p> <p>Some OSs (Ex: most IBM systems) support also direct access methods, where a record can be accessed directly by specifying a record number or a key value.</p> <p>Fixed-length record files also support direct access because the starting position of any record k can be calculated by multiplying k by the record length.  </p> <p> </p> <p>Metadata is information about the format and organization of a file's data and is generally stored in a file header.  </p> <p>A file header is a portion of the file preceding the actual data and is visible to only the FS itself.  </p> <p>The magic number is a short sequence of characters at the start of the file header, which identifies the file type.  </p> <p>Another way to represent file types is to use file extensions. A file extension is a sequence of one or more characters following the file name.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#102-file-directories","title":"10.2 File Directories","text":"<p>A file directory (or folder) is a special-purpose file that records information about other files and possibly other directories. The directory consists of a set of entries, each containing the name of a file followed by other information necessary to access the file.  </p> <p>A tree-structured directory hierarchy is a collection of directories organized such that: 1) every directory points to zero or more files or directories at the next lower level 2) every file and directory except the root is pointed to by exactly one parent directory at the next higher level.  </p> <p>The root of a tree-structured directory hierarchy is the highest level directory, which does not have a parent directory.  </p> <p>Every file and every directory has a unique ID  </p> <p>An absolute path name of a file, uniquely identified by an internal ID, f, is the concatenation of the directory and file names leading from the root to the file f. </p> <p>A relative path name is a concatenation of file names starting with the current directory.</p> <p>Access parent directory with \"..\"  </p> <p>Root directory \"/\"  </p> <p>The main drawback of a tree-structured directory hierarchy is that file sharing is asymmetric. Only one directory can be the parent of any file or another directory. Other users must refer to the file by first navigating up to a common directory and then down to the desired location.  </p> <p>A directed acyclic directory hierarchy organizes directories such that any directory at a given level may point to zero or more files or other directories at lower levels but also permits any file or directory to have more than one parent directory.  </p> <p>A reference count is a non-negative integer associated with a file f, which indicates how many directories are pointing to the file.</p> <p>A reference count is not sufficient to prevent the creation of unreachable subgraphs in the directory hierarchy, which can only be removed using a garbage collection algorithm.  </p> <p>A symbolic link (or shortcut) is a directory entry that points to a file or directory just like a regular entry but is treated differently with respect to deletion.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#103-implementation-of-file-directories","title":"10.3 Implementation of file directories","text":"<p>The typical file attributes include:</p> <ul> <li>Size: The current size in bytes or words.</li> <li>Type: Information to differentiate directories, regular files, executable files, and other types of files supported by the system.</li> <li>Location: Information necessary to locate the file's physical blocks on disk.</li> <li>Protection: Information about who can access the file and the permitted type of access (Ex: read only or execute only).</li> <li>Use: The date and time of file creation, last access, or last modification.</li> </ul> <p>A File control block (FCB) is a data structure associated with a filename that contains all relevant attributes of the file. FCBs are stored apart from file directories and are pointed to by the corresponding directory entries. In Unix and other OSs an FCB is called an i-node.  </p> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#104-operations-on-files","title":"10.4 Operations on files","text":"<p>Create file operation creates a new named file with a File Control Block.  </p> <p>Destroy file operation removes existing file, FCB,and  directory entry.  </p> <p>To avoid accessing the information repeatedly and to keep track of the file's current state, the FS maintains all relevant information in an open file table kept in main memory.  </p> <p>To avoid accessing the information repeatedly and to keep track of the file's current state, the FS maintains all relevant information in an open file table kept in main memory.  </p> <p>The open file table (OFT) is a data structure that keeps track of all files currently in use to facilitate efficient access to and manipulation of the files.  </p> <p>A read file operation copies data from an open file to a specified area in main memory.   </p> <p>A write file operation copies data from an area in main memory to a specified open file.  </p> <p>Analogous to the read operation, the write operation also uses the r/w buffer in the OFT.   </p> <p>A seek operation moves the current position of an open file to a new specified position. </p> <p>The close file operation reverses the effects of the open operation by saving the current state of the file in the FCB and freeing the OFT entry.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#105-disk-block-allocation","title":"10.5 Disk block allocation","text":"<p>A disk block is a fixed sequence of bytes on the disk, which can only be accessed as a single unit using low-level read-block and write-block operations.  </p> <p>A file is stored on the disk in units of disk blocks.   </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#contiguous-block-allocation-scheme","title":"contiguous block allocation scheme","text":"<p>In a contiguous block allocation scheme, every file is mapped into a contiguous sequence of disk blocks. The FCB points to the first disk block. The file length, also maintained in the FCB, determines how many blocks are occupied by the file.</p> <p>The main advantages are:  </p> <ul> <li>Fast sequential access because neighboring blocks do not require any seek operations.  </li> <li>Fast direct access because a target block number can be computed using the file position and the block length.  </li> </ul> <p>The main drawbacks are:  </p> <ul> <li>Disk fragmentation, in that over time, the disk consists of variable-length sequences of free and occupied blocks and requires search algorithms to find free areas of appropriate size for a given file.  </li> <li>Inability to expand a file if the block following the last file block is not free. The entire file must be copied into a larger area.  </li> <li>Difficulty in deciding how much space to allocate to a new file to allow for potential expansion.  </li> </ul>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#linked-block-allocation-scheme","title":"linked block allocation scheme","text":"<p>With a linked block allocation scheme, the blocks containing a file may be scattered throughout the disk. The FCB points to the first block and each block points to the logically next block.</p> <p>The main advantage is: - Easy expandability of a file by linking additional blocks to the last block.  </p> <p>The main drawbacks are: - Slower sequential access than with a contiguous allocation, since each block access requires a seek operation to a different position on the disk. - Inability to perform direct access since the location of the target block cannot be computed. To access any block requires following the pointers and reading all blocks preceding the target block. - Decreased reliability of the disk. If a disk block becomes physically damaged, the rest of the file cannot be found. - Considerable waste of disk space since every disk block must include a pointer to the next block.    </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#clustered-allocation","title":"Clustered Allocation","text":"<p>A clustered block allocation scheme links together sequences of contiguous blocks. The last block of any cluster points to the beginning of the logically next cluster. The last block also records the number of blocks belonging to the next cluster to facilitate direct access within each cluster. The number of blocks in the first cluster is recorded in the FCB along with the pointer.  </p> <p>The approach is a compromise between the contiguous and linked allocations. The main advantages are:</p> <ul> <li>Easy expandability of a file. If the block following the last file block is free, than the last cluster is extended as with the contiguous allocation. If the block following the last file block is occupied, then a new cluster is started and the last block points to the first block of the new cluster.  </li> <li>A reduced number of pointers since only the last block of a cluster contains a pointer.  </li> <li>Improved sequential access over the purely linked allocation since accessing blocks within a cluster does not require any seek operations.  </li> </ul> <p>The main drawbacks are: - Slower sequential access than with contiguous allocation since each cluster requires a seek operation to a different position on the disk. - Inability to perform direct access since the location of the target block cannot be computed. To access any block requires following the pointers until the cluster containing the target block is reached.    </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#using-file-allocation-table","title":"Using file allocation table","text":"<p>A variation of the linked organization is to allow file blocks to reside anywhere on the disk but to segregate the links in a dedicated area on the disk, rather than maintaining the links as part of each disk block.  </p> <p>A File allocation table (FAT) is an array where each entry corresponds to a disk block. The FAT keeps track of which disk blocks belong to a file by linking the blocks in a chain of indices. A file's FCB contains the index of the first file block, which in turn contains the index of the next block, etc.  </p> <p>Since the FAT resides in a small number of designated disk blocks, the blocks can be cached in main memory. Consequently:</p> <ul> <li>Sequential access is more efficient since no seek operations are necessary to follow pointers.  </li> <li>Direct access is also possible, because the location of the desired block can be found efficiently by scanning the chain of indices in the FAT.  </li> </ul>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#indexed-allocation","title":"Indexed Allocation","text":"<p>With an indexed block allocation scheme, file blocks may reside anywhere on the disk. An index table is provided for each file, which keeps track of the blocks belonging to the file.</p> <p>The main advantages are:</p> <ul> <li>Fast sequential as well as direct access.  </li> <li> <p>Ability to efficiently expand a file by simply adding a new block number to the index table. The main drawback is:  </p> </li> <li> <p>Necessity to decide a priori how big the index table should be. A small table limits the maximum size of any file. A large table wastes disk space, since most file will have no need for the large size.    </p> </li> </ul>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#free-space-management","title":"Free Space management","text":"<p>A bitmap is a data structure where each bit represents one disk block.  </p> <p>The space used up by the bitmap is minimal.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#106-memory-mapped-files","title":"10.6 Memory-mapped files","text":"<p>memory mapping: A file-access method in which a file is mapped into the process memory space so that standard memory access instructions read and write the contents of the file; an alternative to the use of read() and write() calls.</p> <p>Performing file manipulation in the volatile memory. The changes to the file are not save to secondary memory until the file is closed.   </p> <p>Quite often, shared memory is in fact implemented by memory mapping files. Under this scenario, processes can communicate using shared memory by having the communicating processes memory-map the same file into their virtual address spaces.  </p> <p>file mapping: In Windows, the first step in memory-mapping a file.</p> <p>view: In Windows, an address range mapped in shared memory. Also, the second step in memory-mapping a file, allowing a process to access the file contents.</p> <p>named shared-memory object: In Windows API, a section of a memory-mapped file accessible by name from multiple processes.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#11-inputoutput","title":"11 Input/Output","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#111-the-hardware-software-interface","title":"11.1 The hardware-software interface","text":"<p>Devices are attached to the system using controllers. A device controller (device adapter) is an electronic circuit capable of operating a specific I/O device using binary signals. The interface to a device controller is a set of hardware registers and flags, which may be set by and/or examined by device drivers.  </p> <p>A device driver is a device-specific program that implements I/O operations, requested by user applications or the OS, by interacting with the device controller.   </p> <p>Translating the high-level I/O instruction to a device-specific operation, including error handling, buffering, and other issues, is the job of the disk driver.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#programmed-io-with-polling","title":"Programmed I/O with polling","text":"<p>A generic interface to a device controller consists of a set of registers:  </p> Register Use Opcode The register specifies the type of operation requested. Ex: read or write. Storing a new value into the register starts the I/O operation. Operands One or more operand registers are used to describe the parameters of the requested operation. The values are written by the CPU prior to starting the operation. Busy The register (a 1-bit flag) is set by the controller to indicate whether the device is busy or idle. Status The register is set by the controller to indicate the success or failure of the last I/O operation. Data buffer The data buffer holds the data to be transferred between the device and main memory. Depending on the device type, the buffer may hold a single character or a block of data. <p>Programmed I/O is a style of I/O programming where the CPU, running the device driver, performs the copying of all data between the I/O device controller and main memory.  </p> <p>Polling is a technique to determine whether a device is busy or idle by reading a flag set and reset by the device controller.  </p> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#programmed-io-with-interrupts","title":"Programmed I/O with interrupts","text":"<p>When interrupts are used for I/O processing, the interface to the controller remains the same, but the controller is equipped with the ability to issue interrupts to the CPU.  </p> <p>The busy flag is still present but is used only initially to determine whether the device is available to accept a new I/O request. Then, after starting the I/O operation, the current process blocks itself, instead of repeatedly polling the busy flag to detect the termination of the data transfer.  </p> <p>Inputs with interrupts:  </p> <p> </p> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#io-with-direct-memory-access","title":"I/O with direct memory access","text":"<p>A direct memory access (DMA) controller is a hardware component that allows devices to access main memory directly, without the involvement of the CPU.  </p> <p>Inputs with DMA:  </p> <p> </p> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#polling-vs-interrupts","title":"Polling vs interrupts","text":"<p>Polling: a few machine instructions - Good for single process - Good for devices that complete an I/O operation within a few microseconds  </p> <p>Interrupt: blocking causes significant CPU overhead  - Better for general pupose multi-process environments - constant, predictable overhead for each I/O  </p> <p> </p> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#112-data-buffering-and-caching","title":"11.2 Data buffering and caching","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#using-a-single-buffer","title":"Using a single buffer","text":"<p>A buffer is a register or an area of main memory used to hold data generated by a producer process or an input device and removed from the buffer at a later time by a consumer process or an output device.  </p> <p>A keyboard generates characters one at a time but a user process may wish to receive the data only as complete lines. The driver can accumulate multiple characters in a buffer, edit the data in the buffer based on special characters received, and only pass the data to the consumer when the ENTER key is pressed. The driver is said to operate in \"cooked\" data mode, rather than \"raw\" data mode, where all characters are passed to the application unchanged.  </p> <p> </p> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#buffer-swapping","title":"Buffer Swapping","text":"<p>In a producer-consumer situation sharing a buffer, the consumer is blocked or idle while the producer is filling the buffer. Similarly, the producer is blocked or idle while the consumer is copying the buffer.</p> <p>Buffer swapping is a technique that allows the operations of a producer process and a consumer process to overlap by using two buffers. While the producer is filling buffer 1, the consumer is copying buffer 2. When both terminate, the two buffers are swapped. The producer starts filling buffer 2 while the consumer starts copying buffer 1.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#circular-buffer","title":"Circular buffer","text":"<p>Buffer swapping improves performance by overlapping the execution of the producer and the consumer, but only when data is produced and consumed at the same constant rate.   </p> <p>A circular buffer is a fixed array of buffer slots filled by the producer and emptied by the consumer one slot at a time in ascending order, modulo the buffer size.  </p> <p></p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#disk-block-caching","title":"Disk Block caching","text":"<p>A disk block cache is a set of main memory buffers that contain the most recently accessed disk blocks.  </p> <ul> <li>Blocks critical to performance must remain resident at all times and are kept on a list of Locked blocks.</li> <li>Blocks expected to be accessed again in the near future reside on a list that implements the LRU (least recently used) policy. Whenever a block is accessed, the block is moved to the rear of the list. Blocks not accessed again gradually migrate to the front of the list and are removed when no free buffers are available.</li> <li>Blocks expected to be accessed only once or very infrequently are added to the front of the same LRU list and thus will be removed quickly.</li> </ul> <p>The term \"buffer\" has two different meanings, depending on the context:</p> <ul> <li>A buffer used to decouple a consumer from a producer holds new data generated by the producer and used later by the consumer.</li> <li>A buffer used for caching holds a temporary copy of data that already exists on the disk and only facilitates faster access to the data.</li> </ul> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#113-disk-scheduling","title":"11.3 Disk Scheduling","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#magnetic-disk-storage","title":"Magnetic disk storage","text":"<p>A track is one of many concentric rings on a magnetic disk surface. </p> <p>A sector is a portion of a track and is the smallest unit of data that can be read or written with a single r/w operation.  </p> <p>The time to access any data on a disk consists of 3 components:</p> <ul> <li>The seek time is the time to move the r/w head from the current position to the track containing the desired data. The time is directly proportional to the physical distance the r/w head needs to traverse.</li> <li>The rotational delay (rotational latency) is the time to wait for the desired data item to pass under the r/w head. On average, the rotational delay is one half of the time of one disk revolution. Thus the time depends on the disk's rotational speed.</li> <li>The data transfer time is the time to transfer the desired number of bits to or from the disk, and is directly proportional to the disk's rotational speed.</li> </ul> <p>The peak transfer rate depends directly on the rotational speed of the disk and the number of sectors per track.  </p> <p>The seek time depends on the physical distance traveled, which varies with the density of the tracks on the disk.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#disk-access-optimization","title":"Disk access optimization","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#sstf-shceduling-algorithm","title":"SSTF shceduling algorithm","text":"<p>The Shortest seek time first (SSTF) scheduling algorithm considers the list of all pending requests and always selects the request that requires the shortest travel distance from the current position  </p> <p>Starvation is possible under SSTF  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#scan-and-c-scan-scheduling-algorithms","title":"Scan and C-scan scheduling algorithms","text":"<p>The Scan scheduling algorithm mimics the behavior of an elevator in a building. The r/w head maintains a current direction of travel and services all request sequentially in the current direction. -  tracks closer to the midrange have a greater chance to be serviced quickly than tracks at either extreme of the disk.  </p> <p>The C-Scan scheduling algorithm is a variant of the Scan algorithm that services requests in only one direction. When the outermost request is reached, the r/w head sweeps back to the opposite end of the disk and starts servicing requests again in the same direction. - uniform access time to all tracks  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#114-error-handling","title":"11.4 Error handling","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#error-detection-and-correction","title":"Error detection and correction","text":"<p>Data on a disk can become inconsistent for two reasons:</p> <ul> <li>A system crash during a write operation can leave a disk block in a partially updated state.</li> <li>A spontaneously occurring bad block, caused by aging or physical damage to the recording medium, makes the reading or re-writing of the block impossible.</li> </ul> <p>Data can also be corrupted during transmission between systems or I/O devices.</p> <p>A parity bit is a bit added to a string of bits to ensure that the total number of 1's in the string is even or odd. </p> <p>An error correcting code (ECC) includes multiple parity bits in a string to permit the detection and automatic correction of some number of erroneous bits. - A popular ECC is the Hamming code, which can correct a single bit error. </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#bad-block-detection-and-handling","title":"Bad block detection and handling","text":"<p>A bad block (bad sector) is a storage block that is no longer reliable for storing and retrieving data due to physical damage. An ECC is associated with each block, which allows the detection and automatic correction of some number of corrupted bits in the block.  </p> <p>To maintain the logical sequence of blocks b[0] ... b[D-1] without gaps, the disk provides some number of spare sectors on each track. The damaged block, b[i], can be remapped to a spare sector in one of two ways: - Sector forwarding is a technique where a bad disk block b[i] is mapped to one of the spare sectors. The solution is fast and simple but the drawback is that the logical blocks are no longer mapped to consecutive sectors, resulting in additional revolutions of the disk. - Sector slipping is a technique where all blocks following a bad block b[i] are shifted to the right. The last block is mapped to a spare sector and b[i] is mapped to the sector occupied previously by block b[i+1]. The approach requires more work initially but maintains the sequential order of all blocks.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#stable-storage","title":"Stable Storage","text":"<p>Stable storage is an approach to data management that uses redundancy, along with a strict protocol for reading, writing, and error recovery, to guarantee that all data remains consistent in the presence of media and crash failures.  </p> <p>A stable read guarantees to return a valid copy of any block.</p> <p>A stable write guarantees that every block is updated atomically. After the write, the block contains either the old or the new value but never a partially updated value.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#stable-storage-protocol","title":"Stable storage protocol:","text":"<p>Stable read: - Read block b from disk A and from disk B. - If the two copies are different, go to Media recovery Stable write: - Write block b to disk A. - If successful, write block b to disk B. - If either write fails, go to Media recovery. Media recovery:  - Remap the bad block to a spare block. - Copy the still correct value from the other disk to the spare block. Crash recovery:  - If a crash occurred while writing to disk A, copy the still valid block from disk B back to disk A. - If the crash occurred while writing to disk B, copy the new correct block from disk A to disk B  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#raid","title":"RAID","text":"<p>Striping is a technique where a sequence of data blocks, b[i], is distributed over n disks, such that disk[i] contains block b[i] modulo n. - Improves performance of RAID. - Adding redundant data in the form of parity or an ECC improves reliability of a RAID.</p> <p>A RAID (Redundant Array of Independent Disks) is a set of disks viewed by the OS as a single mass storage device.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#115-hdd-scheduling","title":"11.5 HDD scheduling","text":"<p>Optional  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#12-io-systems-ch-12-silberschatz","title":"12 I/O systems (ch 12 Silberschatz)","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#121-intro","title":"12.1 Intro","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#122-overview","title":"12.2 Overview","text":"<p>device driver: An operating system component that provides uniform access to various devices and manages I/O to those devices.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#123-io-hardware","title":"12.3 I/O hardware","text":"<p>port: A communication address; a system may have one IP address for network connections but many ports, each for a separate communication. In computer I/O, a connection point for devices to attach to computers. In software development, to move code from its current platform to another platform (e.g., between operating systems or hardware systems). In the Mach OS, a mailbox for communication.</p> <p>PHY: The physical hardware component that connects to a network (implements layer 1 in the OSI model).</p> <p>bus: A communication system; e.g., within a computer, a bus connects various components, such as the CPU and I/O devices, allowing them to transfer data and commands.</p> <p>daisy chain: In computer I/O, a connection method involving connecting devices to each other in a string (device A to B, B to C, C to D, etc.).</p> <p>PCIe bus: A common computer I/O bus connecting the CPU to I/O devices.</p> <p>A lane is composed of two signaling pairs, one pair for receiving data and the other for transmitting. Each lane is therefore composed of four wires, and each lane is used as a full-duplex byte stream, transporting data packets in an eight-bit byte format simultaneously in both directions.  </p> <p>expansion bus: A computer bus for connecting slow devices like keyboards.</p> <p>serial-attached SCSI (SAS): A common type of I/O bus.</p> <p>SAS: A common type of I/O bus.</p> <p>controller: A special processor that manages I/O devices.</p> <p>fibre channel (FC): A type of storage I/O bus used in data centers to connect computers to storage arrays. A storage-attachment network.</p> <p>host bus adapter (HBA): A device controller installed in a host bus port to allow connection of one or more devices to the host.</p> <p>memory-mapped I/O: A device I/O method in which device-control registers are mapped into the address space of the processor.</p> <p>I/O device control typically consists of four registers, called the status, control, data-in, and data-out registers:</p> <ul> <li> <p>data-in register: A device I/O register where data is placed to be sent to the device.</p> </li> <li> <p>data-out register: A device I/O register where data is placed by the device to be read by the computer.</p> </li> <li> <p>status register: A device I/O register in which status is indicated.</p> </li> <li> <p>control register: A device I/O register where commands are placed by the computer.</p> </li> </ul> <p>busy waiting: A practice that allows a thread or process to use CPU time continuously while waiting for something. An I/O loop in which an I/O thread continuously reads status information while waiting for I/O to complete.</p> <p>polling: An I/O loop in which an I/O thread continuously reads status information waiting for I/O to complete.</p> <p>For this example, the host writes output through a port, coordinating with the controller by handshaking as follows.</p> <ol> <li>The host repeatedly reads the busy bit until that bit becomes clear.  </li> <li>The host sets the write bit in the command register and writes a byte into the data-out register.  </li> <li>The host sets the command-ready bit.  </li> <li>When the controller notices that the command-ready bit is set, it sets the busy bit.  </li> <li>The controller reads the command register and sees the write command. It reads the data-out register to get the byte and does the I/O to the device.  </li> <li>The controller clears the command-ready bit, clears the error bit in the status register to indicate that the device I/O succeeded, and clears the busy bit to indicate that it is finished.  </li> </ol> <p>In many computer architectures, three CPU-instruction cycles are sufficient to poll a device: read a device register, logical-and to extract a status bit, and branch if not zero.   </p> <p>interrupt: A hardware mechanism that enables a device to notify the CPU that it needs attention.</p> <p>interrupt-request line: The hardware connection to the CPU on which interrupts are signaled.</p> <p>interrupt-handler routine: An operating system routine that is called when an interrupt signal is received.</p> <p>In a modern operating system, however, we need more sophisticated interrupt-handling features.</p> <ul> <li>We need the ability to defer interrupt handling during critical processing.  </li> <li>We need an efficient way to dispatch to the proper interrupt handler for a device without first polling all the devices to see which one raised the interrupt.  </li> <li>We need multilevel interrupts, so that the operating system can distinguish between high- and low-priority interrupts and can respond with the appropriate degree of urgency when there are multiple concurrent interrupts.  </li> <li>We need a way for an instruction to get the operating system's attention directly (separately from I/O requests), for activities such as page faults and errors such as division by zero. As we shall see, this task is accomplished by \"traps.\"  </li> </ul> <p>interrupt-controller hardware: Computer hardware components for interrupt management.</p> <p>Most CPUs have two interrupt request lines: - nonmaskable interrupt: An interrupt that cannot be delayed or blocked (such as an unrecoverable memory error) - maskable: Describes an interrupt that can be delayed or blocked (such as when the kernel is in a critical section).  </p> <p>address space layout randomization (ASLR): An operating system technique to avoid code-injection attacks that place memory objects like the stack and heap at unpredictable locations.</p> <p>interrupt vector: An operating-system data structure indexed by interrupt address and pointing to the interrupt handlers. A kernel memory data structure that holds the addresses of the interrupt service routines for the various devices.</p> <p>interrupt chaining: A mechanism by which each element in an interrupt vector points to the head of a list of interrupt handlers, which are called individually until one is found to service the interrupt request.</p> <p>interrupt priority level: Prioritization of interrupts to indicate handling order.</p> <p>exception: A software-generated interrupt caused either by an error (such as division by zero or invalid memory access) or by a specific request from a user program than an operating-system service be performed.</p> <p>first-level interrupt handler: In some operating systems, an interrupt handler responsible for reception and queuing of interrupts; the interrupts are actually handled at another level (by the second-level handler).</p> <p>second-level interrupt handler: In some operating systems, the interrupt handler that actually handles interrupts; reception and queueing of interrupts are handled at another level (by the first-level handler).</p> <p>Operating systems have other good uses for interrupts as well. For example, many operating systems use the interrupt mechanism for virtual memory paging. A page fault is an exception that raises an interrupt.</p> <p>software interrupt: A software-generated interrupt; also called a trap. The interrupt can be caused either by an error (e.g., division by zero or invalid memory access) or by a specific request from a user program that an operating-system service be performed.</p> <p>Interrupts can also be used to manage the flow of control within the kernel. </p> <p>trap: A software interrupt. The interrupt can be caused either by an error (e.g., division by zero or invalid memory access) or by a specific request from a user program that an operating-system service be performed.</p> <p>programmed I/O (PIO): A method of transferring data between a CPU and a peripheral device in which data are transferred one byte at a time.</p> <p>direct memory access (DMA): A resource-conserving and performance-improving operation for device controllers allowing devices to transfer large amounts of data directly to and from main memory. - DMA-request  - DMA-acknowledge  </p> <p>DMA can steal memory access cycles from the main CPU  </p> <p>scatter-gather: An I/O method in which multiple sources or destinations of I/O are specified in one command structure.</p> <p>double buffering: The copying of data twice (e.g., from a device to the kernel and then from the kernel to a process's address space), or the use of two buffers to decouple producers and consumers.</p> <p>cycle stealing: The act of a device, such as a DMA controller, using the bus and preventing the CPU from using it temporarily.</p> <p>direct virtual memory access (DVMA): DMA that uses virtual addresses rather than physical memory addresses as transfer sources and destinations.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#124-application-io-interface","title":"12.4 Application I/O interface","text":"<p>escape: Generally, a method of passing arbitrary commands or information when an interface does not provide a standard method.</p> <p>back door: A daemon left behind after a successful attack to allow continued access by the attacker. In cryptography, a method of gaining access to encrypted information without first having the secret keys. More generally, a method of passing arbitrary commands or information when an interface does not provide a standard method.</p> <p>block-device interface: The interface for I/O to block devices.</p> <p>raw I/O: Direct access to a secondary storage device as an array of blocks with no file system.</p> <p>direct I/O: Block I/O that bypasses operating-system block features such as buffering and locking.</p> <p>character-stream interface: The interface for I/O to character devices (like keyboards).</p> <p>socket: An endpoint for communication. An interface for network I/O.</p> <p>programmable interval timer: A hardware timer provided by many CPUs.</p> <p>high-performance event timer: A hardware timer provided by some CPUs.</p> <p>network time protocol: A network protocol for synchronizing system clocks.</p> <p>Most computers have hardware clocks and timers that provide three basic functions:</p> <ul> <li>Give the current time.  </li> <li>Give the elapsed time.  </li> <li>Set a timer to trigger operation X at time T.  </li> </ul> <p>blocking: In interprocess communication, a mode of communication in which the sending process is blocked until the message is received by the receiving process or by a mailbox and the receiver blocks until a message is available. In I/O, a request that does not return until the I/O completes.</p> <p>nonblocking: A type of I/O request that allows the initiating thread to continue while the I/O operation executes. In interprocess communication, a communication mode in which the sending process sends the message and resumes operation and the receiver process retrieves either a valid message or a null if no message is available. In I/O, a request that returns whatever data is currently available, even if it is less than requested.</p> <p>Asynchronous vs Synchronous I/O methods:  </p> <p> </p> <p>Vectored I/O: An I/O method in which multiple sources or destinations of I/O are specified in one command structure.  Without vectored I/O, the data might first need to be transferred to a larger buffer in the right order and then transmitted, which is inefficient.  </p> <p>scatter-gather: An I/O method in which multiple sources or destinations of I/O are specified in one command structure.</p> <p>standardized set of functions\u2014an interface </p> <p>One network interface available in many operating systems, including UNIX and Windows, is the network socket interface.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#125-kernel-io-subsystem","title":"12.5 Kernel I/O subsystem","text":"<p>device-status table: A kernel data structure (table) for tracking the status and queues of operations for devices. Used to support  asynchronous I/O.  </p> <p>buffer: A memory area that stores data being transferred (e.g., between two devices or between a device and a process).</p> <p>Buffering is done for three reasons: - cope with a speed mismatch between producer and consumer - adaptions for devices that have a different data-transfer size. - support copy semantics for application I/O</p> <p>double buffering: The copying of data twice (e.g., from a device to the kernel and then from the kernel to a process's address space), or the use of two buffers to decouple producers and consumers.</p> <p>copy semantics: The meaning assigned to data copying\u2014e.g., whether a block write from a process allows the data to be modified after the write has been requested.</p> <p>cache: A temporary copy of data stored in a reserved memory area to improve performance. In the slab allocator, a cache consists of two or more slabs. Fast memory.  </p> <p>The difference between a buffer and a cache is that a buffer may hold the only existing copy of a data item, whereas a cache, by definition, holds a copy on faster storage of an item that resides elsewhere.  </p> <p>spool: A buffer that holds output for a device (such as a printer) that cannot accept interleaved data streams.</p> <p>sense key: In the SCSI protocol, information in the status register indicating an error.</p> <p>advanced configuration and power interface (ACPI): Firmware common to PCs and servers that manages certain aspects of hardware, including power and device information.</p> <p>The I/O subsystem supervises these procedures:</p> <ul> <li>Management of the name space for files and devices  </li> <li>Access control to files and devices  </li> <li>Operation control (for example, a modem cannot seek())  </li> <li>File-system space allocation  </li> <li>Device allocation  </li> <li>Buffering, caching, and spooling  </li> <li>I/O scheduling  </li> <li>Device-status monitoring, error handling, and failure recovery  </li> <li>Device-driver configuration and initialization  </li> <li>Power management of I/O devices  </li> </ul> <p>The upper levels of the I/O subsystem access devices via the uniform interface provided by the device drivers.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#126-transforming-io-requests-to-hardware-operations","title":"12.6 Transforming I/O requests to hardware operations","text":"<p>UNIX has a mount table that associates prefixes of path names with specific device names.</p> <p>mount table: An in-memory data structure containing information about each mounted volume. It tracks file systems and how they are accessed.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#127-streams","title":"12.7 Streams","text":"<p>STREAMS: A UNIX I/O feature allowing the dynamic assembly of pipelines of driver code.</p> <p>A stream is a full-duplex connection  </p> <p>stream head: The interface between STREAMS and user processes.</p> <p>driver end: The interface between STREAMS and the device being controlled.</p> <p>stream modules: In STREAMS, modules of functionality loadable into a STREAM - A module can be used by more than one device  </p> <p>flow control: Generally, a method to pause a sender of I/O. In networking, a technique to limit the rate of data flow (e.g., to avoid buffer overflow and packet loss on a router).</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#128-performance","title":"12.8 Performance","text":"<p>front-end processors: Small computers that perform certain tasks in an overall system; used by some systems to manage I/O and offload the general-purpose CPU.</p> <p>terminal concentrator: A type of front-end processor for terminals. - multiplex the traffic from hundreds of remote terminals into one port on a large computer.  </p> <p>I/O channel: A dedicated, special-purpose CPU found in large systems like mainframes for performing I/O or offloading the general-purpose CPU.9</p> <p>We can employ several principles to improve the efficiency of I/O:</p> <ul> <li>Reduce the number of context switches.  </li> <li>Reduce the number of times that data must be copied in memory while passing between device and application.  </li> <li>Reduce the frequency of interrupts by using large transfers, smart controllers, and polling (if busy waiting can be minimized).  </li> <li>Increase concurrency by using DMA-knowledgeable controllers or channels to offload simple data copying from the CPU.  </li> <li>Move processing primitives into hardware, to allow their operation in device controllers to be concurrent with CPU and bus operation.  </li> <li>Balance CPU, memory subsystem, bus, and I/O performance, because an overload in any one area will cause idleness in others.  </li> </ul> <p>I/O implementation in hardware will provide the greatest performance benefits.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#129-summary","title":"12.9 Summary","text":"<ul> <li>The basic hardware elements involved in I/O are buses, device controllers, and the devices themselves.  </li> <li>The work of moving data between devices and main memory is performed by the CPU as programmed I/O or is offloaded to a DMA controller.  </li> <li>The kernel module that controls a device is a device driver. The system-call interface provided to applications is designed to handle several basic categories of hardware, including block devices, character-stream devices, memory-mapped files, network sockets, and programmed interval timers. The system calls usually block the processes that issue them, but nonblocking and asynchronous calls are used by the kernel itself and by applications that must not sleep while waiting for an I/O operation to complete.  </li> <li>The kernel's I/O subsystem provides numerous services. Among these are I/O scheduling, buffering, caching, spooling, device reservation, error handling. Another service, name translation, makes the connections between hardware devices and the symbolic file names used by applications. It involves several levels of mapping that translate from character-string names, to specific device drivers and device addresses, and then to physical addresses of I/O ports or bus controllers. This mapping may occur within the file-system name space, as it does in UNIX, or in a separate device name space, as it does in MS-DOS.  </li> <li>STREAMS is an implementation and methodology that provides a framework for a modular and incremental approach to writing device drivers and network protocols. Through STREAMS, drivers can be stacked, with data passing through them sequentially and bidirectionally for processing.  </li> <li>I/O system calls are costly in terms of CPU consumption because of the many layers of software between a physical device and an application. These layers imply overhead from several sources: context switching to cross the kernel's protection boundary, signal and interrupt handling to service the I/O devices, and the load on the CPU and memory system to copy data between kernel buffers and application space.  </li> </ul>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#13-mass-storage-structure","title":"13 Mass-Storage Structure","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#131-introduction","title":"13.1 Introduction","text":"<p>hard disk drive (HDD): A secondary storage device based on mechanical components, including spinning magnetic media platters and moving read-write heads.</p> <p>nonvolatile memory (NVM): Persistent storage based on circuits and electric charges.</p> <p>platter: An HDD component that has a magnetic media layer for holding charges.</p> <p>disk arm: An HDD component that holds the read-write head and moves over cylinders of platters.</p> <p>track: On an HDD platter, the medium that is under the read-write head during a rotation of the platter.</p> <p>sectors: On an HDD platter, a fixed-size section of a track.</p> <p>cylinder: On an HDD, the set of tracks under the read-write heads on all platters in the device.</p> <p>transfer rate: The rate at which data flows.</p> <p>positioning time: On an HDD, the time it takes the read-write head to position over the desired track.</p> <p>seek time: On an HDD, the time it takes the read-write head to position over the desired cylinder.</p> <p>rotational latency: On an HDD, the time it takes the read-write head, once over the desired cylinder, to access the desired track.</p> <p>head crash: On an HDD, a mechanical problem involving the read-write head touching a platter.</p> <p>effective transfer rate: The actual, measured transfer rate of data between two devices (such as a computer and a disk drive).</p> <p>solid-state disk: A disk-drive-like storage device that uses flash-memory-based nonvolatile memory.</p> <p>NAND NVM lifespan is not measured in years but in Drive Writes Per Day (DWPD)  </p> <p>USB drive: Nonvolatile memory in the form of a device that plugs into a USB port.</p> <p>flash translation layer (FTL): For nonvolatile memory, a table that tracks currently valid blocks.</p> <p>garbage collection: In general, recovery of space containing no-longer-valid data.</p> <p>over-provisioning: In non-volatile memory, space set aside (about 20%) for data writes that is not counted in the device free space.</p> <p>wear leveling: In nonvolatile memory, the effort to select all NAND cells over time as write targets to avoid premature media failure due to wearing out a subset of cells.</p> <p>RAM drives: Sections of a system's DRAM presented to the rest of the system as if they were secondary storage devices.</p> <p>magnetic tape: A magnetic media storage device consisting of magnetic tape spooled on reels and passing over a read-write head. Used mostly for backups.</p> <p>I/O bus: A physical connection of an I/O device to a computer system.</p> <p>advanced technology attachment (ATA): An older-generation I/O bus.</p> <p>eSATA: A type of I/O bus.</p> <p>serial-attached SCSI (SAS): A common type of I/O bus.</p> <p>universal serial bus (USB): A type of I/O bus.</p> <p>fibre channel (FC): A type of storage I/O bus used in data centers to connect computers to storage arrays. A storage-attachment network.</p> <p>NVM express (NVMe): A high-speed I/O bus for NVM storage.</p> <p>controller: A special processor that manages I/O devices.</p> <p>host bus adapter (HBA): A device controller installed in a host bus port to allow connection of one or more devices to the host.</p> <p>host controller: The I/O-managing processors within a computer (e.g., inside a host bus adapter).</p> <p>device controller: The I/O managing processor within a device.</p> <p>logical blocks: Logical addresses used to access blocks on storage devices.</p> <p>constant linear velocity (CLV): A device-recording method that keeps a constant density of bits per track by varying the rotational speed of the medium.</p> <p>constant angular velocity (CAV): A device-recording method in which the medium spins at a constant velocity and the bit density decreases from inner to outer tracks.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#132-storage-device-management","title":"13.2 Storage Device Management","text":"<p>low-level formatting: The initialization of a storage medium in preparation for its use as a computer storage device.</p> <p>physical formatting: The initialization of a storage medium in preparation for its use as a computer storage device.</p> <p>partition: Logical segregation of storage space into multiple area; e.g., on HDDs, creating several groups of contiguous cylinders from the devices' full set of cylinders.</p> <p>mounting: Making a file system available for use by logically attaching it to the root file system.</p> <p>volume: A container of storage; frequently, a device containing a mountable file system (including a file containing an image of the contents of a device).</p> <p>logical formatting: The creation of a file system in a volume to ready it for use.</p> <p>cluster: In Windows storage, a power-of-2 number of disk sectors collected for I/O optimization.</p> <p>raw disk: Direct access to a secondary storage device as an array of blocks with no file system.</p> <p>bootstrap: The set of steps taken at computer power-on to bring the system to full operation. - The default Linux bootstrap loader is grub2  </p> <p>boot disk: A disk that has a boot partition and a kernel to load to boot the system. A device that has a boot partition and can store an operating system for booting the computer.</p> <p>system disk: A storage device that has a boot partition and can store an operating system and other information for booting the computer.</p> <p>boot partition: A storage device partition containing an executable operating system.</p> <p>master boot record (MBR): Windows boot code, stored in the first sector of a boot partition.</p> <p>Booting begins by running code that is resident in the system's firmware. This code directs the system to read the boot code from the MBR.  </p> <p>boot sector: The first sector of a Windows boot device, containing the bootstrap code.</p> <p>bad block: An unusable sector on an HDD.</p> <p>sector sparing or (forwarding): The replacement of an unusable HDD sector with another sector at some other location on the device.</p> <p>Sector sparing is a technique for managing bad blocks that maps a bad sector to a different sector.  </p> <p>sector slipping: The renaming of sectors to avoid using a bad sector.</p> <p>Device I/O is done via blocks, but file system I/O is done via clusters</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#133-swap-space-management","title":"13.3 Swap-Space management","text":"<p>swap-space management: The low-level operating-system task of managing space on secondary storage for use in swapping and paging.</p> <p>raw partition: A partition within a storage device not containing a file system.</p> <p>anonymous memory: Memory not associated with a file. Pages not associated with a file, if dirty and paged out, must not lose their contents and are stored in swap space as anonymous memory.</p> <p>page slot: In Linux swap-space management, a part of the data structure tracking swap-space use.</p> <p>swap map: In Linux swap-space management, a part of the data structure tracking swap-space use.  </p> <p>A swap space can reside in one of two places: it can be carved out of the normal file system, or it can be in a separate partition.  </p> <p>Rather than swapping entire processes, modern operating systems now swap pages belonging to processes. Swapping works in conjunction with virtual memeory techniques. Some systems allow for multiple swap spaces (disks).  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#134-storage-attachment","title":"13.4 Storage Attachment","text":"<p>host-attached storage: Storage accessed through local I/O ports (directly attached to a computer, rather than across a network or SAN).</p> <p>fibre channel (FC): A type of storage I/O bus used in data centers to connect computers to storage arrays. A storage-attachment network.</p> <p>network-attached storage (NAS): Storage accessed from a computer over a network.</p> <p>iSCSI: The protocol used to communicate with SCSI devices; used across a network for more distant access.</p> <p>cloud storage: Storage accessed from a computer over a network to a distant, shared resource data center.</p> <p>storage-area network (SAN): A local-area storage network allowing multiple computers to connect to one or more storage devices. - using storage protocols rather than networking protocols  </p> <p>InfiniBand (IB): A high-speed network communications link.</p> <p>Clients access network-attached storage via a remote-procedure-call interface such as NFS for UNIX and Linux systems or CIFS for Windows machines.   </p> <p>Whereas NFS and CIFS present a file system and send parts of files across the network, iSCSI sends logical blocks across the network and leaves it to the client to use the blocks directly or create a file system with them.  </p> <p>One drawback of network-attached storage systems is that the storage I/O operations consume bandwidth on the data network, thereby increasing the latency of network communication.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#14-file-system-implementation-ch-14-silberschatz","title":"14 File-System Implementation (CH 14 Silberschatz)","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#141-file-system-structure","title":"14.1 File-system structure","text":"<p>block: A self-contained unit of work. The smallest physical storage device storage unit, typically 512B or 4KB. In the Grand Central Dispatch Apple OS scheduler, a language extension that allows designation of a section of code that can be submitted to dispatch queues.</p> <p>file system: The system used to control data storage and retrieval; provides efficient and convenient access to storage devices by allowing data to be stored, located, and retrieved easily.</p> <p>I/O control: A logical layer of the operating system responsible for controlling I/O, consisting of device drivers and interrupt handlers.</p> <p>basic file system: A logical layer of the operating system responsible for issuing generic commands to the I/O control layer, such as \"read block x,\" and also buffering and caching I/O.</p> <p>file-organization module: A logical layer of the operating system responsible for files and for translation of logical blocks to physical blocks.</p> <p>logical file system: A logical layer of the operating system responsible for file and file-system metadata management; maintains the FCBs.</p> <p>file-control block (FCB): A per-file block that contains all the metadata about a file, such as its access permissions, access dates, and block locations.</p> <p>inode: In many file systems, a per-file data structure holding most of the metadata of the file. The FCB in most UNIX file systems.</p> <p>UNIX file system (UFS): An early UNIX file systems; uses inodes for FCB.</p> <p>extended file system: The most common class of Linux file systems, with ext3 and ext4 being the most commonly used file system types.</p> <p>I/O control level consists of device drivers, interrupt handlers </p> <p>The risk for code duplication decreases when a layered structure is used for  file-systme implementation  </p> <p>layered design: Each level (in a file system) in the design uses the features of lower levels to create new features for use by higher levels.</p> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#142-file-system-operation","title":"14.2 File-system operation","text":"<p>boot control block: A storage block of data containing information needed by the system to boot from the volume containing the block. - boot block: A block of code stored in a specific location on disk with the instructions to boot the kernel stored on that disk. The UFS boot control block. - partition boot sector: The NTFS boot control block.  </p> <p>volume control block: A per-volume storage block containing data describing the volume. - superblock: The UFS volume control block. - master file table: The NTFS volume control block.  </p> <p>mount table: An in-memory data structure containing information about each mounted volume. It tracks file systems and how they are accessed.</p> <p>system-wide open-file table: A kernel in-memory data structure containing a copy of the FCB of each open file, as well as other information.</p> <p>per-process open-file table: A kernel in-memory per-process data structure containing pointers to the system-wide open-file table, as well as other information, for all files the process has open.</p> <p>file descriptor (fd): UNIX open-file pointer, created and returned to a process when it opens a file.</p> <p>file handle: Windows name for the open-file file descriptor.  </p> <p>Typical file control block contains: - file permissions - file dates (create, access, write) - file owner, group, ACL - file size - file data blocks or pointers to file data blocks  </p> <p>In-memory file structure OPEN:  </p> <p> </p> <p>In-memory file structure READ:  </p> <p> </p> <p>A file handle is a pointer to an entry in the per-process file-system table  </p> <p>The system-wide open-file table contains a copy of the file control block of each open file  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#143-efficiency-and-performance","title":"14.3 Efficiency and performance","text":"<p>buffer cache: In file I/O, a cache of blocks used to decrease device I/O.</p> <p>page cache: In file I/O, a cache that uses virtual memory techniques to cache file data as pages rather than file-system-oriented blocks for efficiency.</p> <p>unified virtual memory: In file I/O, the use of page caching for all types of I/O (explicit file system I/O and page fault I/O).</p> <p>unified buffer cache: In file I/O, a cache used for both memory-mapped I/O and direct file I/O.</p> <p>double caching: The problem in which the same data might be in two different caches; solved by a unified buffer cache.</p> <p>synchronous writes: Writes that are stored in the order in which they were issued, are not buffered, and have requesting threads wait for the writes to complete before continuing.</p> <p>asynchronous write: A write that is buffered and written in arbitrary order, with the requesting thread continuing execution after the write is requested.</p> <p>free-behind: Sequential I/O performance optimization that removes a page or block from a buffer as soon as I/O to the next page is requested.</p> <p>read-ahead: Sequential I/O performance optimization that reads and caches several subsequent pages when a read of one page is requested.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#efficiency","title":"Efficiency","text":"<ul> <li>Pre-allocation of file control blocks or inodes on a volume  </li> <li>cluster scheme: improves file-seek and file-transfer performance at the cost of internal fragmentation  </li> </ul>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#performance","title":"Performance","text":"<ul> <li>storage device controllers include local memeory to form an on-board cache for tracks or blocks  </li> <li>buffer cache in main memory  </li> </ul> <p>A unified buffer cache is used for both memory-mapped I/O and I/O read() and wrtie() operations  in a single cache. (This eliminates the need for a page cache by memory-mapped I/O)  </p> <p>Free-behind technique for speeding-up sequential file access is based on:  freeing any page from the buffer with each new page request.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#15-file-system-internals-ch-15-silberschatz","title":"15 File-system Internals (CH 15 Silberschatz)","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#151-partitions-and-mounting","title":"15.1 Partitions and mounting","text":"<p>raw disk: Direct access to a secondary storage device as an array of blocks with no file system.</p> <p>bootstrap loader: The small program that loads the kernel as part of the bootstrap procedure.</p> <p>dual-booted: A term describing a computer that can boot one of two or more installed operating systems.</p> <p>root partition: The storage partition that contains the kernel and the root file system; the one mounted at boot.</p> <p>At boot time, the system cannot interpret the file system format.  </p> <p>When the file system contains more than one bootable partition then:  the system administrator selects which operating system will be booted.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#16-protection-and-security","title":"16 Protection and Security","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#161-security-goals-and-threats","title":"16.1 Security goals and threats","text":"<p>Computer security is the freedom from theft of or damage to hardware, software, or information, and from disruption or misdirection of services.</p> <p>Protection is the set of mechanisms and policies that guarantee computer security, including the confidentiality, integrity, availability, and authenticity of all data and services.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#insider-attacks","title":"Insider attacks","text":"<p>A logic bomb is unauthorized code inserted into the system and executed at a specified time to perform some destructive action. The main use of a logic bomb is for blackmail or an act of revenge.</p> <p>A back door (trapdoor) is a mechanism that bypasses user authentication. Ex: A systems programmer could modify the login utility to accept a specific user without requiring a password, thus permitting unauthorized access to the system at a later time.</p> <p>Information leaking is the disclosure of confidential or secret information by a legitimate user to an unauthorized user. Ex: A user with a high security clearance could down-protect a sensitive file to make the information readable by users without security clearance.</p> <p>Login spoofing is an approach where a legitimate user presents a fake login screen to an unsuspecting user, who unwittingly supplies a valid login name and password to the imposter program. A possible solution to prevent login spoofing is to display the login screen only after the user has typed in a special character sequence that automatically invokes the OS and which a user program cannot intercept (Ex: CTRL-ALT-DEL).</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#exploiting-human-weaknesses","title":"Exploiting human weaknesses","text":"<p>A Trojan horse is a program that appears to provide a useful service but also contains a hidden function intended to violate computer security.</p> <p>A virus is a piece of executable code that embeds itself into legitimate programs and copies itself to other programs and systems with the intention of causing harm. A Trojan horse attack is a common way for a virus to enter into a system as part of a service program downloaded by a user from the Internet.  </p> <p>To avoid detection, a virus may employ code compression to maintain the original program length, which is checked by the antivirus software. A more sophisticated virus also employs encryption and various forms of self-mutations that do not change the virus' functionality but prevent the virus' identification in the database.  </p> <p>Viruses:  </p> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#exploit-system-weaknesses","title":"Exploit system weaknesses","text":"<p>A buffer overflow attack is an intrusion technique that exploits the fact that many programs do not check for array overflow, allowing an attacker to overwrite portions of memory beyond the legitimate scope of an input buffer.   </p> <p>A worm is an unauthorized program, which exploits one or more systems weaknesses to spawn copies of itself on other systems via computer networks. The typical objective of a worm is to cause harm to the system by destroying information or causing denial of service. A buffer overflow attack is a common approach for a worm to enter a system.  </p> <p>A buffer overflow allowing a worm to attack:  </p> <p> </p> <ol> <li>A program starts executing the function main(). Main's local variables and input parameters are kept in main's stack frame.  </li> <li>When main() invokes a function f(), a new stack frame is allocated.  </li> <li>The new stack frame contains the return address to main(), f's local variables, and a buffer for input parameters.  </li> <li>The function f() reads a character string from the user terminal using the library function gets(B, ...). The input string, a...b...c..., is copied into the buffer B.  </li> <li>Since the gets function does not check the size of the input string, a call using a long, carefully crafted string may exceed the buffer length and overwrite the local variables and also the return address.  </li> <li>When f() exists, the modified return address does not transfer control back to main() but to an arbitrary memory location chosen by the attacker.  </li> <li>The input string a...f... could be structured as executable code, representing a malicious program (ex: a worm).  </li> <li>The modified return address, g..., could be the starting address of the worm. Thus the return from f() would trigger the worm's execution.  </li> </ol> <p>A user is likely to be tricked into revealing personal data using a Trojan horse.  </p> <p>A terrorist attack leading to widespread destruction of information and service denial is most likely the result of a buffer overflow attack. A buffer overflow attack aims at gaining control over the entire system, which then allows unlimited acts of damage.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#confining-mobile-code","title":"Confining mobile code","text":"<p>One effective method to guard against unauthorized activities is interpretation. The imported code is not executed directly and thus all actions can be verified by the interpreter.  </p> <p>Another approach is sandboxing. A sandbox is a small area of memory within which a program may execute and which guarantees that the program cannot access and jump to any location outside of the designated area.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#162-user-authentication","title":"16.2 User Authentication","text":"<p>User authentication is the act of verifying the identity of a person who wishes to connect to a computer or a network. User authentication can be based on: - The knowledge of some information (ex: a password). - The possession of some artifact (ex: a smart card). - A physical characteristic or behavior of the person (ex: a fingerprint or a signature).</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#protecting-ndividual-passwords","title":"Protecting ndividual passwords","text":"<ul> <li>One-time passwords  <ul> <li>Smart cards generate unlimited one-time passwords  </li> </ul> </li> <li>One-way hash functions  </li> <li>Challenge-response: dialogue between the user and the system.  </li> </ul> <p>In a biometric user authentication system: - 0.3 is the highest possible threshold for accepting all genuine requests. - 0.5 is the lowest possible threshold to guarantee that no imposter attempt is accepted.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#163-copy-on-write","title":"16.3 Copy-on-write","text":"<p>copy-on-write: Generally, the practice by which any write causes the data to first be copied and then modified, rather than overwritten. In virtual memory, on a write attempt to a shared page, the page is first copied, and the write is made to that copy.</p> <p> </p> <p>virtual memory fork: The vfork() system call, which forks a child process, suspends the parent, and lets the child share the parent's address space for both read and write operations (changes are visible to the parent). -  vfork() must be used with caution to ensure that the child process does not modify the address space of the parent  </p> <p>copy-on-write allows the parent and child processes to initially share the same pages, but when either process modifies a page, a copy of the shared page is created.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#164-role-based-access-control","title":"16.4 Role-based access control","text":"<p>role-based access control (RBAC): A method of access control in which roles rather than users have access rights; applies the principle of least privilege to the protection of operating systems.</p> <p>role: In RBAC, a named set of privileges that can be available to a user.</p> <p>Users can take roles based on passwords assigned to the roles.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#165-mandatory-access-control","title":"16.5 Mandatory Access Control","text":"<p>discretionary access control (DAC): Optional, as opposed to mandatory, access control. - access is controlled based on the identities of individual users or groups - set by chmod, chown, and chgrp in UNIX - Weaknesses:     - owner can set or modify its permissions     - unlimited access allowed for root or admin user </p> <p>mandatory access control (MAC): Access control settings enforced in the form of system policy. - root user cannot modify  </p> <p>labels: In mandatory access control, identifiers assigned to objects and/or subjects. The label is checked by the operating system when an operation is requested to determine if it is allowed. - Consider an example of labels ordered according to level of privilege: \"unclassified,\" \"secret,\" and \"top secret.\"  </p> <p>Root user cannot modify mandatory access  </p> <p>MAC cannot work without labels  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#166-access-control","title":"16.6 Access Control","text":"<p>Access rights: - r = read - w = write - x = execute - o = owner / creator of object  </p> <p>A protection domain is a set of pairs , where rights specify what operations a process may perform on the object. Ex:  means that file1 may be read or executed but not modified. <p>An access matrix is a representation of protection domains, where each row corresponds to one domain Di, each column corresponds to one object Oi, and the intersection of the row and the column records the rights that a process in domain Di has with respect to the object Oi).  </p> <p>Every process is associated with one domain at a time but the domain may change as the process executes, which dynamically changes the set of objects the process may access.</p> <p>An access list (AL) associated with an object O contains entries of the form (D, rights), where rights specify what operations a process in domain D may apply to object O. - each request requires a search of the potentially long AL for a match  </p> <p>A capability list (CL) associated with a domain D contents entries of the form (O, rights), where rights specify what operations a process in domain D may apply to object O. - the possession of a capability is sufficient as an authorization to perform operations - difficult to revoke rights  </p> <p> </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#167-secure-communication","title":"16.7 Secure Communication","text":"<p>Cryptography is a technique that allows a sender to transform plaintext into a ciphertext, which the receiver can transform back to the original plaintext  </p> <p>Public-key cryptography (asymmetric cryptography) uses different keys for encryption and decryption. The encryption key is made public while the decryption key is kept private. The decryption key cannot be derived from the encryption key, and vice versa. - RSA  </p> <p>A message authentication code (MAC), is a short bit string attached to a message and used to confirm that the message came from the stated sender and has not been modified in transit. Thus the MAC protects both the message's data integrity as well as the sender's authenticity. To prevent an attacker from replaying a captured message at a later time, a timestamp or a sequence number can be attached to, and encrypted along with, the plaintext when generating the MAC.  </p> <p>Without a timestamp or a sequence number, a MAC cannot detect a reply of an older valid message.  </p> <p>Unfortunately, public-key cryptography is computationally very intensive and thus unsuitable for the encryption of large documents. A digital signature is a bit string that uses public-key cryptography to undeniably link a document to the producer and guarantees that the document has not been altered in any way.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#168-the-security-problem","title":"16.8 The security problem","text":"<p>masquerading: A practice in which a participant in a communication pretends to be someone else (another host or another person).</p> <p>Man-in-the-middle attacks require masquerading  </p> <p>session hijacking: The interception of a communication.</p> <p>privilege escalation: The enabling of more privileges than an entity (process, system, person) should have.  </p> <p>attack surface: The sum of the methods available to attack a system (e.g., all of the network ports that are open, plus physical access).  </p> <p>threat: The potential for a security violation.  </p> <p>secure: The state of a system whose resources are used and accessed as intended under all circumstances.  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#169-goals-of-protection","title":"16.9 Goals of protection","text":"<p>Mechanisms are distinct from policies. Mechanisms determine how something will be done; policies decide what will be done.</p> <p>The role of protection in a computer system is to provide a mechanism for the enforcement of the policies governing resource use</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#1610-principles-of-protection","title":"16.10 Principles of protection","text":"<p>principle of least privilege: A design principle stating that every program and every privileged user of the system should operate using the least amount of privilege necessary to complete the job.</p> <p>permissions: An entity's access rights to an object (e.g., a user's access rights to a file).</p> <p>compartmentalization: The process of protecting each system component through the use of specific permissions and access restrictions.</p> <p>audit trail: The collection of activities in a log for monitoring or review.</p> <p>defense in depth: The theory that more layers of defense provide stronger defense than fewer layers.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#1611-protection-rings","title":"16.11 Protection Rings","text":"<p>hypervisor: The computer function that manages the virtual machine; also called a virtual machine manager (VMM).</p> <p>TrustZone (TZ): ARM processor implementation of the most secure protection ring.</p> <p>secure monitor call (SMC): An ARM processor special instruction that can be used by the kernel to request services from the TrustZone.  </p> <p>The kernel, by definition, is a trusted and privileged component and therefore must run with a higher level of privileges than user processes.  </p> <p>Bell-LaPadula model of separation with protection rings  </p> <p> </p> <p>In order to return to a higher privilege level, code usually calls a special instruction, sometimes referred to as a gate, which provides a portal between rings.</p> <p>Another way of ending up in a more privileged ring is on the occurrence of a processor trap or an interrupt.  </p> <p>Privilege separation requires a hardware support.</p> <p>When the system boots, it boots to the highest privilege level.  </p> <p>What most privileged execution environment has exclusive access to hardware-backed cryptographic features: TrustZone  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#1612-domain-of-protection","title":"16.12 Domain of protection","text":"<p>hardware objects: The CPU, memory devices, input/output (I/O) devices, and any other physical components that are part of a computer</p> <p>software objects: The software components that make up a computer or device (files, programs, semaphores, etc.).</p> <p>need-to-know principle: The principle that only those resources currently needed should be available to use at a given time.</p> <p>protection domain: In protection, a set of resources that a process may access. In virtualization, a virtual machine manager creates a protection domain for each guest to inform the CPU of which physical memory pages belong to that guest.</p> <p>access right: The ability to execute an operation on an object.</p> <p>domain switching: The mechanism for switching dynamic domains.</p> <p>Different domains: - each user can be a domain - each process can be a domain, contacting another process   - each procedure can be a domain, making a procedure call   </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#ntfs-file-system","title":"NTFS file system","text":"<ul> <li>security descriptors  </li> <li>encryption  </li> <li>disk quotas  </li> <li>rich metadata  </li> <li>used with Cluster Shared Volumes (CSV) to provide continuously available volumes that can be accessed simultaneously from multiple nodes of a failover cluster.  </li> </ul>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#incread-reliability","title":"Incread Reliability","text":"<p>NTFS uses its log file and checkpoint information to restore the consistency of the file system when the computer is restarted after a system failure.  </p> <p>Self-healing NTFS: NTFS continuously monitors and corrects transient corruption issues in the background without taking the volume offline.  </p> <p>Chkdsk utility: Windows server 2012 and later, scans and analyzes the drive while the volume is online, limiting time offline to the time required to restore data consistency on the volume.</p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#increased-security","title":"Increased Security","text":"<ul> <li>Access Control List (ACL)-based security for files and folders   </li> <li>Support for BitLocker Drive Encryption  <ul> <li>BitLocker provides support for device encryption on x86 and x64-based computers with a Trusted Platform Module (TPM)  </li> <li>prevents malicious users from accessing a drive by physically removing it from the PC and installing it on a different one.  </li> </ul> </li> </ul>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#support-for-large-volumes","title":"Support for large volumes","text":"<p>NTFS can support volumes as large as 8 petabytes on Windows server 2019  </p>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#maximum-file-name-path","title":"Maximum file name path","text":"<ul> <li>Support for long file names, with backward compatability  </li> <li>Support for extended-length paths  </li> <li>Clustered storage  </li> </ul>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#linux-file-system","title":"Linux file system","text":""},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#ext2","title":"Ext2","text":"<ul> <li>does not have journaling feature  </li> <li>max file size: 16 GB to 2 TB  </li> <li>OVerall ext2 file system size can be from 2 TB to 32 TB  </li> </ul>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#ext3","title":"Ext3","text":"<ul> <li>Allows journaling  <ul> <li>journaling file system, changes are first recorded in a dedicated area called a journal before they are applied to the main file system.  </li> </ul> </li> <li>There are three types of journaling available in ext3 file system.  <ul> <li>Journal \u2013 Metadata and content are saved in the journal.  </li> <li>Ordered \u2013 Only metadata is saved in the journal. Metadata are journaled only after writing the content to disk. This is the default.  </li> <li>Writeback \u2013 Only metadata is saved in the journal. Metadata might be journaled either before or after the content is written to the disk.  </li> </ul> </li> <li>You can convert a ext2 file system to ext3 file system directly (without backup/restore).  </li> <li>Directory can contain a maximum of 32,000 subdirectories</li> </ul>"},{"location":"WGU_Notes/C191_Operating_Systems/c191_Operating_Systems/#ext4","title":"Ext4","text":"<ul> <li>Maximum individual file size can be from 16 GB to 16 TB  </li> <li>Overall maximum ext4 file system size is 1 EB (exabyte). 1 EB = 1024 PB (petabyte). 1 PB = 1024 TB (terabyte).  </li> <li>Directory can contain a maximum of 64,000 subdirectories</li> <li>You can also mount an existing ext3 fs as ext4 fs (without having to upgrade it).  </li> <li>Option to turn journaling off  </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/","title":"C949 Data Structures I","text":"<p>Java data structure resource: https://opendsa-server.cs.vt.edu/ODSA/Books/CS2/html/index.html</p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#lecture-1-explaining-algorithms","title":"Lecture 1 Explaining Algorithms","text":"<p>What is an Algorithm: a finite set of instructions carried out in a specific order to perform a particular task  </p> <p>Input =&gt; Algorithm =&gt; Output </p> <p>Characteristics of an Algorithm:</p> <ul> <li> <p>Unambiguity  </p> </li> <li> <p>Finiteness  </p> </li> <li> <p>Well-defined inputs  </p> </li> <li> <p>Language independent  </p> </li> <li> <p>Effectiveness and feasibility  </p> </li> <li> <p>Well-defined outputs  </p> </li> </ul> <p>Factors of an Algorithm:  </p> <ul> <li> <p>Modularity: Broken down into small modules  </p> </li> <li> <p>Correctness </p> </li> <li> <p>Maintainability: no significant changes are required when redefining the algorithm  </p> </li> <li> <p>Functionality: Uses logical steps to solve a real-world problem  </p> </li> <li> <p>Robustness: Ability to define problem clearly  </p> </li> <li> <p>User-Friendly: Easily explained  </p> </li> <li> <p>Simplicity: Simple to understand  </p> </li> <li> <p>Extensibility: Extensible for other designers to use  </p> </li> </ul> <p>Examples of Algorithms:  </p> <ul> <li> <p>Brute-Force Algorithm</p> </li> <li> <p>Searching  </p> </li> <li> <p>Sorting  </p> </li> <li> <p>Encryption  </p> </li> <li> <p>Hashing  </p> </li> <li> <p>Recursive  </p> </li> <li> <p>Divide and Conquer  </p> </li> <li> <p>Greedy Algorithm  </p> </li> </ul> <p>Time Complexity:  </p> <ul> <li> <p>The amount of time required to complete an algorithm.  </p> </li> <li> <p>Big O notation is used to represent an algorithm's time complexity  </p> </li> <li> <p>Calculated primarily by counting the number of steps required to complete the  execution  </p> </li> </ul> <p>Space Complexity:  </p> <ul> <li> <p>The amount of space an algorithm requires to solve a problem and produce an output  </p> </li> <li> <p>Expressed in Big O notation  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#big-o-o1","title":"Big O - O(1)","text":"<ul> <li> <p>This is the fastest. Looking for any record is equal in time to looking for any  other record  </p> </li> <li> <p>Hash table is an example  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#big-o-olog-n","title":"Big O - O(log n)","text":"<ul> <li> <p>Binary Search: starts in the middle. If that is not the result, the search repeats  on the remaining left/right sublist (depending on if the middle element was greater  than or less than the request). The process repeats until the number is found  </p> </li> <li> <p>Binary search uses a \"divide and conquer\" approach and requires sorted data  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#big-o-on","title":"Big O - O(n)","text":"<ul> <li>Linear search. Works on sorted and unsorted data. Starts from the beginning of  a list and checks each element until the search key is found or the end of the  list is reached.  </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#big-o-on-log-n","title":"Big O - O(n log n)","text":"<p>You have a deck of cards and whant to organize them in ascending order. Let's say  you follow a specific strategy:  </p> <p>Split the deck into two halves, sort each half separately, and merge the halves into  a single, sorted deck  </p> <p>Divide (log n): Each time you divide the deck, you reduce the problem size by  half  </p> <p>Sort (n): When you sort each half, you're going through each card once. If  there are n cards, sorting each half takes O(n) time.  </p> <p>Merge (log n): After sorting, merging the two halves involves looking at each  card once. Again, since you're doing this log n times, it's O(n log n).  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#big-o-on2","title":"Big O - O(n^2)","text":"<ul> <li>Quadratic ratio  </li> </ul> <p>Imagine you have a deck of cards and want to arrange them in ascending order.  Here's how it works:  </p> <ul> <li> <p>Compare and Swap: Go through the deck repeatedly, comparing the value of each  card with the one next to it. IF a card's value is greater than the one next to it, swap their positions  </p> </li> <li> <p>Repeat: Keep going through the deck, comparing and swapping, until you make a pass through the entire deck without needing to swap any cards.  </p> </li> <li> <p>Continue: Repeat this process until the entire deck is sorted.  </p> </li> </ul> <p>When you multiply these steps together, you get O(n^2). The time it takes to sort  the deck grows quadratically with the number of cards in the deck  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#lecture-2-data-structures","title":"Lecture 2 Data Structures","text":"<p>Data Structures: a way of organizing, storing, and performing operations on  data. Operations performed on a data structure include accessing or updating  stored data, searching for specific data, inserting new data, and removing data.  </p> <p>Record: like a model in C#, represents an object with properties  </p> <p>Array: In python, it is imported.</p> <ul> <li> <p>Ordered/Indexed  </p> </li> <li> <p>Mutable  </p> </li> <li> <p>Duplicates are allowed  </p> </li> <li> <p>Must be homogenous  </p> </li> </ul> <p>Linked List: Think of it like a music playlist. You add pointers to the songs  to determine the order of the playlist.  It is faster to add items to the linked  list.  It is slower to search.  </p> <ul> <li> <p>Each node has data and pointer to next node  </p> </li> <li> <p>First (head) and last (tail) defined  </p> </li> <li> <p>Traversed from head to tail  </p> </li> <li> <p>Not indexed  </p> </li> <li> <p>Singly Linked List doesn't have memory of the previous record.</p> </li> <li> <p>Doubly Linked List has pointers from head to tail AND tail to head  </p> </li> </ul> <p>Binary Tree</p> <ul> <li> <p>Each node has up to two children, known as a left child and right child  </p> </li> <li> <p>Leaf: a tree node with no children  </p> </li> <li> <p>Internal node: A node with at least one child.  </p> </li> <li> <p>Parent: A node with a child is said to be that child's parent  </p> </li> <li> <p>Root: The one tree node with no parent (the \"top\" node)  </p> </li> </ul> <p>Hash Table: very fast. Think of a dictionary  </p> <ul> <li> <p>Stores unordered items by mapping (or hashing) each item to a location in an array  </p> </li> <li> <p>Each element is a \"bucket\"  </p> </li> <li> <p>Items use a key to compute bucket value  </p> </li> </ul> <p>Heap: scenario would be a priority queue for Task Scheduling </p> <ul> <li> <p>Root is always highest number (max heap)  </p> </li> <li> <p>Node is always greater than child (max heap)  </p> </li> <li> <p>New items percolate to proper spot  </p> </li> <li> <p>Heapification - moving nodes in the tree around so that the parent is always  the highest value  </p> </li> </ul> <p>Graph: Think of navigation with Google Maps  </p> <ul> <li> <p>Vertex (or node) represents an item in a graph  </p> </li> <li> <p>An edge represents a connection between two vertices  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#lecture-3-abstract-data-types","title":"Lecture 3 Abstract Data Types","text":"<p>Abstract Data Types: a data type described by predefined user operations  without explaination. EX: \"insert data at rear\" or \"add to front\"  </p> <ul> <li> <p>List, array, linked lists are a common ADT  </p> </li> <li> <p>Abstraction means to have a user interact with an item at a high-level,  with lower-level internal details hidden from the user  </p> </li> <li> <p>ADTs support abstraction by hiding the underlying implementation details and  providing a well-defined set of operations  </p> </li> <li> <p>Allow programmers to focus on higher level operations  </p> </li> </ul> <p>Common ADTs: </p> <ul> <li> <p>List</p> </li> <li> <p>Dynamic Array  </p> </li> <li> <p>Stack  </p> </li> <li> <p>Queue  </p> </li> <li> <p>Deque  </p> </li> <li> <p>Bag  </p> </li> <li> <p>Set  </p> </li> <li> <p>Priority Queue  </p> </li> <li> <p>Dicionary (map)  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#list","title":"List","text":"<ul> <li>Holds ordered data, is indexed. Begin at 0. Underlying structure may be an  Array or Linked List  </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#dynamic-array","title":"Dynamic Array","text":"<ul> <li> <p>holding ordered data and allowing indexed access  </p> </li> <li> <p>Don't have to manually resize the array  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#stack","title":"Stack","text":"<ul> <li> <p>Can only be added or removed to the top of the stack. </p> </li> <li> <p>Underlying could be Linked List  </p> </li> <li> <p>Last in First out (LiFi)  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#queue","title":"Queue","text":"<ul> <li> <p>First in, first out (FiFo)  </p> </li> <li> <p>Underlying is Linked List  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#deque","title":"Deque","text":"<ul> <li> <p>Double ended Queue  </p> </li> <li> <p>Can remove from the front and back  </p> </li> <li> <p>Underlying is Linked List  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#set","title":"Set","text":"<ul> <li> <p>Unordered with No duplicates  </p> </li> <li> <p>Underlying Array, linked list</p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#bag","title":"Bag","text":"<ul> <li> <p>Allows duplicates, unordered</p> </li> <li> <p>Underlying Binary tree, hash table  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#priority-queue","title":"Priority Queue","text":"<ul> <li> <p>Putting higher priority to the front  </p> </li> <li> <p>Underlying is the Heap  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#dictionary","title":"Dictionary","text":"<ul> <li> <p>Associates a word with a definition (key value pair)  </p> </li> <li> <p>Underlying is Hash, binary search tree  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#lecture-4-trees-heaps-and-hash-tables","title":"Lecture 4 Trees, HEaps, and Hash Tables","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#binary-tree-basics","title":"Binary Tree Basics","text":"<ul> <li> <p>At most have two children (binary) known as left and right child  </p> </li> <li> <p>Root: the top node  </p> </li> <li> <p>Internal node: A node with atleast one child, including the root.  </p> </li> <li> <p>No children makes the node a leaf </p> </li> <li> <p>Parent: a node with a child is the parent.  Ancestors include the  node's parent, the parent's parent and up to the root.  </p> </li> <li> <p>edge: the link from a node to a child  </p> </li> <li> <p>Depth: number of edges on the path from the root to the node. The root node thus has depth 0.  </p> </li> <li> <p>Tree level: all nodes with the same depth  </p> </li> <li> <p>Tree Height: the largest depth of any node. A tree with just one node  has a height of 0.  </p> </li> <li> <p>A binary tree is full if every node contains 0 or 2 children  </p> </li> <li> <p>A binary tree is complete if all levels, except possibly the last level, contain all possible nodes and all nodes in the last level are as far left as  possible  </p> </li> <li> <p>A binary tree is perfect, if all internal nodes have 2 children and all  leaf nodes are the same level.  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#binary-search-tree","title":"Binary Search Tree","text":"<p>Binary search tree (BST): has an ordering properyt that any node's left  subtree keys are less than or equal to the node's key, and the right subtree's  keys are greater than or equal to the node's key.  </p> <p></p> <ul> <li> <p>Binary search trees are fast.  Searching a BST in the worst case scenario requires  H + 1 comparisons, meaning O(H) comparisons, where H is the tree height  </p> </li> <li> <p>A BST search may be as small as O(log n)  </p> </li> <li> <p>Thry to keep the tree balanced for best search speed  </p> </li> <li> <p>A ** Tree traversal** algorithm visits all nodes in the tree once and performs  an operation on each node  </p> </li> <li> <p>An inorder traversal visits all nodes in a BST from smallest to largest,  which is useful for example to print the tree's nodes in sorted order  </p> <ul> <li>Starting from the root, the algorithm recursively prints the left subtree, the  current node, and the right subtree  </li> </ul> </li> </ul> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#heaps","title":"Heaps","text":"<ul> <li> <p>Used when application requires fast access to and removal of the maximum item in  a changing set of items  </p> </li> <li> <p>Heaps keep the highest priority on top but does not fully sort the lower nodes  </p> </li> <li> <p>A max-heap is a complete binary tree that maintains the simple property that  a node's key is greater than or equal to the node's children's key  </p> </li> <li> <p>Therefore, a max-heap's root always has the maximum key in the entire tree  </p> </li> <li> <p>Heapification: The process in which an array or binary tree is reshaped  into a Heap data structure. Since leaf nodes already satisfy the max heap property  heapifying to build a max-heap is achieved by percolating down on every non-leaf  node in reverse order. A heap must be a complete binary tree.  </p> </li> <li> <p>Percolating: ?  </p> </li> <li> <p>Heapsort: </p> <ul> <li> <p>Heapify the array into a max-heap  </p> </li> <li> <p>Initialize an end index value to the size of array minus 1  </p> </li> <li> <p>Repeatedly remove the maximum value, stores @ the end index  </p> </li> <li> <p>Decrement end index  </p> </li> <li> <p>Repeat until the end index is 0  </p> </li> </ul> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#hash-table","title":"Hash Table","text":"<ul> <li> <p>Has table: sotres unordered items by mapping (or handling) each item to a  location in an array  </p> </li> <li> <p>Each element is a bucket  </p> </li> <li> <p>In a hash table, an item's key is the value used to map to an index  </p> </li> <li> <p>Keys are ideally unique  </p> </li> <li> <p>A hash function computes a bucket index from the item's key. O(1)  </p> <ul> <li> <p>Collisions: occurs when an item being inserted into a hash table maps  to the same bucket as an existing item in teh hash table  </p> </li> <li> <p>Chaining: each bucket has a list of items  </p> </li> <li> <p>Probing: looks for an empty bucket elsewhere  </p> </li> <li> <p>An empty-since-start bucket has been empty since the hash table was  created  </p> </li> <li> <p>An empty-after-removal bucket had an item removed that caused the bucket  to now be empty  </p> </li> </ul> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#lecture-5-graphs","title":"Lecture 5 Graphs","text":"<p>Graphs: a data structure for representing connections among items  </p> <ul> <li> <p>Computer networks  </p> </li> <li> <p>Product recommendations  </p> </li> <li> <p>Social networks  </p> </li> </ul> <p>They are often used to represent a geographic map  </p> <p>Components:  </p> <ul> <li> <p>Vertices (nodes)  </p> </li> <li> <p>Edges: what connects nodes. Nodes are adjacent, connected by an edge    </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#terminology","title":"Terminology","text":"<ul> <li> <p>Path: Sequence of edges leading from source to target  </p> </li> <li> <p>Path Length: Total number of edges in a path  </p> </li> <li> <p>Distance: Number of edges on the shortes path of 2 werticies  </p> </li> <li> <p>Edge Weights: Associates a weight (cost, time, etc.) with each edge. Often represents the length of a travel routes, either in total distance or expected time  </p> </li> <li> <p>Directed Edges: Sequence of directed edges leading from a source to a  destination vertex.  </p> </li> <li> <p>Cycle: a path that starts and ends at the same vertex. A directed graph  is cyclic if the graph contains a cycle, and acyclic if the graph does not contain  a cycle  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#adjacency-list","title":"Adjacency List","text":"<ul> <li>Each vertex has a list of adjacent verticies, each list item representing an edge  </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#searching","title":"Searching","text":"<p>Breadth First Search: traverse a graph by starting at a specific vertex and  visiting the vertex's adjacent vertices before visiting the next closest verticies.  No vertex is re-visited  </p> <p>Depth First Search: traverse a graph by first visiting a specific starting vertex, and then visiting every vertex along each path originating from the starting vertex.  Each path is traversed to the path's end before backtracking.  </p> <p>Dijkstra's Algorithm: Determines the shortest path from a start vertex to each  vertex in a graph.  </p> <ul> <li> <p>For each vertex, Dijkstra's algorithm determines the vertex's distance and predecessor pointer.  </p> </li> <li> <p>distance is the shortest path from the start  </p> </li> <li> <p>The vertex's predecessor pointer points to the previous vertex along the shortest  path.  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#lecture-5-sorting-algorithms","title":"Lecture 5 Sorting Algorithms","text":"<ul> <li>Nested for or while loops will cause the algorithm to be O(n^2)</li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#bubble-sort","title":"Bubble Sort","text":"<ul> <li> <p>Because of the nested loops, bubble sort has a runtime of O(n^2). </p> </li> <li> <p>Bubble sort is often considered impractical for realworld use because many  faster sorting algorithms exist  </p> </li> </ul> <pre><code>BubleSort(numbers, numbersSize) {\n    for (i = 0; i&lt; numbersSize - 1; i++) {\n        for (j = 0; j &lt; numbersSize - i - 1; j++) {\n            if (numbers[j] &gt; numbers[j +1]) {\n                temp = numbers[j]\n                numbers[j] = numbers[j + 1] \n                numbers[j + 1] = temp \n            }\n        }\n    }\n}\n</code></pre>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#selection-sort","title":"Selection Sort","text":"<ul> <li> <p>sorting algorithm that treats the input as two parts, a sorted part and an  unsorted part. It repeatedly finds the lowest value and swaps it with the current element  being examined, moving it from the unsorted part to the end of the sorted part </p> </li> <li> <p>runtime of O(n^2). </p> </li> </ul> <pre><code>for (i = 0; i &lt; numbersSize - 1; ++i) {\n    //Find index of smallest remaining element  \n    indexSmallest = i  \n    for (j = i + 1; j &lt; numbersSize; ++j) {\n        if (numbers[j] &lt; numbers[indexSmallest]) {\n            indexSmallest = j\n        }\n    }\n    //Swap numbers[i] and numbers[indexSmallest] \n    temp = numbers[i]\n    numbers[i] = numbers[indexSmallest]\n    numbers[indexSmallest] = temp\n}\n</code></pre>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#insertion-sort","title":"Insertion Sort","text":"<ul> <li> <p>sorts by treating the input as two parts, sorted and unsorted. It repeatedly  moves the next value from the unsorted part to the sorted part, where it is then moved into the proper location  </p> </li> <li> <p>O(n^2)  </p> </li> </ul> <pre><code>for i in range(1, len(numbers)):\n    j = 1 \n    # Insert numbers[i] into sorted part \n    # stopping once numbers[i] in correct position  \n    while j &gt; 0 and numbers[j] &lt; numbers[j - 1]:\n        # Swap numbers[j] and numbers[j - 1]\n        temp = numbers[j]\n        numbers[j] = numbers[j - 1] \n        numbers[j-1] = temp \n        j = j - 1\n</code></pre>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#quick-sort","title":"Quick Sort","text":"<ul> <li> <p>O(n log n)  </p> </li> <li> <p>repeatedly partitions the input into low and high parts ( each part unsorted),  and then recursively sorts each of those parts. To partition the input, quicksort chooses a pivot to divide the data into low and high parts. The pivot can be any  value within the array being sorted. </p> </li> <li> <p>Once the pivot is chosen, the array is divided into two parts. Items to the left  are less than the pivot, while items to the right are greater.  </p> </li> <li> <p>The values in each partition are not necessarily sorted  </p> </li> <li> <p>Values equal to the pivot may appear in either or both of the partitions  </p> </li> </ul> <pre><code># Main  \n\nnumbers = [ 12, 18, 3, 7, 32, 14, 91, 16, 8, 57]\nprint('UNSORTED:', numbers)\n\nquicksort(numbers, 0, len(numbers)-1)\nprint('SORTED:', numbers)\n</code></pre> <pre><code># Quicksort definition  \n\ndef quicksort(numbers, start_index, end_index):\n    # Only attempt to sort the list segment if there are \n    # at least 2 elements  \n    if end_index &lt;= start_index: \n        return  \n\n    # Partition the list segment  \n    high = partition(numbers, start_index, end_index) \n\n    # Recursively sort the left segment  \n    quicksort(numbers, start_index, high)  \n\n    # Recursively sort the right segment  \n    quicksort(numbers, high + 1, end_index)\n</code></pre> <pre><code># Partition definition  \n\ndef partition(numbers, start_index, end_index): \n    # Select the middle value as the pivot \n    midpoint = start_index _ (end_index - start_index) // 2 \n    pivot = numbers[midpoint]\n\n    # \"low\" and \"high\" start at the ends of the list segment \n    # and move towards each other\n    low = start_index \n    high = end_index  \n\n    done = False  \n    while not done: \n        # Increment Low while numbers{Low} &lt; pivot  \n        while numbers[low] &lt; pivot: \n            low = low + 1 \n\n        # Decrement high while pivot &lt; numbers[high]\n        while pivot &lt; numbers[high]:\n            high = high - 1 \n\n        # If low and high have crossed eachother, the loop \n        # is done. If not, the elements are swapped, low is \n        # incremented and high is decremented  \n        if low &gt;= high:\n            done = True  \n        else: \n            temp = numbers[low]\n            numbers[low] = numbers[high]\n            numbers[high] = temp \n            low = low + 1 \n            high = high - 1 \n    # \"high\" is the last index in the left segment \n    return high\n</code></pre>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#merge","title":"Merge","text":"<ul> <li> <p>O(n log n)  </p> </li> <li> <p>divides a list into two halves, recursively sorts each half, and then merges  the sorted halves to produce a sorted list. The recursive partitioning continues  until a list of one element is reached, as a list of one element is already sorted  </p> </li> </ul> <pre><code># Main  \n\n# Create a list of unsorted values \nnumbers = [61, 76, 19, 4, 94, 32, 27, 83, 58] \n\n# Print unsorted list \nprint('UNSORTED:', numbers) \n\n# Initial call to merge_sort\nmerge_sort(numbers, 0, len(numbers) - 1)\n\n# Print sorted list \nprint('SORTED:', numbers) \n</code></pre> <pre><code># Merge Sort definition \n\ndef merge_sort(numbers, i, k):\n    j = 0\n\n    if i &lt; k: \n        j = (i+ k) // 2 Find the midpoint in the partition \n\n        # Recursively sort left and right partition\n        merge_sort(numbers, i, j)\n        merge_sort(numbers, j + 1, k)\n\n        # Merge left and right partition in sorted order  \n        merge(numbers, i, j, k)\n</code></pre> <pre><code># Merge definition \n\ndef merge(numbers, i, j, k):\n    merge_size = k - i + 1                  # Size of merged partition \n    merged_numbers = [0] * merged_size      # Dynamically allocates temporary array \n                                            # for merged numbers \n    merge_pos = 0                           # Position to insert merged number \n    left_pos = i                            # Initialize left partition position \n    right_pos = j + 1                       # Initialize right partition position \n\n    # Add smallest element from left or right partition to merged numbers  \n    while left_pos &lt;= j and right_pos &lt;=k:\n        if numbers[left_pos] &lt;= numbers[right_pos]:\n            merged_numbers[merge_pos] = numbers[left_pos]\n            left_pos += 1\n        else:\n            merged_numbers[merge_pos] = numbers[right_pos]\n            right_pos += 1\n        merge_pos = merge_pos + 1 \n\n    # If left poartition is not empty, add remaining elements to merged numbers \n    while left_pos &lt;= j:\n        merged_numbers[merge_pos] = numbers[left_pos]\n        left_pos += 1\n        merge_pos +=1\n\n    # If right partition is not empty, add remaining elements to merged numbers \n    while right_pos &lt;= k:\n        merged_numbers[merge_poe] = numbers[right_pos]\n        right_pos = right_pos + 1\n        merge_pos = merge_pos + 1 \n\n    # Copy merge number back to numbers \n    for merge_pos in range(merged_size):\n        numbers[i + merge_pos] = merged_numbers[merge_pos]  \n</code></pre>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#radix-sort","title":"Radix Sort","text":"<ul> <li> <p>O(n)  </p> </li> <li> <p>designed for integers.  The algorithm makes use of a concept called buckets and is a type of bucket sort  </p> </li> <li> <p>Any array of integer values can be subdivided into buckets by using the integer  values' digits. Abucket is a collection of integer values that all share a particular digit value. Ex: Values 57, 97, 77, and 17 all have a 7 as the 1's digit  and would all be placed into bucket 7 when subdividing by the 1's digit  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#zybook","title":"ZyBook","text":"Data structure Description Record A record is the data structure that stores subitems, often called fields, with a name associated with each subitem. Array An array is a data structure that stores an ordered list of items, where each item is directly accessible by a positional index. Linked list A linked list is a data structure that stores an ordered list of items in nodes, where each node stores data and has a pointer to the next node. Binary tree A binary tree is a data structure in which each node stores data and has up to two children, known as a left child and a right child. Hash table A hash table is a data structure that stores unordered items by mapping (or hashing) each item to a location in an array. Heap A max-heap is a tree that maintains the simple property that a node's key is greater than or equal to the node's childrens' keys. A min-heap is a tree that maintains the simple property that a node's key is less than or equal to the node's childrens' keys. Graph A graph is a data structure for representing connections among items, and consists of vertices connected by edges. A vertex represents an item in a graph. An edge represents a connection between two vertices in a graph."},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#12-algorithm-overview","title":"1.2 Algorithm Overview","text":"<p>Algorithm: a set of commands that must be followed for a computer to perform  calculations or other problem-solving operations  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#13-introduction-to-algorithms","title":"1.3 Introduction to algorithms","text":"<ul> <li> <p>An algorithm can be described in English, pseudocode, a programming language,  hardware, etc.  </p> </li> <li> <p>Computational Problem: specifies an input, a question about the input that  can be answered using a computer, and the desired output.  </p> </li> <li> <p>Algorithm efficiency is most commonly measured by the algorithm runtime.  and an efficient algorithm is one whose runtime increases no more than polynomially  with respect to the input size.  </p> </li> <li> <p>NP-complete problems are a set ofproblems for which no known efficient  algorithm exists. NP-complete problems have the following characteristics:  </p> <ul> <li> <p>No efficient algorithm has been found to solve an NP-complete problem  </p> </li> <li> <p>No one has proven that an efficient algorithm to solve an NP-complete  problem is impossible  </p> </li> <li> <p>If an efficient algorithm exists for one NP-complete problem, then all  NP-complete problems can be solved efficiently  </p> </li> </ul> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#14-relation-between-data-structures-and-algorithms","title":"1.4 Relation between data structures and algorithms","text":"<p>Data structures define how data is stored and defines the operations performed  on the data strucutre.</p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#15-abstract-data-types-adt","title":"1.5 Abstract Data Types (ADT)","text":"<p>Abstract Data Type: described by predefined usr operations, such as  \"insert data at rear\", without indicating how each operation is implemented.   </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#common-adts","title":"Common ADTs:","text":"Abstract data type Description Common underlying data structures List A list is an ADT for holding ordered data. Array, linked list Dynamic array    A dynamic array is an ADT for holding ordered data and allowing indexed access. Array Stack A stack is an ADT in which items are only inserted on or removed from the top of a stack. Linked list Queue A queue is an ADT in which items are inserted at the end of the queue and removed from the front of the queue. Linked list Deque A deque (pronounced \"deck\" and short for double-ended queue) is an ADT in which items can be inserted and removed at both the front and back. Linked list Bag A bag is an ADT for storing items in which the order does not matter and duplicate items are allowed. Array, linked list Set A set is an ADT for a collection of distinct items. Binary search tree, hash table Priority queue   A priority queue is a queue where each item has a priority, and items with higher priority are closer to the front of the queue than items with lower priority. Heap Dictionary (Map) A dictionary is an ADT that associates (or maps) keys with values. Hash table, binary search tree"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#16-application-of-adts","title":"1.6 Application of ADTs","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#18-huffman-compression","title":"1.8 Huffman Compression","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#basic-compression","title":"Basic Compression","text":"<p>Compression: transforms the data to use fewer bits. Compressed data uses less  storage and can be communicated faster. The basic idea is to encode frequently  occurring items using fewer bits.  </p> <p>A dictionary can be used to swap the long string for the defined charater in the  dictionary. Like \"01000001\" for the original, meaning \"A\", is changed to \"0\" by  the dictionary, where \"0\" is defined as \"A\". In the dictionary \"G\" = 110, so  01000111 is changed to 110.  </p> <p>A character frequency table is build for an input string. It contains each  distinct character from the input string and each character's number of occurences  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#huffman-coding","title":"Huffman Coding","text":"<p>Huffman coding is a common compression technique that assigns fewer bits to  frequent items, using a binary tree.  </p> <p> </p> <p>Note: For Huffman encoded data, the dictionary must be included along with the compressed data to enable compression.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#building-a-huffman-tree","title":"Building a Huffman Tree","text":"<ul> <li> <p>Leaf nodes have two data members: a character from the input and an integer frequency  for that character  </p> </li> <li> <p>Internal nodes have left and right child nodes.  </p> </li> </ul> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#decoding-huffman","title":"Decoding Huffman","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#19-heuristics","title":"1.9 Heuristics","text":"<p>Heuristic: A technique that willingly accepts a non-optimal or less accurate  solution in order to improve execution speed. Sacrifice accuracy and optimization for speed.  </p> <p> </p> <p>Heuristic algorithm: quickly determines a near optimal or approximate  solution. </p> <p>Self-adjusting Heuristic: modifies a data structure based on how the data  structure is used. Used in a red-black tree or AVL tree. Used to speed up searches  for frequently-searched items.</p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#110-python-heuristics-knapsack","title":"1.10 Python: Heuristics (Knapsack)","text":"<p>The 0-1 knapsack problem imposes the restriction that each item can be added at  most once. A heuristic algorithm to solve the knapsack problem first sorts items  in descending order by value, and then iteratively places the most valuable items  that fit within the remaining space into the knapsack until no more items can be  added.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#111-python-greedy-algorithm","title":"1.11 Python: Greedy algorithm","text":"<p>Greedy algorithm solves a problem by assuming that the optimal choice at a given  moment during the algorithm will also be the optimal choice overall. Greedy algorithms  tend to be efficient, but some may not find the optimal solution.  </p> <p>Works for the knapsack problem and the activity selection problem </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#fractional-knapsack-problem","title":"Fractional Knapsack Problem","text":"<p>Sort items by value to weight ratio, in descending order.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#activity-selection-problem","title":"Activity Selection Problem","text":"<p>Run the python script for 1.11.3 Activity Selection, the optimal result is the  count of how many different activities are scheduled. So three one-hour activities  are considered better than a single four hour activity  </p> <p>The greedy algorithm shown will always produce the optimal result for the activity selection problem  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#112-dynamic-programming","title":"1.12 Dynamic Programming","text":"<p>Dynamic Programming: problem solving technique that splits a problem into  smaller subproblems, computes and stores solutions to subproblems in memory, and  then uses the stored solutions to solve the larger problem.  </p> <p>Look at 1.12.1_fibonacci_recursive_vs_dynamic. The recursive method has a  runtime of O(1.62^N) while the iterative/dynamic method has a runtime of O(N)  </p> <p>Dynamic programming avoids recomputing previously computed results by storing and  reusing such results  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#longest-common-substring","title":"Longest Common Substring","text":"<p>Longest Common Substring algorithm takes 2 strings as input and determines  the longest substring that exits in both strings. It uses dynamic programming. It uses an N x M integer matrix to keep track of matching substrings.  </p> <p>The runtimes of the Longest Common Substring is O(NxM)  </p> <p>A real-world example is finding two common substrings in DNA sequences  </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#lists","title":"Lists","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#21-list-abstract-data-type","title":"2.1 List abstract data type","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#common-operations","title":"Common Operations:","text":"Operation Description Example starting with list: 99, 77 Append(list, x) Inserts x at end of list Append(list, 44), list: 99, 77, 44 Prepend(list, x) Inserts x at start of list Prepend(list, 44), list: 44, 99, 77 InsertAfter(list, w, x) Inserts x after w InsertAfter(list, 99, 44), list: 99, 44, 77 Remove(list, x) Removes x Remove(list, 77), list: 99 Search(list, x) Returns item if found, else returns null Search(list, 99), returns item 99 Search(list, 22), returns null Print(list) Prints list's items in order Print(list) outputs: 99, 77 PrintReverse(list) Prints list's items in reverse order PrintReverse(list) outputs: 77, 99 Sort(list) Sorts the lists items in ascending order list becomes: 77, 99 IsEmpty(list) Returns true if list has no items For list 99, 77, IsEmpty(list) returns false GetLength(list) Returns the number of items in the list GetLength(list) returns 2"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#22-list-data-structure","title":"2.2 List Data Structure","text":"<p>List data structure: will contain the list's head, tail, and information like  list size.  </p> <p>Linked List has an O(N) space complexity. </p> <p>A List space complexity is O(1).</p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#23-singly-linked-lists","title":"2.3 Singly-linked Lists","text":"<p>Singly-linked list has pointers to the next node. It is a type of positional  list.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#24-singly-linked-list-insert","title":"2.4 Singly-Linked List: Insert","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#25-singly-linked-list-remove","title":"2.5 Singly-Linked List: Remove","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#26-linked-list-search","title":"2.6 Linked List Search","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#27-python-linked-list","title":"2.7 Python Linked List","text":"<p>See the example in folder 2.7 Linked List  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#28-doubly-linked-lists","title":"2.8 Doubly-linked lists","text":"<p>Has pointer to next and previous node. Another type of positional list.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#211-python-doubly-linked-list","title":"2.11 Python: Doubly-linked List","text":"<p>See 2.11 Doubly Linked List folder for example  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#212-circular-lists","title":"2.12 Circular Lists","text":"<p>Where the tail's next pointer is to the head node. Head node previous is to the  tail node.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#213-linked-list-traversal","title":"2.13 Linked List Traversal","text":"<p>List Traversal visits all nodes and performs an operation  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#214-sorting-linked-lists","title":"2.14 Sorting Linked Lists","text":"<p>Insertion sort must be a Doubly-linked-list, it will rerquire backwards traversal.  </p> <p>Insertion Sort runtime is O(N^2)  </p> <p>Singly List Sort is the same runtime, O(N^2)  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#sorting-linked-lists-vs-arrays","title":"Sorting linked-lists vs. arrays","text":"<p>Sorting algorithms for arrays, such as quicksort and heapsort, require  constant-time access to arbitrary, indexed locations to operate efficiently.  Linked lists do not allow indexed access, making for difficult adaptation of  such sorting algorithms to operate on linked lists.  </p> <p>Sorting algorithms that easily adapt to link list: </p> <ul> <li> <p>Insertion Sort: Operates similarly on doubly-linked lists.Requires searching  from the head of the list for an elements's insertion position ofr singly-linked  lists.  </p> </li> <li> <p>Merge Sort: Finding the middle of the list requires searching linearly from the head of the list. The merge algorithm can also merge lists without additional  storage.  </p> </li> </ul> <p>Sorting Algorithms that are difficult to adapt to efficiently with sort linked lists:  </p> <ul> <li> <p>Shell Sort: Jumping the gap between elements cannot be done on a linked list,  as each element between two elements must be traversed.  </p> </li> <li> <p>Quicksort: Partitioning requires backward traversal through the right  portion of the array. Singly-linked lists do not support backward traversal.  </p> </li> <li> <p>Heap sort: Indexed access is required to find child nodes in constant time  when percolating down.  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#215-python-sorting-linked-lists","title":"2.15 Python Sorting Linked Lists","text":"<p>See examples for 2.15 sorting singly and doubly linked lists  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#216-linked-list-dummy-nodes","title":"2.16 Linked List dummy nodes","text":"<p>dummy node (or header node): A node with an unused data member that always   resides at the head of the list and cannot be removed. Using a dummy node   simplifies the algorithms for a linked list because the head and tail pointers   are never null.</p> <p>An empty list consists of the dummy node, which has the next pointer set to null,  and the list's head and tail pointers both point to the dummy node.</p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#217-linked-list-recursion","title":"2.17 Linked List: Recursion","text":"<p>Used for list traversal  </p> <p>Used for searching  </p> <p>Used for reverse traversal  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#218-array-based-lists","title":"2.18 Array-based lists","text":"<p>array-based lists: list ADT implemented using an array. Unlike normal arrays,  the list size will dynamically allocate as needed.  </p> <p>Resize Operation: array-based lists must be re-sized if an item is added when  the allocation size equals the list length. Copying items from the old array to  the new array has a runtime of O(N).  </p> <p>Prepend: runtime of O(N), all items have to be moved by one position to make  room at the front.  </p> <p>Search: returns -1 if not found. Worst case runtime of O(N).  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#219-python-array-based-list-example","title":"2.19 Python Array based List Example","text":"<p>see 2.19 Array List folder. After running <code>py main.py</code>, enter <code>insert_after 5 3</code> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#stacks-and-queues","title":"Stacks and Queues","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#31-stack-abstract-data-type-adt","title":"3.1 Stack abstract data type (ADT)","text":"<p>Stack: only inserted or removed from the top of the stack.  </p> <ul> <li> <p>Operations: push and pop  </p> </li> <li> <p>Last-in-first-out  </p> </li> </ul> <p>Common Stack operations:  </p> Operation Description Example starting with stack: 99, 77 (top is 99). Push(stack, x) Inserts x on top of stack Push(stack, 44). Stack: 44, 99, 77 Pop(stack) Returns and removes item at top of stack Pop(stack) returns: 99. Stack: 77 Peek(stack) Returns but does not remove item at top of stack Peek(stack) returns 99. Stack still: 99, 77 IsEmpty(stack) Returns true if stack has no items IsEmpty(stack) returns false. GetLength(stack) Returns the number of items in the stack GetLength(stack) returns 2. <p>Note: Pop and Peek operations should not be applied to an empty stack; the  resulting behavior may be undefined.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#32-stacks-using-linked-lists","title":"3.2 Stacks Using Linked Lists","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#33-python-array-based-stacks","title":"3.3 Python: Array-based stacks","text":"<p>Unbounded stack: stack with no upper limit on length. Bounded stack: length that does not exceed a maximum value.  </p> <p>See example of an optionally bounded Stack ADT in 3.3.1 List Based Stack folder  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#34-queue-abstract-data-type-adt","title":"3.4 Queue abstract data type (ADT)","text":"<p>Queue: items are added to the end of the queue and removed from the front.  Referred to as a first-in first-out ADT.  </p> <p>Enqueue: adds an item to the end of the queue  </p> <p>Dequeue: removes an item from the front.  </p> <p>Common Queue operations:  </p> Operation Description Example starting with queue: 43, 12, 77 (front is 43) Enqueue(queue, x) Inserts x at end of the queue Enqueue(queue, 56). Queue: 43, 12, 77, 56 Dequeue(queue) Returns and removes item at front of queue Dequeue(queue) returns: 43. Queue: 12, 77 Peek(queue) Returns but does not remove item at the front of the queue Peek(queue) return 43. Queue: 43, 12, 77 IsEmpty(queue) Returns true if queue has no items IsEmpty(queue) returns false. GetLength(queue) Returns the number of items in the queue GetLength(queue) returns 3."},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#35-queues-using-linked-lists","title":"3.5 Queues using linked lists","text":"<p>Queues often use linked lists  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#36-python-array-based-queues","title":"3.6 Python: Array-based queues","text":"<p>Look at the example in 3.6 Array Based Queue folder.  </p> <p>A queue can be implemented with an array. Two variables are needed in addition to the array:</p> <ul> <li> <p>length: an integer for the queue's length.</p> </li> <li> <p>front_index: an integer for the queue's front item index.  </p> </li> </ul> <p>Queues can be bounded or unbounded </p> <p>An array-based queue implementation can support both bounded and unbounded  queue operations by using max_length as follows:</p> <ul> <li> <p>If max_length is negative, the queue is unbounded.</p> </li> <li> <p>If max_length is nonnegative, the queue is bounded.  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#worst-case-time-complexity","title":"Worst-case time complexity","text":"<p>Using the implementation from above, worst-case time complexities are the same  whether the queue is bounded or unbounded: O(N) for enqueue and O(1) for dequeue.</p> <p>An alternate implementation of the bounded queue, not presented in this section, uses max_length as the array's initial allocation size. Such an implementation  never needs to resize and so the enqueue operation's worst-case time is O(1).  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#37-python-stacks-and-queues-using-linked-lists","title":"3.7 Python: Stacks and queues using linked lists","text":"<p>see Queue and Stack examples from 3.7 Queue Stack Linked List folder  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#38-deque-abstract-data-type-adt","title":"3.8 Deque abstract data type (ADT)","text":"<p>Deque (deck): double ended queue, is an ADT in which items can be inserted  and removed at both front and back.</p> <p>Common Operations:  </p> Operation Description Example starting with deque: 59, 63, 19 (front is 59) PushFront(deque, x) Inserts x at the front of the deque PushFront(deque, 41). Deque: 41, 59, 63, 19 PushBack(deque, x) Inserts x at the back of the deque PushBack(deque, 41). Deque: 59, 63, 19, 41 PopFront(deque) Returns and removes item at front of deque PopFront(deque) returns 59. Deque: 63, 19 PopBack(deque) Returns and removes item at back of deque PopBack(deque) returns 19. Deque: 59, 63 PeekFront(deque) Returns but does not remove the item at the front of deque PeekFront(deque) returns 59. Deque is still: 59, 63, 19 PeekBack(deque) Returns but does not remove the item at the back of deque PeekBack(deque) returns 19. Deque is still: 59, 63, 19 IsEmpty(deque) Returns true if the deque is empty IsEmpty(deque) returns false. GetLength(deque) Returns the number of items in the deque GetLength(deque) returns 3."},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#4-hash-tables","title":"4 Hash Tables","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#41-hash-tables","title":"4.1 Hash Tables","text":"<p>Hash Table: Stores unordered items by mapping (or hashing) each item to a location  in an array (or vector). An item's key is the value used to map to an index. Each  hash table array element is called a bucket. A hash function computes a  bucket index from the item's key.  </p> <p>Commonly use the modulo operator % in hash functions  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#collisions","title":"Collisions","text":"<p>Collisions: occur when an item being inserted into a hash table maps to the  same bucket as an exiting item.</p> <ul> <li> <p>Chaining: is a collision resolution technique where each bucket has a  list of items (so bucket 5's list would become 55, 75).  </p> </li> <li> <p>Open addressing: is a collision resolution technique where collisions  are resolved by looking for an empty bucket elsewhere (so 75 might be stored  in bucket 6).  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#42-chaining","title":"4.2 Chaining","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#43-linear-probing","title":"4.3 Linear Probing","text":"<p>Linear probing: handles collision by starting at the key's mapped  bucket, and then linearly searches subsequent buckets until an empty bucket is  found.    </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#empty-bucket-types","title":"Empty Bucket Types","text":"<p>Two types of empty buckets:  </p> <ul> <li> <p>Empty-since-start: bucket has been empty since the hash table was created.  </p> </li> <li> <p>Empty-after-removal: bucket had an item removed that caused the bucket  to now be empty.  </p> </li> </ul> <p>Searching stops for empty-since-start buckets  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#44-quadratic-probing","title":"4.4 Quadratic Probing","text":"<p>A hash table with quadratic probing handles a collision by starting at the  key's mapped bucket, and then quadratically searches subsequent buckets until  an empty bucket is found. If an item's mapped bucket is H, the formula <code>(H + c1 * i + c2 * i^2)mod (table size)</code> is used to determine the item's index  in the hash table. c1 and c2 are programmer-defined constants for quadratic  probing. Inserting a key uses the formula, starting with i = 0, to repeatedly  search the hash table until an empty bucket is found. Each time an empty bucket  is not found, i is incremented by 1. Iterating through sequential i values to  obtain the desired table index is called the probing sequence.  </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#45-double-hashing","title":"4.5 Double Hashing","text":"<p>Double hashing is an open-addressing collision resolution technique that uses 2  different hash functions to compute bucket indices. </p> <ul> <li> <p><code>(h1(key) + i* h2(key)) mod (table size)</code> where h1 and h2 are the hash functions  and i is incremented until an empty bucket is found.  </p> </li> <li> <p>The i in the above sequence displays a probing sequence </p> </li> </ul> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#46-hash-table-resizing","title":"4.6 Hash Table Resizing","text":"<p>Commonly resizes to the next prime number &gt;= N * 2. A new array is allocated  and all items from the old array are re-inserted into the new array. Resizing  operations time complexity = O(N)  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#when-to-resize","title":"When to resize","text":"<p>Load Factor: is the number of itmes in the hash table divided by the number  of buckets. Ex: 18/31 = 0.58.  </p> <p>An implementation may choose to resize the hash table when one or more of the  following values exceeds a certain threshold:</p> <ul> <li>Load factor</li> <li>When using open-addressing, the number of collisions during an insertion</li> <li>When using chaining, the size of a bucket's linked-list  </li> </ul> <p>In a hash table using open addressing, the load factor cannot exceed 1.0.  </p> <p>In a hash table using chaining, the load factor can exceed 1.0.</p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#47-common-hash-functions","title":"4.7 Common hash functions","text":"<p>** A good hash function minimizes collisions**  </p> <p>A perfect hash function maps items to buckets with no collisions. A perfect  hash function can be created if the number of items and all possible item keys  are known beforehand. The runtime for insert, search, and remove is O(1) with a  perfect hash function.  </p> <ul> <li> <p>With chaining, a good hash function results in short bucket lists and thus fast  inserts, searches, and removes.  </p> </li> <li> <p>With linear probing, a good hash function will avoid hashing multiple items to  consecutive buckets and thus minimize the average linear probing length to  achieve fast inserts, searches, and removes.</p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#modulo-hash-function","title":"Modulo hash function","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#mid-square-hash-function","title":"Mid-square hash function","text":"<p>A mid-square hash squares the key, extracts R digits from the result's middle,  and returns the remainder of the middle digits divided by hash table size N.</p> <p>Ex: For a hash table with 100 entries and a key of 453, the decimal (base 10)  mid-square hash function computes 453 * 453 = 205209, and returns the middle  two digits 52. For N buckets, R must be greater than or equal to <code>[log10 N]</code> to index all buckets. The process of squaring and extracting middle digits  reduces the likelihood of keys mapping to just a few buckets.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#multiplicative-string-hash-function","title":"Multiplicative string hash function","text":"<p>A multiplicative string hash repeatedly multiplies the hash value and adds the  ASCII (or Unicode) value of each character in the string.  </p> <p>EX: <pre><code>Initial value = 0\nHash multiplier = 1\nString = BAT\n\nA hash multiplier of 1 will simply add the characters' ASCII values.\n\nstringHash = InitialValue + B + A + T = 0 + 66 + 65 + 84 = 215.\n215 % 1000 = 215.\n\n\n------------------------\n\nInitialValue = 17  \nHashMultiplier = 3  \nString = WE  \n\nstringHash = InitialValue = 17\nstringHash = 17 * 3 + W = 17 * 3 + 87 = 138.\nstringHash = 138 * 3 + E = 138 * 3 + 69 = 483.\n483 % 1000 = 483.\n</code></pre></p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#48-direct-hashing","title":"4.8 Direct Hashing","text":"<p>A direct hash function uses the item's key as the bucket index. Ex: If the key  is 937, the index is 937. A hash table with a direct hash function is called a  direct access table. Given a key, a direct access table search algorithm returns  the item at index key if the bucket is not empty, and returns null (indicating  item not found) if empty.  </p> <p>A direct access table has the advantage of no collisions: Each key is unique  (by definition of a key), and each gets a unique bucket, so no collisions can  occur. However, a direct access table has two main limitations.</p> <ul> <li> <p>All keys must be non-negative integers, but for some applications keys may be negative.</p> </li> <li> <p>The hash table's size equals the largest key value plus 1, which may be very  large.  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#49-hashing-algorithms-cryptography-passowrd-hashing","title":"4.9 Hashing Algorithms: Cryptography, Passowrd Hashing","text":"<p>Cryptography is a field of study focused on transmitting data securely. Secure  data transmission commonly starts with encryption: alteration of data to  hide the original meaning. The counterpart to encryption is decryption:  reconstruction of original data from encrypted data.  </p> <p>Ex: A hashing algorithm called MD5 produces a 128-bit hash value for any input data. The hash value cannot be used to reconstruct the original data, but can  be used to help verify that data isn't corrupt and hasn't been altered.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#410-python-hash-tables","title":"4.10 Python: Hash Tables","text":"<p>Section has examples of Double-Hashing, Quadratic Probing Hashing, Linear Probing, Chaining, and Open Addressing.</p> <p>See folder 4.10 HashTables  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#411-lab-course-gradebook-with-dict","title":"4.11 LAB: Course gradebook with dict","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#5-trees","title":"5 Trees","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#51-binary-trees","title":"5.1 Binary Trees","text":"<p>Each node has up to 2 children, known as left child and right child  </p> <p>Leaf: a tree with no children  </p> <p>Internal node: A node with at least one child.  </p> <p>Parent: A node with a child is said to be that child's parent. A node's  ancestor include the node's parent, the parent's parent, etc.. up to the root.  </p> <p>Root: The on tree node with no parent (the top node).  </p> <p>Edge: the link between a child and the parent node.  </p> <p>Depth: is the number of edges on the path from the root to the node. The root node thus has depth 0.  </p> <p>Height: is the largest depth of any node. A tree with just one node has a height of 0.  </p> <p>A binary tree is full if every node contains 0 or 2 children.  </p> <p>A binary tree is complete if all levels, except possibly the last level,  contains all possible nodes and all nodes in the last level are as far left as  possible.  </p> <p>A binary tree is perfect if all internal doces have 2 children and all leaf  nodes are at the same level.  </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#52-applications-of-trees","title":"5.2 Applications of Trees","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#file-system","title":"File System","text":"<p>Files are always leafs. Empty folders are leafs.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#binary-space-partitioning","title":"Binary space partitioning","text":"<p>Binary Space Partitioning (BSP): technique of repeatedly separating a region  of space into 2 parts and cataloging objects contained within the regions.  </p> <p>A BSP tree is a binary tree used to store information for binary space  partitioning. Each node in a BSP tree contains information about a region of  space and which objects are contained in the region.  </p> <p>In graphics applications, a BSP tree can be used to store all objects in a  multidimensional world. The BSP tree can then be used to efficiently determine  which objects must be rendered on screen. The viewer's position in space is  used to perform a lookup within the BSP tree. The lookup quickly eliminates a  large number of objects that are not visible and therefore should not be  rendered.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#53-binary-search-trees","title":"5.3 Binary Search Trees","text":"<p>Binary Serach Tree (BST): Ordered so that the left subnode is &lt;= the node,  and the right subnode is &gt;= the node.  </p> <p> </p> <p>A BST may render faster results than searching a list </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#bst-search-runtime","title":"BST search runtime","text":"<p>Searching a BST in the worst case requires H + 1 comparisons, meaning O(H)  comparisons, where H is the tree height. Node height may be as small as  O(logN).  </p> <p>A binary tree's height can be minimized by keeping all levels full, except  possibly the last level. Such an \"all-but-last-level-full\" binary tree's  height is H = floor(log2 N) </p> <p> </p> <p>Searching a perfect BST with N nodes requires only O(logN) comparisons.  </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#successors-and-predecessors","title":"Successors and Predecessors","text":"<p>If the ordering were A,B,C; to B, A would be the predecessor and C would  be the successor. </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#54-bst-search-algorithm","title":"5.4 BST search algorithm","text":"<p>BST search returns the first matching node or null.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#55-bst-insert-algorithm","title":"5.5 BST insert algorithm","text":"<p>Insertion best runtime is O(logN) the worst case is O(N)</p> <p>The space complexity of insertion is O(1), becuase only a single pointer  is used to traverse the tree to find the insertion location.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#56-bst-remove-algorithm","title":"5.6 BST remove Algorithm","text":"<p>Three different processes based on the condition for removing a node: </p> <ul> <li> <p>Remove a leaf node: If X has a parent (so X is not the root), the parent's  left or right child (whichever points to X) is assigned with null. Else, if X  was the root, the root pointer is assigned with null, and the BST is now empty. </p> </li> <li> <p>Remove an internal node with single child: If X has a parent (so X is not the  root), the parent's left or right child (whichever points to X) is assigned with X's single child. Else, if X was the root, the root pointer is assigned with X's single child.</p> </li> <li> <p>Remove an internal node with two children: This case is the hardest. First,  the algorithm locates X's successor (the leftmost child of X's right subtree),  and copies the successor to X. Then, the algorithm recursively removes the  successor from the right subtree.</p> </li> </ul> <p> </p> <p> </p> <p>Removal Time Complexity: Worst case time complexity is O(logN) for a BST with  log2 N levels and worst case O(N) for a tree with N levels.  </p> <p>Removal Space Complexity: Two pointers are used to traverse the tree during  removal. When the node being removed has two children, a third pointer and a  copy of one node's data are also used, and one recursive call is made. So removal's  space complexity is always O(1) </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#57-bst-inorder-traversal","title":"5.7 BST inorder traversal","text":"<p>A tree traversal algorithm visits all nodes in the tree once and performs  an operation on each node. An inorder traversal visits all nodes in a BST  from smallest to largest, which is useful for example to print the tree's nodes  in sorted order.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#58-bst-height-and-insertion-order","title":"5.8 BST height and insertion order","text":"<p>The minimum N-node binary tree height is h = floor(log2 N)  </p> <p>The maximum N-node tree height is N-1 (the -1 because the root is at 0)  </p> <p>Searching a BST is fast if the tree's height is near the minimum, done by inserting  nodes in random order:</p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#59-bst-parent-node-pointers","title":"5.9 BST parent node pointers","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#510-bst-recursion","title":"5.10 BST Recursion","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#511-tries","title":"5.11 Tries","text":"<p>A trie (or prefix tree) is a tree representing a set of strings. Each  non-root node represents a single character. Each node has at most one child  per distinct alphabet character. A terminal node is a node that represents a  terminating character, which is the end of a string in the trie.</p> <p>Tries provide efficient storage and quick search for strings, and are often  used to implement auto-complete and predictive text input.  </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#removal","title":"Removal","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#512-python-binary-search-tree","title":"5.12 Python Binary Search Tree","text":"<p>see folder 5.12 BST. Enter a list of numbers with spaces, like 3 10 7 2 8 8 4 9 5 1 6  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#6-balance-trees","title":"6 Balance Trees","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#61-avl-balanced-tree","title":"6.1 AVL: Balanced tree","text":"<p>An AVL tree is a BST with a height balance property and specific operations to  rebalance the tree when a node is inserted or removed.  </p> <p>A BST is height balanced if for any node, the heights of the node's left  and right subtrees differ by only 0 or 1. </p> <p>A node's balance factor is the left subtree height minus the right subtree  height, which is 1, 0, or -1 in an AVL tree.  </p> <p> </p> <p> </p> <p> </p> <p>An AVL tree doesn't always have the minimum possible height, but has a height no  worse than 1.5x the minimum.  </p> <p>What is the minimum possible height of an AVL tree with 7 nodes? 2</p> <p>What is the maximum possible height of an AVL tree with 7 nodes? 3. 1.5 x 2 = 3  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#62-avl-rotations","title":"6.2 AVL Rotations","text":"<p>Inserting an item into an AVL tree may require rearranging the tree to maintain  height balance. A rotation is a local rearrangement of a BST that maintains  the BST ordering property while rebalancing the tree.  </p> <p> </p> <p>When an AVL tree node has a balance factor of 2 or -2, which only occurs after  an insertion or removal, the node must be rebalanced via rotations.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#63-avl-insertions","title":"6.3 AVL Insertions","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#64-avl-removals","title":"6.4 AVL Removals","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#65-python-avl-tree","title":"6.5 Python AVL Tree","text":"<p>See example folder  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#66-red-black-tree-a-balance-tree","title":"6.6 Red-black tree: A balance tree","text":"<p>A red-black tree is a BST with two node types, namely red and black, and  supporting operations that ensure the tree is balanced when a node is inserted or removed. The below red-black tree's requirements ensure that a tree with N  nodes will have a height of O(log N).</p> <ul> <li>Every node is colored either red or black.</li> <li>The root node is black.</li> <li>A red node's children cannot be red.</li> <li>A null child is considered to be a black leaf node.</li> <li>All paths from a node to any null leaf descendant node must have the  same number of black nodes.  </li> </ul> <p> </p> <p> </p> <p> </p> <p>Coloring all nodes black will NOT make the tree a valid red-black tree.  Unless all levels in a BST are full, coloring all nodes black will inevitably  violate the requirement that all paths to null leaf nodes must have the same  number of black nodes.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#67-red-black-rotations","title":"6.7 Red-black Rotations","text":"<p>A left rotation at a node causes the node's right child to take the node's  place in the tree. A right rotation at a node causes the node's left  child to take the node's place in the tree.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#68-red-black-insertion","title":"6.8 Red-black Insertion","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#69-red-black-removal","title":"6.9 Red-black removal","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#prepare-for-removal-algorithm-case-descriptions","title":"Prepare for removal algorithm case descriptions:","text":"Case # Condition Action if condition is true Process additional cases after action? 1 Node is red or node's parent is null. None. No 2 Sibling node is red. Color parent red and sibling black. If node is left child of parent, rotate left at parent node, otherwise rotate right at parent node. Yes 3 Parent is black and both of sibling's children are black. Color sibling red and call removal preparation function on parent. No 4 Parent is red and both of sibling's children are black. Color parent black and sibling red. No 5 Sibling's left child is red, sibling's right child is black, and node is left child of parent. Color sibling red and sibling's left child black. Rotate right at sibling. Yes 6 Sibling's left child is black, sibling's right child is red, and node is right child of parent. Color sibling red and sibling's right child black. Rotate left at sibling. Yes"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#610-python-red-black-tree","title":"6.10 Python: Red-black tree","text":"<p>See example in folder 6.10 Red Black Tree.  </p> <p>Use these values as input: 15 42 77 18 90 21 36 19 89 47 15 47 40 19</p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#611-lab-avl-tree-nth-largest-operation","title":"6.11 LAB: AVL tree Nth largest operation","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#612-lab-red-black-tree-nth-largest-operation","title":"6.12 LAB: Red-black tree Nth Largest operation","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#7-heaps","title":"7 Heaps","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#71-heaps","title":"7.1 Heaps","text":"<p>A use for heaps is to keep the order of priority.  </p> <p>A max-heap is a complete binary tree that maintains the simple property that a  node's key is greater than or equal to the node's children's keys. A max-heap's  root always has the maximum key in the entire tree.  </p> <p>Inserts fill a level (left-to-right) before adding another level, so the tree's  height is always the minimum possible. The upward movement of a node in a  max-heap is called percolating.  </p> <p>A remove from a max-heap is always a removal of the root.  Removing a node (always the root): Replace with last node, then percolate node  down.  </p> <p>The complexity for removing the root is O(logN), same for inserting. </p> <p>Given N nodes, the height of the max-heap is floor(logN)  </p> <p>Min-heap is the opposite of the max-heap, the lowest number has the highest  priority and is placed at the root.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#72-heaps-using-arrays","title":"7.2 Heaps using arrays","text":"<p>Heaps are typically stored using arrays.   </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#73-python-heaps","title":"7.3 Python: Heaps","text":"<p>See folder 7.3 Heap   </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#74-heap-sort","title":"7.4 Heap sort","text":"<p>Heapsort is a sorting algorithm that takes advantage of a max-heap's properties  by repeatedly removing the max and building a sorted array in reverse order. An  array of unsorted values must first be converted into a heap. The  heapify operation is used to turn an array into a heap.  </p> <p>Heap Sort will sort an array.  </p> <p>Heapsort begins by heapifying the array into a max-heap and initializing  an end index value to the size of the array minus 1. Heapsort repeatedly  removes the maximum value, stores that value at the end index, and  decrements the end index. The removal loop repeats until the end index  is 0.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#75-python-heap-sort","title":"7.5 Python Heap Sort","text":"<p>See folder 7.5 Heap Sort  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#76-priority-queue-abstract-data-type","title":"7.6 Priority queue abstract data type","text":"<p>A priority queue is a queue where each item has a priority, and items with higher priority are closer to the front of the queue than items with lower priority. </p> <p>The priority queue enqueue operation inserts an item such that the item is  closer to the front than all items of lower priority, and closer to the end than  all items of equal or higher priority. </p> <p>The priority queue dequeue operation removes and returns the item at the  front of the queue, which has the highest priority.  </p> <p>When enqueueing items of equal priority, the first-in-first-out rules apply. So the second item with priority 7 comes after the first.  </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#77-treaps","title":"7.7 Treaps","text":"<p>A treap uses a main key that maintains a binary search tree ordering property,  and a secondary key generated randomly (often called \"priority\") during  insertions that maintains a heap property. The combination usually keeps the  tree balanced. The word \"treap\" is a mix of tree and heap. </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#deletion","title":"Deletion","text":"<p>The when a node is marked for deletion, the priority is set to negative infinity. Then the node is percolated down.  </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#78-lab-timeout-manager-with-priority-queue","title":"7.8 LAB: Timeout manager with Priority Queue","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#8-sets","title":"8 Sets","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#81-set-abstract-data-type","title":"8.1 Set abstract data type","text":"<p>A set is an unordered collection. There are no duplicates.  </p> <p>Represented in curly brackets: {78, 32, 57, 82}  </p> <p>When storing objects, set implementations commonly distinguish elements based  on an element's key value: A primitive data value that serves as a unique  identifier for the element. </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#82-set-operations","title":"8.2 Set Operations","text":"<p>Filter </p> <p>Map: produces a new set that had a function applied to each element in the  set.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#83-static-and-dynamic-set-operations","title":"8.3 Static and dynamic set operations","text":"<p>A dynamic set is a set that can change after being constructed. A static set is a set that doesn't change after being constructed. You cannot add or remove  to a static set.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#84-python-set-implementation","title":"8.4 Python: Set Implementation","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#85-lab-implementing-staticset-using-a-python-set","title":"8.5 LAB: Implementing StaticSet using a python set","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#9-graphs","title":"9 Graphs","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#91-intro-to-graphs","title":"9.1 Intro to Graphs","text":"<p>A graph is a data structure for representing connections among items, and  consists of vertices connected by edges.</p> <ul> <li> <p>A vertex (or node) represents an item in a graph.</p> </li> <li> <p>An edge represents a connection between two vertices in a graph.  </p> </li> </ul> <p>In a graph:</p> <ul> <li> <p>Two vertices are adjacent if connected by an edge.</p> </li> <li> <p>A path is a sequence of edges leading from a source (starting) vertex to  a destination (ending) vertex. The path length is the number of edges in the  path.  </p> </li> <li> <p>The distance between two vertices is the number of edges on the shortest  path between those vertices.  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#92-applications-of-graphs","title":"9.2 Applications of graphs","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#93-graph-representations-adjacency-lists","title":"9.3 Graph representations: Adjacency lists","text":"<p>In an adjacency list graph representation, each vertex has a list of adjacent  vertices, each list item representing an edge.  </p> <p>A key advantage of an adjacency list graph representation is a size of O(V + E),  because each vertex appears once, and each edge appears twice. V refers to the  number of vertices, E the number of edges.  </p> <p>However, a disadvantage is that determining whether two vertices are adjacent  is O(V), because one vertex's adjacency list must be traversed looking for the  other vertex, and that list could have V items. </p> <p>A sparse graph has far fewer edges than the maximum possible.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#94-graph-representations-adjacency-matrices","title":"9.4 Graph representations: Adjacency matrices","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#95-graphs-breadth-first-search","title":"9.5 Graphs: Breadth-first search","text":"<p>Graph traversal: an algorithm visits every vertex in a graph  </p> <p>** Breadth-first search (BFS): is a traversal that visits a starting vertex, then all vertices of distance 1 from that vertex, then of distance 2, and so on, without revisiting a vertex.  </p> <p>If multiple traversal paths exist for reaching a single vertex, then the traversal  of the graph is not unique.  </p> <p> </p> <p>When the BFS algorithm first encounters a vertex, that vertex is said to have  been discovered. In the BFS algorithm, the vertices in the queue are called  the frontier, being vertices thus far discovered but not yet visited.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#96-graphs-depth-first-search","title":"9.6 Graphs: Depth-first search","text":"<p>A depth-first search (DFS) is a traversal that visits a starting vertex, then  visits every vertex along each path starting from that vertex to the path's end  before backtracking.</p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#97-directed-graphs","title":"9.7 Directed Graphs","text":"<p>A directed graph, or digraph, consists of vertices connected by directed  edges. </p> <p>A directed edge is a connection between a starting vertex and a terminating  vertex. In a directed graph, a vertex Y is adjacent to a vertex X, if there is  an edge from X to Y.  </p> <p> </p> <p>In a directed graph:</p> <ul> <li> <p>A path is a sequence of directed edges leading from a source (starting)  vertex to a destination (ending) vertex.</p> </li> <li> <p>A cycle is a path that starts and ends at the same vertex. A directed  graph is cyclic if the graph contains a cycle, and acyclic if the graph  does not contain a cycle.  </p> </li> </ul> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#98-weighted-graphs","title":"9.8 Weighted graphs","text":"<p>A weighted graph associates a weight with each edge. A graph edge's weight,  or cost, represents some numerical value between vertex items, such as  flight cost between airports, connection speed between computers, or travel  time between cities. A weighted graph may be directed or undirected.</p> <p>The path length is the sum of the edge weights in the path.</p> <p>The cycle length is the sum of the edge weights in a cycle. A  negative edge weight cycle has a cycle length less than 0. </p> <p>A shortest path does not exist in a graph with a negative edge weight cycle,  because each loop around the negative edge weight cycle further decreases the  cycle length, so no minimum exists.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#99-python-graphs","title":"9.9 Python Graphs","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#910-python-breadth-first-search","title":"9.10 Python: Breadth-first search","text":"<p>See folder 9.10 Graphs.  Enter the name \"Taj\"</p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#911-python-depth-first-search","title":"9.11 Python Depth First Search","text":"<p>See folder 9.11 Depth First  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#912-python-dijkstras-shortest-path","title":"9.12 Python: Dijkstra's shortest path","text":"<p>See example in 9.12 Dijkstra</p> <p>Dijkstra's algorithm computes the shortest path from a given starting vertex  to all other vertices in the graph.</p> <p>To perform Dijjkstra's algorithm, the Graph and Vertex classes are used. The  Vertex class is extended to include two additional data members:</p> <ul> <li> <p>distance - The total sum of the edge weights on a path from some start vertex  to the vertex.</p> </li> <li> <p>pred_vertex - A reference to the vertex that occurs immediately before the  vertex, on a path from some start vertex to the vertex.  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#913-algorithm-dijkstras-shortest-path","title":"9.13 Algorithm: Dijkstra's shortest path","text":"<p>Dijkstra's algorithm initializes all vertices' distances to infinity (\u221e),  initializes all vertices' predecessors to null, and enqueues all vertices into  a queue of unvisited vertices. The algorithm then assigns the start vertex's  distance with 0. </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#914-algorithm-bellman-fords-shortest-path","title":"9.14 Algorithm: Bellman-Ford's shortest path","text":"<p>The Bellman-Ford shortest path algorithm, created by Richard Bellman and Lester  Ford, Jr., determines the shortest path from a start vertex to each vertex in a  graph. </p> <p>The runtime for the Bellman-Ford shortest path algorithm is O(VE). The outer  loop (the main iterations) executes V-1 times. In each outer loop execution,  the algorithm visits each vertex and follows the subset of edges to adjacent  vertices, following a total of E edges across all loop executions.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#915-python-bellman-fords-shortest-path","title":"9.15 Python: Bellman-Ford's shortest path","text":"<p>See example 9.15 Bellman Ford  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#916-topological-sort","title":"9.16 Topological sort","text":"<p>A topological sort of a directed, acyclic graph produces a list of the  graph's vertices such that for every edge from a vertex X to a vertex Y, X  comes before Y in the list.  </p> <p>Get Help on Topological Sort!!!! </p> <p>Can be used to graph out a degree's curriculum path. Math 101, Phys 101 has to  come before CS 103.  </p> <p> </p> <p> </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#917-python-topological-sort","title":"9.17 Python: Topological sort","text":"<p>See example 9.17 Topo Sort folder  </p> <p>The following program creates the graph shown earlier in this section and  prints the result of the topological_sort() function. Verify that the program  outputs a valid topological ordering of the graph.</p> <p>Experiment with the algorithm by adding and removing some edges. See if you  can predict the results before trying the program. (Make each modification  starting from the original graph, not from the graph resulting from the  previous step.)</p> <ul> <li>Add an edge from E to A.</li> <li>Add an edge from C to G.</li> <li>Remove the edge from A to B.</li> <li>Add an edge from F to C.  </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#918-minimum-spanning-tree","title":"9.18 Minimum Spanning Tree","text":"<p>A graph's minimum spanning tree is a subset of the graph's edges that  connect all vertices in the graph together with the minimum sum of edge  weights. The graph must be weighted and connected. </p> <p>A connected graph contains a path between every pair of vertices.  </p> <p> </p> <p>Kruskal's minimum spanning tree algorithm determines the subset of a graph's edges that connect all the graph's vertices with the minimum possible sum of edge  weights. Kruskal's minimum spanning tree algorithm uses three collections:</p> <ul> <li>edgeQueue: A priority queue of edges, initially containing all graph edges. Edge weights are priorities.</li> <li>result: A collection of edges comprising the minimum spanning tree, initially empty.</li> <li>vertexSets: A collection of vertex sets. Each set represents vertices connected by edges in result. Initially, vertexSets contains one set for each vertex.</li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#919-python-minimum-spanning-tree","title":"9.19 Python: Minimum spanning tree","text":"<p>See folder 9.19 Min Span Tree  </p> <p>The minimum spanning tree algorithm requires a priority queue for edges, where  each edge's weight is the edge's priority. The EdgeWeight class implements a  simple edge object that stores to and from vertices, as well as weight.  Comparison operators are implemented such that edges are compared to each other  using edge weights.</p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#920-all-pairs-shortest-path","title":"9.20 All pairs shortest path","text":"<p>An all pairs shortest path algorithm determines the shortest path between all  possible pairs of vertices in a graph. </p> <p> </p> <p>The Floyd-Warshall all-pairs shortest path algorithm generates a |V| x |V|  matrix of values representing the shortest path lengths between all vertex  pairs in a graph. Graphs with cycles and negative edge weights are supported,  but the graph must not have any negative cycles.  </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#921-python-all-pairs-shortest-path","title":"9.21 Python: All pairs shortest path","text":"<p>See 9.21 All Pairs Short Path</p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#922-lab-graph-representations","title":"9.22 LAB: Graph representations","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#10-b-trees","title":"10 B-Trees","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#101-b-trees","title":"10.1 B-Trees","text":"<p>In a binary tree, each node has one key and up to two children.  </p> <p>A B-tree with order K is a tree where nodes can have up to K-1 keys and up  to K children. The order is the maximum number of children a node can have.  Ex: In a B-tree with order 4, a node can have 1, 2, or 3 keys, and up to 4  children. B-trees have the following properties:</p> <ul> <li>All keys in a B-tree must be distinct.</li> <li>All leaf nodes must be at the same level.</li> <li>An internal node with N keys must have N+1 children.</li> </ul> <p> </p> <ul> <li>Keys in a node are stored in sorted order from smallest to largest.</li> <li>Each key in a B-tree internal node has one left subtree and one right  subtree. All left subtree keys are &lt; that key, and all right subtree keys  are &gt; that key.</li> </ul> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#2-3-4-tree","title":"2-3-4 Tree","text":"<p>A 2-3-4 tree is an order 4 B-tree. Therefore, a 2-3-4 tree node contains 1, 2  or 3 keys. A leaf node in a 2-3-4 tree has no children.  </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#102-2-3-4-tree-search-algorithm","title":"10.2 2-3-4 tree search algorithm","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#103-2-3-4-tree-insert-algorithm","title":"10.3 2-3-4 tree insert algorithm","text":"<p>New keys are always inserted into leaf nodes in a 2-3-4 tree. Insertion returns   the leaf node where the key was inserted, or null if the key was already in the   tree.</p> <p>Only a full node can be split during insertion.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#splits","title":"Splits","text":"<p>2-3-4 tree non full leaf insertion cases </p> Condition Outcome New key equals an existing key in node No insertion takes place, and the node is not altered. New key is \\&lt; node's first key Existing keys in node are shifted right, and the new key becomes node's first key. Node has only 1 key or new key is \\&lt; node's middle key Node's middle key , if present, becomes last key, and new key becomes node's middle key. None of the above New key becomes node's last key."},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#b-tree-insert-with-preemptive-split","title":"B-tree insert with preemptive split","text":"<p>Multiple insertion schemes exist for 2-3-4 trees. The preemptive split insertion scheme always splits any full node encountered during insertion traversal. The  preemptive split insertion scheme ensures that any time a full node is split,  the parent node has room to accommodate the middle value from the child.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#104-2-3-4-tree-rotations-and-fusion","title":"10.4 2-3-4 tree rotations and fusion","text":"<p>Removing an item from a 2-3-4 tree may require rearranging keys to maintain  tree properties. A rotation is a rearrangement of keys between 3 nodes that  maintains all 2-3-4 tree properties in the process. The 2-3-4 tree removal  algorithm uses rotations to transfer keys between sibling nodes. A  right rotation on a node causes the node to lose one key and the node's  right sibling to gain one key. A left rotation on a node causes the node to  lose one key and the node's left sibling to gain one key.  </p> <p>A left rotation moves a key into the left sibling node. This cannot happen  if the node has no left sibling.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#fusion","title":"Fusion","text":"<p>A fusion is a combination of 3 keys: 2 from adjacent sibling nodes that have 1   key each, and a third from the parent of the siblings. Fusion is the inverse   operation of a split.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#105-2-3-4-tree-removal","title":"10.5 2-3-4 tree removal","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#merge_1","title":"Merge","text":"<p>Only nodes with exactly one key can be merged.  </p> <p>A node must have 2 or 3 keys to transfer a key to a an adjacent sibling during  a merge.  </p> <p>A node has exactly 3 keys after fusion  </p> <p>After a node is merged, the parent of the node will be left with 1,2, or 3 keys.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#removal_1","title":"Removal","text":"<p>Leaf Removal: Remove key 33    </p> <p> </p> <p>Merging makes no sense, get help</p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#106-python-2-3-4-trees","title":"10.6 Python 2-3-4 trees","text":"<p>See 10.6 BTree </p> <p>Insert the values:  15 42 77 18 90 21 36 19 89 47 28 39 55 73 99 15 47 40 19 55 77 58 89</p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#107-lab-itwrable-2-3-4-tree","title":"10.7 LAB Itwrable 2-3-4 tree","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#11-searching-and-sorting-algorithms","title":"11 Searching and sorting algorithms","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#111-searching-and-algorithms","title":"11.1 Searching and algorithms","text":"<p>Linear search is a search algorithm that starts from the beginning of a  list, and checks each element until the search key is found or the end of the  list is reached.  </p> <p>An algorithm's runtime is the time the algorithm takes to execute. </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#112-binary-search","title":"11.2 Binary Search","text":"<p>Binary search is a faster algorithm for searching a list if the list's  elements are sorted and directly accessible. Binary search first checks the  middle element of the list.  </p> <p>Efficiency: Number of steps to solve a binary search are floor(log2 N) + 1 </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#113-lab-binary-search-with-custom-comparer","title":"11.3 LAB: Binary search with custom comparer","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#114-python-linear-and-binary-search","title":"11.4 Python: Linear and binary search","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#115-constant-timee-operations","title":"11.5 Constant Timee Operations","text":"<p>Therefore, the theoretical analysis of an algorithm describes runtime in terms  of number of constant time operations, not nanoseconds. A constant time  operation is an operation that, for a given processor, always operates in the  same amount of time, regardless of input values.</p> <ul> <li> <p>Assignment operations like y = 10  </p> </li> <li> <p>Multiplication like 2 x 5  </p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#116-growth-of-functions-and-complexity","title":"11.6 Growth of functions and complexity","text":"<p>An algorithm with runtime complexity T(N) has a lower bound and an upper bound.</p> <ul> <li>Lower bound: A function f(N) that is \u2264 the best case T(N), for all values of N \u2265 1.</li> <li>Upper bound: A function f(N) that is \u2265 the worst case T(N), for all values of N \u2265 1.  </li> </ul> <p>I think the lower bound is always the polynomial. EX: best case runtimes is  T(N) = 3N + 6. The best case runtime complexity is 3N. Or if the best case is  2N^2 + 5N + 5, then the lower bound is 2N^2.  </p> <p>I think the upper bound is the sum of the integers in the polynomial. EX: a worst  case runtime of 3N^2 + 10N + 17 has the upper bound of 30N^2.  Or for  T(N) = 5N^2 + 7N, the upper bound is 12N^2.  </p> <p> </p> <p>O is Omicron horseshoe is Omega O with a center mark is theta  </p> <p></p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#117-o-notation","title":"11.7 O notation","text":"<p>Big O notation is a mathematical way of describing how a function (running  time, or runtime, of an algorithm) behaves in relation to the input size.  </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#determine-composite-big-o-notations","title":"Determine Composite Big O notations","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#common-big-o-complexities","title":"Common Big O complexities","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#constant-o1","title":"Constant - O(1)","text":"<pre><code>def find_min(x, y):\n   if x &lt; y:\n      return x\n   else:\n      return y\n</code></pre>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#logarithmic-olog-n","title":"Logarithmic - O(log N)","text":"<p>Binary Search </p> <pre><code>def binary_search(numbers, key):\n   low = 0\n   high = len(numbers) - 1\n\n   while high &gt;= low:\n      mid = (high + low) // 2\n      if numbers[mid] &lt; key:\n         low = mid + 1\n      elif numbers[mid] &gt; key:\n         high = mid - 1\n      else:\n         return mid\n   return -1  # not found\n</code></pre>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#linear-on","title":"Linear - O(N)","text":"<pre><code>def linear_search(numbers, key):\n    for i in range(len(numbers)):\n        if numbers[i] == key:\n             return i\n    return -1  # not found\n</code></pre>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#log-linear-on-log-n","title":"Log-Linear - O(N log N)","text":"<pre><code>def merge_sort(numbers, i, k):\n   if i &lt; k:\n      j = (i + k) // 2              # Find midpoint \n      merge_sort(numbers, i, j)     # Sort left part\n      merge_sort(numbers, j + 1, k) # Sort right part\n      merge(numbers, i, j, k)       # Merge parts\n</code></pre>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#quadratic-on2","title":"Quadratic - O(N^2)","text":"<pre><code>def selection_sort(numbers):\n    for i in range(len(numbers)):\n        index_smallest = i\n        for j in range(i + 1, len(numbers)):\n            if numbers[j] &lt; numbers[index_smallest]:\n                index_smallest = j\n\n        temp = numbers[i]\n        numbers[i] = numbers[index_smallest]\n        numbers[index_smallest] = temp\n</code></pre>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#exponential-ocn","title":"Exponential - O(c^N)","text":"<pre><code>def fibonacci(N):\n    if (1 == N) or (2 == N):\n        return N\n    return fibonacci(N-1) + fibonacci(N-2)\n</code></pre>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#118-algorithm-analysis","title":"11.8 Algorithm analysis","text":"<p>Worst-case runtime: longest execution  </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#constant-runtime","title":"Constant Runtime","text":"<p>Since constants are omitted in big-O notation, any constant number of constant  time operations is O(1). </p> <p>Ex: An algorithm with a single loop that executes five operations before the  loop, three operations in each loop iteration, and six operations after the  loop would have a runtime of <code>f(N) = 5 + 3N + 6</code>, which can be written as  <code>O(1) + O(N) + O(1) = O(N)</code> </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#nested-loop-big-o-notation","title":"Nested Loop Big O notation","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#119-algorithm-efficiency","title":"11.9  Algorithm efficiency","text":"<p>Algorithm efficiency is typically measured by the algorithm's computational  complexity. Computational complexity is the amount of resources used by  the algorithm. The most common resources considered are the runtime and  memory usage.  </p> <p>An algorithm's runtime complexity is a function, T(N), that represents the  number of constant time operations performed by the algorithm on an input of  size N.  </p> <p>An algorithm's space complexity is a function, S(N), that represents the  number of fixed-size memory units used by the algorithm for an input of size N.  Ex: The space complexity of an algorithm that duplicates a list of numbers is  S(N) = 2N + k, where k is a constant representing memory used for things like  the loop counter and list pointers.  </p> <p>An algorithm's auxiliary space complexity is the space complexity not  including the input data. Ex: An algorithm to find the maximum number in a  list will have a space complexity of S(N) = N + k, but an auxiliary space  complexity of S(N) = k, where k is a constant.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1110-recursive-definitions","title":"11.10 Recursive definitions","text":"<p>A recursive algorithm is an algorithm that breaks the problem into smaller  subproblems and applies the algorithm itself to solve the smaller subproblems.</p> <p>Because a problem cannot be endlessly divided into smaller subproblems, a  recursive algorithm must have a base case: A case where a recursive  algorithm completes without applying itself to a smaller subproblem.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1111-recursive-algorithms","title":"11.11 Recursive algorithms","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#fibonacci","title":"Fibonacci","text":"<p>The Fibonacci sequence is a numerical sequence where each term is the sum of the  previous 2 terms in the sequence, except the first 2 terms, which are 0 and 1. A recursive function can be used to calculate a Fibonacci number: A term in  the Fibonacci sequence.  </p> <pre><code>FibonacciNumber(termIndex) {\n   if (termIndex == 0)\n      return 0\n   else if (termIndex == 1)\n      return 1\n   else\n      return FibonacciNumber(termIndex - 1) + FibonacciNumber(termIndex - 2)\n}\n</code></pre>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#binary-search","title":"Binary Search","text":"<pre><code>function BinarySearch(numbers, low, high, key) {\n   if (low &gt; high)\n      return -1\n\n   mid = (low + high) / 2\n   if (numbers[mid] &lt; key) {\n      return BinarySearch(numbers, mid + 1, high, key)\n   }\n   else if (numbers[mid] &gt; key) {\n      return BinarySearch(numbers, low, mid - 1, key)\n   }\n   return mid\n}\n</code></pre>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1112-analyzing-the-time-complexity-of-recursive-algorithms","title":"11.12 Analyzing the time complexity of recursive algorithms","text":"<p>Runtime complexity of recursion: T(N) = O(1) + T(N / 2).  Such a function is known as a recurrence relation: A function f(N) that is  defined in terms of the same function operating on a value &lt; N. T must be on both sides of the equation </p> <p> </p> <p>A useful tool for solving recurrences is a recursion tree: A visual diagram  of an operation done by a recursive function, that separates operations done  directly by the function and operations done by recursive calls.</p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1113-overview-of-fast-sorting-algorithms","title":"11.13 Overview of fast sorting algorithms","text":"<p>A fast sorting algorithm is a sorting algorithm that has an average  runtime complexity of O(NlogN) or better:</p> <p> </p> <p>A element comparison sorting algorithm is a sorting algorithm that operates on  an array of elements that can be compared to each other. Radix Sort cannot be  an element comparison sorting algorithm.  </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1114-sorting-introduction","title":"11.14 Sorting Introduction","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1115-selection-sort","title":"11.15 Selection Sort","text":"<p>See 11.15 Selection Sort file  </p> <p>Selection sort is a sorting algorithm that treats the input as two parts,  sorted and unsorted, and repeatedly selects the proper next value to move from  the unsorted part to the end of the sorted part.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1116-python-selection-sort","title":"11.16 Python Selection Sort","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1117-insertion-sort","title":"11.17 Insertion Sort","text":"<p>Insertion sort is a sorting algorithm that treats the input as two parts,  sorted and unsorted, and repeatedly inserts the next value from the unsorted  part into the correct location in the sorted part.  </p> <p>Runtime: O(N^2)  </p> <p>For sorted or nearly sorted inputs, insertion sort's runtime is O(N). A nearly  sorted list contains only a few elements not in sorted order. Ex:  [4, 5, 17, 25, 89, 14] is nearly sorted having only one element not in the  sorted position.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1118-python-insertion-sort","title":"11.18 Python Insertion Sort","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1119-shell-sort","title":"11.19 Shell Sort","text":"<p>Shell sort is a sorting algorithm that treats the input as a collection of  interleaved lists, and sorts each list individually with a variant of the  insertion sort algorithm. Shell sort uses gap values to determine the number  of interleaved lists. </p> <p>A gap value is a positive integer representing the  distance between elements in an interleaved list. For each interleaved list,  if an element is at index i, the next element is at index i + gap value.  </p> <p>Shell sort begins by choosing a gap value K and sorting K interleaved lists  in place.  </p> <p>Shell sort divides the list up into gaps. Each gap is sorted, then the gaps are  returned to the list. The list is not fully sorted, but there will be fewer  operations to perform using the insertion sort to finally get the order right.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1120-python-shell-sort","title":"11.20 Python Shell Sort","text":"<p>See example 11.20_shell_sort </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1121-quicksort","title":"11.21 Quicksort","text":"<p>Quicksort is a sorting algorithm that repeatedly partitions the input into  low and high parts (each unsorted), and then recursively sorts each of those  parts. To partition the input, quicksort chooses a pivot to divide the data  into low and high parts. </p> <p>The pivot can be any value within the array, commonly the value of the  middle array element. Ex: For the list [4, 34, 10, 25, 1], the middle element  is located at index 2 (the middle of indices 0..4) and has a value of 10.</p> <p>h is the pivot. The pivot and everything to the left is considered low partition. If there are multiple values equal to the pivot, the value/pivot may appear in the  high partition </p> <p>Quicksort runtime: O(N^2)  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1122-python-quick-sort","title":"11.22 Python Quick Sort","text":"<p>see 11.22_quick_sort  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1123-merge-sort","title":"11.23 Merge Sort","text":"<p>Merge sort is a sorting algorithm that divides a list into two halves,  recursively sorts each half, and then merges the sorted halves to produce a  sorted list.   </p> <p> </p> <p>The index variable i is the index of the first element in the list, and the  index variable k is the index of the last element. The index variable j is used to divide the list into two halves. Elements from i to j are in the left half,  and elements from j + 1 to k are in the right half.  </p> <p>Merge Sort runtime = O(N log N)  </p> <p>Requires O(N) additional memory elements for the temporary array  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1124-python-merge-sort","title":"11.24 Python Merge Sort","text":"<p>see 11.24_merge_sort file  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1125-lab-natural-merge-sort","title":"11.25 LAB: Natural merge sort","text":"<p>The merge sort algorithm recursively divides the list in half until a list with  one element is reached. A variant of merge sort, called natural merge sort,  instead finds already-sorted runs of elements and merges the runs together.  </p> <p>Assignment:  </p> <p>Step 1: Implement the get_sorted_run_length() method Implement the get_sorted_run_length() method in NaturalMergeSorter.py. Access NaturalMergeSorter.py by clicking on the orange arrow next to main.py at the top of the coding window.</p> <p>get_sorted_run_length() has two parameters:</p> <ul> <li>integer_list: a list of integers and</li> <li>start_index: an integer for the run's starting index. The method returns the number of list elements sorted in ascending order, starting at start_index and ending either at the end of the sorted run, or the end of the list, whichever comes first. The method returns 0 if start_index is out of bounds.</li> </ul> <p>File main.py has several test cases for get_sorted_run_length() that can be run by clicking the \"Run program\" button. One test case also exists for natural_merge_sort(), but that can be ignored until step two is completed.</p> <p>The program's output does not affect grading.</p> <p>Submit for grading to ensure that the get_sorted_run_length() unit tests pass before proceeding.</p> <p>Step 2: Implement the natural_merge_sort() method Implement the natural_merge_sort() method in NaturalMergeSorter.py. natural_merge_sort() must:</p> <ul> <li>Start at index i=0</li> <li>Get the length of the first sorted run, starting at i</li> <li>Return if the first run's length equals the list's length</li> <li>If the first run ends at the list's end, reassign i=0 and repeat step 2</li> <li>Get the length of the second sorted run, starting immediately after the first</li> <li>Merge the two runs with the provided merge() method</li> <li>Reassign i with the first index after the second run, or 0 if the second run ends at the list's end</li> <li>Go to step 2</li> </ul> <p>The assignment is in 11.25 Natural Merge Sort folder  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1126-radix-sort","title":"11.26 Radix Sort","text":"<p>Radix sort is a sorting algorithm designed specifically for integers. The algorithm makes use of a concept called buckets and is a type of bucket sort.</p> <p>Any array of integer values can be subdivided into buckets by using the integer  values' digits. A bucket is a collection of integer values that all share a  particular digit value. Ex: Values 57, 97, 77, and 17 all have a 7 as the 1's  digit, and would all be placed into bucket 7 when subdividing by the 1's digit.  </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1127-python-radix-sort","title":"11.27 Python Radix Sort","text":"<p>See example 11.27_radix_sort  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1128-python-sorting-with-different-operators","title":"11.28 Python: Sorting with different operators","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1129-bubble-sort","title":"11.29 Bubble Sort","text":"<p>Bubble sort is a sorting algorithm that iterates through a list, comparing  and swapping adjacent elements if the second element is less than the first  element. Bubble sort uses nested loops. Given a list with N elements, the  outer i-loop iterates N - 1 times. Each iteration moves the  i^th largest element into sorted position. The inner j-loop iterates  through all adjacent pairs, comparing and swapping adjacent elements as  needed, except for the last i pairs that are already in the correct position.</p> <p>Because of the nested loops, bubble sort has a runtime of O(N^2). Bubble sort  is often considered impractical for real-world use because many faster  sorting algorithms exist.  </p> <pre><code>BubbleSort(numbers, numbersSize) {\n   for (i = 0; i &lt; numbersSize - 1; i++) {\n      for (j = 0; j &lt; numbersSize - i - 1; j++) {\n         if (numbers[j] &gt; numbers[j+1]) {\n            temp = numbers[j]\n            numbers[j] = numbers[j + 1]\n            numbers[j + 1] = temp\n         }\n      }\n   }\n}\n</code></pre>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1130-quickselect","title":"11.30 Quickselect","text":"<p>Quickselect is an algorithm that selects the k^th smallest element in a list. Ex: Running quickselect on the list  (15, 73, 5, 88, 9) with k = 0, returns the smallest element in the list, or 5.  </p> <p>For a list with N elements, quickselect uses quicksort's partition function to  partition the list into a low partition containing the X smallest elements and a  high partition containing the N-X largest elements.  </p> <p>Best case average runtime is O(N), worst case goes through the whole list O(N^2)  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1131-python-quickselect","title":"11.31 Python Quickselect","text":"<p>see example 11.31_quickselect</p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1132-bucket-sort","title":"11.32 Bucket Sort","text":"<p>Bucket sort is a numerical sorting algorithm that distributes numbers into  buckets, sorts each bucket with an additional sorting algorithm, and then  concatenates buckets together to build the sorted result.  </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1133-lab-descending-selection-sort-with-output-during-execution","title":"11.33 LAB: Descending selection sort with output during execution","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1134-lab-sorting-user-ids","title":"11.34 LAB: Sorting user IDs","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1135-lab-insertion-sort","title":"11.35 LAB: Insertion Sort","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1136-lab-merge-sort","title":"11.36 LAB: Merge sort","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#1137-lab-binary-search","title":"11.37 LAB: Binary Search","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#12-python","title":"12 Python","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#121-programming-general","title":"12.1 Programming (General)","text":"<p>computational thinking: creating a sequence of instructions to solve a problem</p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#122-programming-using-python","title":"12.2 Programming using Python","text":"<p>An interactive interpreter is a program that allows the user to execute one  line of code at a time.  </p> <p>The interactive interpreter displays a prompt (\"&gt;&gt;&gt;\") that indicates the  interpreter is ready to accept code.   </p> <p>Expressions are code that return a value when evaluated  </p> <p>A statement is a program instruction. A program mostly consists of a series  of statements, and each statement usually appears on its own line.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#123-basic-input-and-output","title":"12.3 Basic input and output","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#print","title":"print()","text":"<p>Each use of print() outputs on a new line. However, sometimes a programmer may  want to keep output on the same line. Adding end=' ' inside of print() keeps the  output of the next print on the same line, separated by a single space character.  Ex: print('Hello', end=' ')  </p> <p>Output can be moved to the next line using the newline character \"\\n\".  Ex: print('1\\n2\\n3') prints \"1\" on the first line, \"2\" on the second line,  and \"3\" on the third line of output.  </p> <p>\"\\t\" to insert a tab  </p> <p>Any space, tab, or newline is called whitespace.</p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#input","title":"input()","text":"<p>input() will read text entered by the user, and assign the result as a new  string to the best_friend variable  </p> <p>Convert string input to int with <code>int(input())</code> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#errors","title":"Errors","text":"<p>Python interpreter is able to detect syntax errors when the program is initially  loaded, prior to actually executing any of the statements in the code.  </p> <p>Common error types:</p> Error type Description SyntaxError The program contains invalid code that cannot be understood. IndentationError The lines of the program are not properly indented. ValueError An invalid value is used, which can occur if giving letters to int(). NameError The program tries to use a variable that does not exist. TypeError An operation uses incorrect types, which can occur if adding an integer to a string. <p>Logic Errors: often called bugs, occur by the programer coding incorrect logic  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#125-development-environment","title":"12.5 Development Environment","text":"<p>Python Integrated Development Envirionments (IDE):  </p> <ul> <li> <p>IDLE is the official Python IDE that is distributed with the installation of  Python from https://python.org. IDLE provides a basic environment for editing and running programs.</p> </li> <li> <p>PyDev (http://pydev.org) is a plugin for the popular Eclipse program. PyDev includes extra features such as code completion, spell checking, and debugging, which are useful tools while programming.</p> </li> <li> <p>For learning purposes, web-based tools like CodePad (http://www.codepad.co) or Repl (http://www.repl.it) are helpful.</p> </li> </ul>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#126-computers-and-programs-general","title":"12.6 Computers and programs (General)","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#127-computer-tour","title":"12.7 Computer Tour","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#128-language-history","title":"12.8 Language History","text":"<p>Sripting Language: </p> <p>Interpreted execution is slower because it requires multiple interpreter  instructions to execute one script instruction. But the advantages include  avoiding the compilation step during programming and running the same script on  different processors as long as each processor has an interpreter installed.</p> <p>Python 3.0 is not backward compatible, so Python 2.7 programs cannot run on  Python 3.0 or later interpreters.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#199-why-whitespace-matters","title":"19.9 Why whitespace matters","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#20-classes","title":"20 Classes","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#201-classes-introduction","title":"20.1 Classes Introduction","text":"<p>In programming, an object is a grouping of data (variables) and operations  that can be performed on that data (functions or methods).  </p> <p>Abstraction occurs when a user interacts with an object at a high level,  allowing lower-level internal details to remain hidden   </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#202-classes-grouping-data","title":"20.2 Classes Grouping Data","text":"<p>The class keyword can be used to create a user-defined type of object  containing groups of related variables and functions.  </p> <p>An instantiation operation is performed by \"calling\" the class, using  parentheses like a function call as in my_time = Time(). An instantiation  operation creates an instance, which is an individual object of the given  class. An instantiation operation automatically calls the __init__ method  defined in the class definition. A method is a function defined within a  class. The __init__ method, commonly known as a constructor, is  responsible for setting up the initial state of the new instance.   </p> <p>The __init__ method has a single parameter, \"self\", that automatically references  the instance being created.  </p> <p>Attributes can be accessed using the attribute reference operator \".\"  (sometimes called the member operator or dot notation).  </p> <p>Good practice is to use initial capitalization for each word in a class name.  So, appropriate names might include LunchMenu, CoinAmounts, or PDFFileContents.  </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#203-instance-methods","title":"20.3 Instance methods","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#204-class-and-instance-object-types","title":"20.4 CLass and instance object types","text":"<p>A program with user-defined classes contains two additional types of objects:  class objects and instance objects. A class object acts as a factory  that creates instance objects. When created by the class object, an instance  object is initialized via the __init__ method.  </p> <p>A class attribute is shared among all instances of that class. Class attributes  are defined within the scope of a class.  </p> <p>An instance attribute can be unique to each instance.  </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#205-class-example-seat-reservation-system","title":"20.5 Class example: Seat reservation system","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#206-class-constructors","title":"20.6 Class Constructors","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#207-class-interfaces","title":"20.7 Class Interfaces","text":"<p>A class interface consists of the methods that a programmer calls to create,   modify, or access a class instance.   </p> <p>Good practice is to prepend an underscore to methods only used internally by   a class.  </p> <p>## 20.8 Class Customization  </p> <p>Class customization is the process of defining how an instance of a class   should behave for some common operations.   </p> <p>Class customization can redefine the functionality of built-in operators   like <code>&lt;, &gt;=, +, -, and *</code> when used with class instances, a technique known as   operator overloading.</p> <p>The below code shows overloading of the less-than (\\&lt;) operator of the Time  class by defining a method with the __lt__ special method name.  </p> <p>Methods like __lt__ above are known as rich comparison methods.  </p> <p> </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#209-more-operator-overloading-classes-as-numeric-types","title":"20.9 More operator overloading: Classes as numeric types","text":"<p>To handle subtraction of arbitrary object types, the built-in isinstance()  function can be used. The isinstance() function returns a True or False Boolean  depending on whether a given variable matches a given type.  </p> <pre><code>def __sub__(self, other):\n    if isinstance(other, int): # right op is integer\n        return Time24(self.hours - other, self.minutes)\n    # more code...\n</code></pre>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#2010-memory-allocation-and-garbage-collection","title":"20.10 Memory allocation and garbage collection","text":"<p>The process of an application requesting and being granted memory is known as  memory allocation. Memory used by a Python application must be granted to the  application by the operating system.</p> <p>The Python runtime handles memory allocation for the programmer  </p> <p>Memory deallocation is the act of freeing the memory that stores  variables or objects in a program. Python is a managed language, meaning  objects are deallocated automatically by the Python runtime, and not by the  programmer's code.   </p> <p>A reference count is an integer counter that represents how many variables  reference an object. When an object's reference count is 0, that object is no  longer referenced. Python's garbage collector will deallocate objects with a  reference count of 0.   </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#2011-lab-car-value-classes","title":"20.11 LAB: Car Value (Classes)","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#2012-lab-nutritional-information-classesconstructors","title":"20.12 LAB: Nutritional information (classes/constructors)","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#2013-lab-artwork-label-classesconstructors","title":"20.13 LAB: Artwork label (classes/constructors)","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#2014-lab-triangle-area-comparison-classes","title":"20.14 LAB: Triangle area comparison (classes)","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#2015-lab-winning-team-classes","title":"20.15 LAB: Winning team (classes)","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#2016-lab-vending-machine","title":"20.16 LAB: Vending machine","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#recursion","title":"Recursion","text":""},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#211-recursive-functions","title":"21.1 Recursive Functions","text":"<p>A function that calls itself </p>"},{"location":"WGU_Notes/C949_Data_Structures_I/C949_Data_Structures_I/#212-recursive-algorithm-search","title":"21.2 Recursive algorithm: Search","text":"<p><pre><code>def find(low, high):\n    mid = (high + low) // 2  # Midpoint of low..high\n    answer  = input(f'Is it {mid}? (l/h/y): ')\n\n    if (answer != 'l') and (answer != 'h'):  # Base case\n        print('Got it!')\n    else:\n        if answer == 'l':\n            find(low, mid)\n        else:\n            find(mid+1, high)\n\nprint('Choose a number from 0 to 100.')\nprint('Answer with:')\nprint('   l (your num is lower)')\nprint('   h (your num is higher)')\nprint(' any other key (guess is right).')\n\nfind(0, 100)\n</code></pre> Response: <pre><code>Choose a number from 0 to 100.\nAnswer with:\n   l (your num is lower)\n   h (your num is higher)\n any other key (guess is right).\nIs it 50? (l/h/y): l\nIs it 25? (l/h/y): h\nIs it 38? (l/h/y): h\nIs it 44? (l/h/y): l\nIs it 41? (l/h/y): y\nGot it!\n</code></pre></p> <p>The recursive function has an if-else statement, where the if branch is the  end of the recursion, known as the base case.</p>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/","title":"Lesson 1 Introduction","text":""},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#11-data-structures","title":"1.1 Data Structures","text":"<p>data structure is a way of organizing, storing, and performing operations  on data. </p> Data structure Description Record A record is the data structure that stores subitems, often called fields, with a name associated with each subitem. Array An array is a data structure that stores an ordered list of items, where each item is directly accessible by a positional index. Linked list A linked list is a data structure that stores an ordered list of items in nodes, where each node stores data and has a pointer to the next node. Binary tree A binary tree is a data structure in which each node stores data and has up to two children, known as a left child and a right child. Hash table A hash table is a data structure that stores unordered items by mapping (or hashing) each item to a location in an array. Heap A max-heap is a tree that maintains the simple property that a node's key is greater than or equal to the node's childrens' keys. A min-heap is a tree that maintains the simple property that a node's key is less than or equal to the node's childrens' keys. Graph A graph is a data structure for representing connections among items, and consists of vertices connected by edges. A vertex represents an item in a graph. An edge represents a connection between two vertices in a graph."},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#14-abstract-data-types","title":"1.4 Abstract Data Types","text":"Abstract data type Description Common underlying data structures List A list is an ADT for holding ordered data. Array, linked list Dynamic array A dynamic array is an ADT for holding ordered data and allowing indexed access. Array Stack A stack is an ADT in which items are only inserted on or removed from the top of a stack. Linked list Queue A queue is an ADT in which items are inserted at the end of the queue and removed from the front of the queue. Linked list Deque A deque (pronounced \"deck\" and short for double-ended queue) is an ADT in which items can be inserted and removed at both the front and back. Linked list Bag A bag is an ADT for storing items in which the order does not matter and duplicate items are allowed. Array, linked list Set A set is an ADT for a collection of distinct items. Binary search tree, hash table Priority queue A priority queue is a queue where each item has a priority, and items with higher priority are closer to the front of the queue than items with lower priority. Heap Dictionary (Map) A dictionary is an ADT that associates (or maps) keys with values. Hash table, binary search tree"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#18-constant-time-operations","title":"1.8 Constant time operations","text":"<ul> <li> <p>Addition, subtraction, multiplication, division of fixed size integer or floating point  values  </p> </li> <li> <p>Assignment of a reference, pointer, or other fixed size data value (<code>x = 110</code>) </p> </li> <li> <p>Comparison of twor fixed size data values (like an <code>if</code> statement)  </p> </li> <li> <p>Read or write an array element at a particular index (<code>x = arr[index]</code>)  </p> </li> </ul>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#2","title":"2","text":"<p>Self-adjusting algorithms: https://webdiis.unizar.es/asignaturas/TAP/material/self_adjusting/9002d.htm  </p>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#5-graphs","title":"5 Graphs","text":""},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#53-ajdacency-list","title":"5.3 Ajdacency List","text":"<p>List of adjacent vertices</p> <p> </p> <p>A sparse graph has far fewer edges than the maximum possible. Many graphs are sparse, like those representing a computer network, flights between cities, or friendships among people (every person isn't friends with every other person). Thus, the adjacency list graph representation is very common.</p>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#54-adjacency-matix","title":"5.4 Adjacency Matix","text":"<p>Each vertex is assigned to a matrix row and column, and a matrix element is 1 if the corresponding two vertices have an edge or is 0 otherwise</p> <p> </p>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#55-breadth-first-search","title":"5.5 Breadth-first search","text":"<p>BST is a traversal that visits a starting vertex, then all vertices of distance 1 from that vertex, then of distance 2, and so on, without revisiting a vertex.</p> <ul> <li>Also known as a graph traversal </li> </ul> <p> </p>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#breadth-first-seach-algorithm","title":"Breadth-first seach algorithm","text":"<pre><code>BFS(startV) {\n   Enqueue startV in frontierQueue\n   Add startV to discoveredSet\n\n   while ( frontierQueue is not empty ) {\n      currentV = Dequeue from frontierQueue\n      \"Visit\" currentV\n      for each vertex adjV adjacent to currentV {\n         if ( adjV is not in discoveredSet ) {\n            Enqueue adjV in frontierQueue\n            Add adjV to discoveredSet\n         }\n      }\n   }\n}\n</code></pre>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#56-depth-first-search-dfs","title":"5.6 Depth First Search (DFS)","text":"<p>A depth-first search (DFS) is a traversal that visits a starting vertex, then visits every vertex along each path starting from that vertex to the path's end before backtracking.</p>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#depth-first-search-algorithm","title":"Depth-first search algorithm","text":"<pre><code>DFS(startV) {\n   Push startV to stack\n\n   while ( stack is not empty ) {\n      currentV = Pop stack\n      if ( currentV is not in visitedSet ) {\n         \"Visit\" currentV\n         Add currentV to visitedSet\n         for each vertex adjV adjacent to currentV\n            Push adjV to stack\n      }\n   }\n}\n</code></pre>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#recursive","title":"Recursive:","text":"<pre><code>RecursiveDFS(currentV) {\n   if ( currentV is not in visitedSet ) {\n      Add currentV to visitedSet\n      \"Visit\" currentV\n      for each vertex adjV adjacent to currentV {\n         RecursiveDFS(adjV)\n      }\n   }\n}\n</code></pre>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#57-directed-graph","title":"5.7 Directed Graph","text":"<p>A directed edge is a connection between a starting vertex and a terminating vertex. In a directed graph, a vertex Y is adjacent to a vertex X, if there is an edge from X to Y.  </p> <ul> <li>A path is a sequence of directed edges leading from a source (starting) vertex to a destination (ending) vertex.</li> <li>A cycle is a path that starts and ends at the same vertex. A directed graph is cyclic if the graph contains a cycle, and acyclic if the graph does not contain a cycle.</li> </ul> <p> </p>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#58-weighted-graph","title":"5.8 Weighted Graph","text":"<p>There is a weight associated with each edge. Can be a directed or undirected graph    </p> <p> </p>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#59-dijkstas-shortest-path","title":"5.9 Dijksta's Shortest Path","text":"<ul> <li> <p>Finds the shortes path between vertices in a graph by edge weights  </p> </li> <li> <p>Cannot have negative edge weights (Bellman-Ford's algorithm can, but it is slower)  </p> </li> <li> <p>There are factors for the runtime, but O(V<sup>2</sup>) </p> </li> </ul> <p> </p>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#510-bellman-fords-shortest-path","title":"5.10 Bellman-Ford's shortest path","text":"<p>Slower than Dijkstra, but can calculate negative edge weights. Runtime is O(VE)    </p> <p> </p>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#bellman-ford-algorithm","title":"Bellman-Ford Algorithm","text":"<pre><code>BellmanFord(startV) {\n   for each vertex currentV in graph {\n      currentV\u21e2distance = Infinity\n      currentV\u21e2predV = null\n   }\n\n   // startV has a distance of 0 from itself\n   startV\u21e2distance = 0                \n\n   for i = 1 to number of vertices - 1 { // Main iterations\n      for each vertex currentV in graph {\n         for each vertex adjV adjacent to currentV {\n            edgeWeight = weight of edge from currentV to adjV\n            alternativePathDistance = currentV\u21e2distance + edgeWeight\n\n            // If shorter path from startV to adjV is found,\n            // update adjV's distance and predecessor\n            if (alternativePathDistance &lt; adjV\u21e2distance) {\n               adjV\u21e2distance = alternativePathDistance\n               adjV\u21e2predV = currentV\n            }\n         }\n      }\n   }\n\n   // Check for a negative edge weight cycle\n   for each vertex currentV in graph {\n      for each vertex adjV adjacent to currentV {\n         edgeWeight = weight of edge from currentV to adjV\n         alternativePathDistance = currentV\u21e2distance + edgeWeight\n\n         // If shorter path from startV to adjV is still found,\n         // a negative edge weight cycle exists\n         if (alternativePathDistance &lt; adjV\u21e2distance) {\n            return false\n         }\n      }\n   }\n\n   return true\n}\n</code></pre>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#511-topological-sort","title":"5.11 Topological Sort","text":"<p>A topological sort of a directed, acyclic graph produces a list of the graph's vertices such that for every edge from a vertex X to a vertex Y, X comes before Y in the list.</p> <p>Runtime of O(|V|+|E|)  </p> <p> </p>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#topological-sort-algorithm","title":"Topological Sort Algorithm","text":"<pre><code>GraphTopologicalSort(graph) {\n   resultList = empty list of vertices\n   noIncoming = list of all vertices with no incoming edges\n   remainingEdges = list of all edges in the graph\n\n   while (noIncoming is not empty) {\n      currentV = remove any vertex from noIncoming\n      Add currentV to resultList\n      outgoingEdges = remove currentV's outgoing edges from remainingEdges\n      for each edge currentE in outgoingEdges {\n         inCount = GraphGetIncomingEdgeCount(remainingEdges, currentE\u21e2toVertex)\n         if (inCount == 0)\n            Add currentE\u21e2toVertex to noIncoming\n      }\n   }\n   return resultList\n}\n</code></pre>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#512-minimum-spanning-tree","title":"5.12 Minimum Spanning Tree","text":"<p>A graph's minimum spanning tree is a subset of the graph's edges that connect all vertices in the graph together with the minimum sum of edge weights. The graph must be weighted and connected. A connected graph contains a path between every pair of vertices.  </p> <p> </p>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#kruskals-minimum-spanning-tree-algorithm","title":"Kruskal's minimum spanning tree algorithm","text":"<p>Determines the subset of a graph's edges that connect all the graph's vertices with the minimum possible sum of edge weights.</p> <ul> <li> <p>Space complexity: O(|E|+|V|)  </p> </li> <li> <p>Runtime complexity: O(|E|log|E|)  </p> </li> </ul> <pre><code>KruskalsMinimumSpanningTree(graph) {\n   edgeList = list containing all edges from graph\n   vertexSets = collection of vertex sets, empty initially\n   for each vertex V in graph\n      Add new set containing only V to vertexSets\n   resultList = new, empty set of edges\n\n   while (vertexSets\u21e2length &gt; 1 &amp;&amp; edgeList\u21e2length &gt; 0) {\n      nextEdge = remove edge with minimum weight from edgeList\n      vSet1 = set in vertexSets containing nextEdge\u21e2vertex1\n      vSet2 = set in vertexSets containing nextEdge\u21e2vertex2\n      if (vSet1 != vSet2) {\n         Add nextEdge to resultList\n         Remove vSet1 and vSet2 from vertexSets\n         merged = union(vSet1, vSet2)\n         Add merged to vertexSets\n      }\n   }\n   return resultList\n}\n</code></pre>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#513-all-pairs-shortes-path","title":"5.13 All pairs shortes path","text":"<p>An all pairs shortest path algorithm determines the shortest path between all possible pairs of vertices in a graph.</p> <p> </p>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#floyd-warshall-algorithm","title":"Floyd-Warshall algorithm","text":"<p>Cannot have negative cycles.  This will generate a |V|x|V| matrix of values representing the shortest path lenghts between all vertex pairs in a graph.</p> <p>Runtime of O(|V|<sup>3</sup>), Space complexity of Runtime of O(|V|<sup>2</sup>)</p> <pre><code>FloydWarshallAllPairsShortestPath(graph) {\n   numVertices = graph\u21e2vertexCount\n   // distMatrix is a numVertices x numVertices matrix\n   set all values in distMatrix to \u221e\n   set each distance for vertex to same vertex to 0\n   for each edge in graph\n      distMatrix[edge\u21e2fromVertex][edge\u21e2toVertex] = edge\u21e2weight\n\n   for (k = 0; k &lt; numVertices; k++) {\n      for (toIndex = 0; toIndex &lt; numVertices; toIndex++) {\n         for (fromIndex = 0; fromIndex &lt; numVertices; fromIndex++) {\n            currentLength = distMatrix[fromIndex][toIndex]\n            possibleLength =\n               distMatrix[fromIndex][k] +\n               distMatrix[k][toIndex]\n            if (possibleLength &lt; currentLength)\n               distMatrix[fromIndex][toIndex] = possibleLength\n         }\n      }\n   }\n   return distMatrix\n}\n</code></pre>"},{"location":"WGU_Notes/C950_Data_Structures_II/C950_Data_Structures_II/#floyd-warshall-algorithm-path-reconstruction","title":"Floyd-Warshall algorithm: Path Reconstruction","text":"<p>Since the matrix only stores the path length, the path itself can be reconstructed with the following algorithm  </p> <pre><code>FloydWarshallReconstructPath(graph, startVertex, endVertex, distMatrix) {\n   path = new, empty path\n\n   // Backtrack from the ending vertex\n   currentV = endVertex\n   while (currentV != startVertex) {\n      incomingEdges = all edges in the graph incoming to current vertex\n      for each edge currentE in incomingEdges {\n         expected = distMatrix[startVertex][currentV] - currentE\u21e2weight\n         actual = distMatrix[startVertex][currentE\u21e2fromVertex]\n         if (expected == actual) {\n            currentV = currentE\u21e2fromVertex\n            Prepend currentE to path\n            break\n         }\n      }\n   }\n\n   return path\n}\n</code></pre>"},{"location":"WGU_Notes/C951_AI/C951_ai/","title":"C951 Artificial Intelligence","text":"<p>Resources:  </p> <p>Russell, S. J. &amp; Norvig, P. (2020). Artificial intelligence: A modern approach (4th ed.). Upper Saddle River, NJ: Pearson. ISBN 9780134610993   </p>"},{"location":"WGU_Notes/C951_AI/C951_ai/#chapter-1-introduction","title":"Chapter 1, Introduction","text":""},{"location":"WGU_Notes/C951_AI/C951_ai/#11-what-is-ai","title":"1.1 What is AI?","text":"<p>Human vs. Rational, Thought vs. Behavior to determine intelligence  </p> <p>Turing Test: A computer passes the test if a human interrogator, after posing some written questions, cannot tell whether the written responses come from a person or from a computer.  </p> <p>The computer would need the following capabilities:</p> <ul> <li> <p>natural language processing to communicate successfully in a human language;</p> </li> <li> <p>knowledge representation to store what it knows or hears;</p> </li> <li> <p>automated reasoning to answer questions and to draw new conclusions;</p> </li> <li> <p>machine learning to adapt to new circumstances and to detect and extrapolate patterns.  </p> </li> </ul> <p>Total Turing test: Turing did not consider physical simulation as part of the demonstration  of intelligence. The total Turing test includes a physical interaction with objects:  </p> <ul> <li> <p>computer vision and speech recognition to perceive the world;</p> </li> <li> <p>robotics to manipulate objects and move about.  </p> </li> </ul> <p>We can learn about human thought in three ways:</p> <ul> <li> <p>introspection: trying to catch our own thoughts as they go by;</p> </li> <li> <p>psychological experiments: observing a person in action;</p> </li> <li> <p>brain imaging: observing the brain in action.  </p> </li> </ul> <p>Cognitive science brings together computer models from AI and experimental techniques from psychology to construct precise and testable theories of the human mind.  </p> <p>Socrates is a man and all men are mortal, thus Socrates is am mortal; example of Aristotle's syllogisms. These laws of thought initiated the field called logic.  </p> <p>Logic requires certainty, but certainty does not exist for answers in politics or  warefare, so the theory of probability is used to provide answers where certainty  is lacking.  </p> <p>An agent is just something that acts.  </p> <p>A rational agent is one that acts so as to achieve the best outcome or, when there is uncertainty, the best expected outcome.</p> <p>Limited rationality: acting appropriately when there is not enough time to do all the computations one might like. Coming up  with the best answer for the time and resources given.  </p> <p>a priori: known from general knowledge (all bachelors are unmarried, 2+2=4)  </p> <p>a posteriori: known from experience (the sky is blue, because I have seen it)  </p> <p>value alignment problem: the values or objectives put into the machine must be aligned with those of the human.  </p>"},{"location":"WGU_Notes/C951_AI/C951_ai/#12-the-foundation-of-artificial-intelligence","title":"1.2 The Foundation of Artificial Intelligence","text":"<p>Persons that contributed through history towards logical resoning in AI: - Aristotle - Ramon Llull: created a system of reasoning, tried to implement a mechanical device for it. - Thomas Hobbes: Leviathan, idea of a thinking machine - Rene Descarte: Dualism </p> <p>Descartes was a proponent of dualism. He held that there is a part of the human mind (or soul or spirit) that is outside of nature, exempt from physical laws. Animals, on the other hand, did not possess this dual quality; they could be treated as machines.  </p> <ul> <li>Materialism is the opposite of Dualism  </li> <li>Empiricism: started with Francis Bacon, characterized by a dictum of John Locke \"Nothing is in the understanding, which was not first in the senses\"  </li> <li>Induction: David Hume, A Treatise of Human Nature </li> <li>Logical Positivism: a combination of rationalism and empiricism  </li> <li>utilitarianism: that rational decision making based on maximizing utility should apply to all spheres of human activity, including public policy decisions made on behalf of many individuals. Type of consequentialism    </li> <li>consequentialism: the idea that what is right and wrong is determined by the expected outcomes of an action.  </li> <li>deontological ethics: which \u201cdoing the right thing\u201d is determined not by outcomes but by universal social laws that govern allowable actions, such as \u201cdon\u2019t lie\u201d or \u201cdon\u2019t kill.\u201d  </li> </ul> <p>a problem is called intractable if the time required to solve instances of the problem grows exponentially with the size of the instances.  </p> <p>any problem class to which the class of NP-complete problems can be reduced is likely to be intractable.  </p> <p>Contributors to milestones in AI: - Marvin Minsky - John McCarthy - Allen Newell - Herbert Simon - Ed Feigenbaum - Raj Reddy - Judea Pearl - Yoshua Bengio - Geoffrey Hinton  - Yann LeCun  </p> <p>Hebbian Learning </p> <p>Deep learning refers to machine learning using multiple layers of simple, adjustable computing elements. - Relies on powerful hardware - Large amounts of training data  </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/","title":"Unit 1","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#some-algorithms-to-look-up","title":"Some algorithms to look up:","text":"<p>https://www.youtube.com/watch?v=DjYZk8nrXVY</p> <ul> <li> <p>Prefix Sum  </p> </li> <li> <p>Two Pointers  </p> </li> <li> <p>Sliding Window  </p> </li> <li> <p>Fast and Slow pointers  </p> </li> <li> <p>Linked-List in place reversal  </p> </li> <li> <p>Monotonic Stack  </p> </li> <li> <p>Top 'k' Element  </p> <ul> <li> <p>Find 'k' largest: use min heap </p> </li> <li> <p>Find 'k' smallest: use max heap  </p> </li> </ul> </li> <li> <p>Overalpping Intervals  </p> </li> <li> <p>Modified Binary Search  </p> </li> <li> <p>Binary Tree Traversal  </p> </li> <li> <p>Depth First Search  </p> </li> <li> <p>Breadth First Search  </p> </li> <li> <p>Matrix Traversal  </p> </li> <li> <p>Back Tracking  </p> </li> <li> <p>Dynamic Programming  </p> </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#11-algorithms","title":"1.1 Algorithms","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#12-algorithm-structures","title":"1.2 Algorithm Structures","text":"<p>Module 1 will cover these lessons:  </p> <ul> <li>Introduction to algorithms</li> <li>If-then algorithms</li> <li>For-loop algorithms</li> <li>While-loop algorithms</li> <li>Nested loop algorithms</li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#13-introduction-to-algorithms","title":"1.3 Introduction to Algorithms","text":"<p>An algorithm is a step-by-step method for solving a problem. A description  of an algorithm specifies the input to the problem, the output to the problem,  and the sequence of steps to be followed to obtain the output from the input.</p> <p>There are three basic building blocks of an algorithm: </p> <ul> <li>assignments: values to variables  </li> <li>conditional statements: direct flow of steps  </li> <li>loops: allow for steps to be repeated  </li> </ul> <p>A description of an algorithm usually includes:</p> <ul> <li>A name for the algorithm  </li> <li>A brief description of the task performed by the algorithm  </li> <li>A description of the input  </li> <li>A description of the output  </li> <li>A sequence of steps to follow  </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#14-if-then-algorithms","title":"1.4 If-then algorithms","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#if-statements","title":"If-statements","text":"<p>\"if\" statements are branches?</p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#if-else-statements","title":"If-else statements","text":"<pre><code>if (condition)  \n    one or more steps  \nElse \n    one or more steps  \nEnd-if\n</code></pre>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#15-for-loop-algorithm","title":"1.5 For-loop algorithm","text":"<p>An iteration is a process where a set of instructions or structures are  repeated in a sequence a specified number of times or until a condition is met.  </p> <p>To control the iterations, for-loops use an index or a counter and a variable  that counts how many times a step or a block of steps executes.  </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#16-while-loop-algorithm","title":"1.6 While-loop algorithm","text":"<p>A while-loop iterates an unknown number of times, ending when a certain  condition becomes false.</p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#17-nested-loop-algorithm","title":"1.7 Nested loop algorithm","text":"<p>Placing a loop within another loop is known as nesting. When a loop exists  within another loop, it is called a nested loop.  </p> <p>The nested loop, known as the inner loop </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#18-analyzing-algorithms","title":"1.8 Analyzing Algorithms","text":"<p>This module contains three lessons:</p> <ul> <li>Computational complexity</li> <li>Evaluating algorithm complexity</li> <li>Worst-case analysis  </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#19-computational-complexity","title":"1.9 Computational complexity","text":"<p>How do you know which algorithm is more efficient? By counting the operations  that will happen for an input of any size, you would be able to see how their  resource requirements grow.  </p> <p>Algorithm complexity: which is the study of the efficacy of algorithms</p> <ul> <li> <p>time complexity: the time the algorithm requires to run. time depends on  the speed of the processing unit, the number of calculations that need to be  performed, the number of conditions that need to be evaluated, or the number  of iterations to be completed by the loops.  </p> </li> <li> <p>space complexity: the amount of memory used. The values of all variables,  including the values of the input variables and all other values that will be  computed, need to be stored somewhere in the memory of the system\u2014in the RAM,  hard drive, or external devices.  </p> </li> </ul> <p>Time and space efficiency are measured in terms of the input size.  </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#algorithm-fibonacci-1","title":"Algorithm Fibonacci-1","text":"<p>The first two elements of the Fibonacci sequence are both 1: </p> <p>The algorithm calculates the Nth element of the Fibonacci sequence by calculating  all terms:  </p> <pre><code>F[1] :=1\nF[2]:=1\nFor i:=3 to n\n    F[i] := F[i-1]+F[i- 2]\nEnd-for\nReturn (F[n])\n</code></pre> <p>This one has a constant runtime, the one above grows with n:  </p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#110-evaluating-algorithm-complexity","title":"1.10 Evaluating algorithm complexity","text":"<p>** Atomic Operations**: each algorithm uses assignments, conditional statements,  and loops, and performs a variety of operations, such as addition and  multiplication. These operations (e.g., addition, multiplication, comparison)  that one would find in a single line of pseudocode, are referred to as atomic  operations. They are called \"atomic,\" because they cannot be split any further;  a computer would evaluate each in one step.   </p> <p><pre><code>Max: = 0                            # Atomic operation note 1\nFor i: =1 to n                      # Atomic operation note 2 and 3  \n    If (a[i] &gt; Max), Max: = a[i]    # Atomic operation note 4\nEnd-for\n</code></pre> - Note 1: The atomic operation of assignment, <code>Max: = 0</code>, occurs once.</p> <ul> <li> <p>Note 2: In the first iteration of the for loop, two atomic operations take place.  <code>i:= 1</code> as an assignment and <code>i&lt;n</code> for a conditional statment. These 2, plus  the one assignment above, create 3 atomic operations on the first iteration.  </p> </li> <li> <p>Note 3: On the preceeding iterations of the for loop, <code>i:= 1</code> i will increment, and <code>i&lt;n</code> the conditional statement will execute again. Since the loop is iterating <code>n</code> times, and everytime it iterates these two atomic operations occur, the count  is <code>2n + 3</code>. The three from the first iteration are added. </p> </li> <li> <p>Note 4: <code>a[i] &gt; Max</code> is always performed to determine if branching is needed.  This occurs <code>n</code> times, so add to the previous equation <code>(2n + 3) + n</code> is equal to  <code>3n +3</code>. This will represents the best case scenario because <code>Max:= a[i]</code> is  never called. Worst case scenario <code>Max:= a[i]</code> is called on every iteration  of <code>n</code>. That will add to what was the best case scenario <code>(3n + 3) + n</code> which is  <code>4n + 3</code>.</p> </li> </ul> <p>Since Atomic operations 2 and 3 occur every time, this adds <code>2n</code> operations to  the count.  </p> <p>Observe the following atomic operations:</p> <ul> <li>Assigning a value to a variable</li> <li>Looking up the value of a particular element in a sequence</li> <li>Comparing two values</li> <li>Incrementing a value (and/or arithmetic operations such as addition and multiplication)</li> </ul> <p>Recall that a sequence is an ordered set of elements\u2014a list of numbers or  objects in a special order.  </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#111-worst-case-analysis","title":"1.11 Worst-case analysis","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#112-big-o-estimates","title":"1.12 Big-O Estimates","text":"<p>This module contains two lessons:</p> <ul> <li>Asymptotic growth</li> <li>Algorithms and big-O  </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#113-asymptotic-growth","title":"1.13 Asymptotic growth","text":"<p>Keeping track of all the constant factors can be overwhelming. Instead computer  scientists use a special type of language, asymptotic notations, to  determine running time without keeping track of constant factors and to capture  how the running time of the algorithm grows with the size of the input.  </p> <p>asymptotic complexity: the behavior of the complexity function as n grows.  </p> <p>Eventually, we arrived at the function F(n) = n, which is the asymptotic run time function  of the algorithm. The function is void of constants and it only retains the  fastest growing component of the atomic operations counting function.</p> <p>As a refresher: for an exponential function, the coefficient of the exponent is  irrelevant to assessing the growth of the function, so the asymptotic run  function is usually expressed as 2n; whereas, a logarithmic function is  expressed without the need for specifying the base. So, the asymptotic run time  function for:</p> <ul> <li>f(n) = 1,000,032 is 1</li> <li>f(n) = 100033<sup>3n</sup> is 2n</li> <li>f(n) = log<sub>10003</sub> n is log(n)  </li> </ul> <p>This filter of \"dropping all factors\" and of \"keeping the largest growing term\"  as described above is what we call asymptotic behavior. </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#rule-of-thumb","title":"Rule of Thumb:","text":"<ul> <li> <p>Simple programs can be analyzed by counting the nested loops of the program.</p> </li> <li> <p>A single loop over n items yields asymptotic complexity n.</p> </li> <li> <p>If you have a program that calls a function within a loop and you know the  number of atomic operations the called function performs, it is easy to  determine the number of atomic operations of the whole program. For example,  let\u2019s consider the following algorithm:</p> </li> </ul> <pre><code>For i: = 1 to n\n    f(n)\nEnd-for\n</code></pre> <ul> <li> <p>Since you know that f(n) is a function that performs exactly n instructions,  you then know that the number of instructions of the whole program is  asymptotically n2, as the function is called exactly n times.</p> </li> <li> <p>Given a series of for-loops that are sequential, the slowest of them  determines the asymptotic behavior of the program.</p> </li> <li> <p>Two nested loops followed by a single loop is asymptotically the same as  the nested loops alone, because the nested loops dominate the simple loop.</p> </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#asymptotic-notation","title":"Asymptotic Notation","text":"<p>There are three types of asymptotic notation that are commonly used in  algorithmic analysis, O(n) (\"big-O\"), \u03a9(n) (\"Omega\"), and \u03b8(n) (\"Theta\").</p> <ul> <li> <p>The big-O notation\u2014O(n)\u2014serves as a rough upper bound for functions  (disregarding constants and small input values).</p> </li> <li> <p>The \u03a9 notation\u2014\u03a9(n)\u2014is similar to big-O, except that it provides a lower bound  on the growth of a function.</p> </li> <li> <p>The \u0398 notation\u2014\u0398(n)\u2014indicates how the algorithm performs for any case. This is  referred to as an average time or random case function and, when possible, gives  us a sense of how the algorithm performs in any case. Note that it is often  possible to estimate upper and lower bounds, but not average cases especially  if there are complex branching in the code.</p> </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#114-algorithms-and-big-o","title":"1.14 Algorithms and big-O","text":"<p>Big-O is the notation used to state that a function is the upper bound for the  asymptotic complexity, while big-Omega is used for a lower bound. In other  terms, when an algorithm is said to be O(f(n)), then its asymptotic complexity never surpasses f(n), and when an algorithm is \u03a9(g(n)) then its complexity is never smaller than g(n). The functions f(n) and g(n) are called upper and lower  bounds of the asymptotic complexity of the algorithm and the following is true  by definition: \u03a9(f(n)) \u2264 \u0398(f(n)) \u2264 O(f(n)).</p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#unit-2","title":"Unit 2","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#21-number-theory-and-cryptography","title":"2.1 Number Theory and Cryptography","text":"<p>Material in this Unit  </p> <ul> <li>Division algorithm</li> <li>Modular arithmetic and multiplication</li> <li>Congruence mod n</li> <li>Prime factorization, greatest common divisor (GCD), and least common multiple (LCM)</li> <li>Number representations</li> <li>Fast exponentiation  </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#22-divisibility-and-modular-arithmetic","title":"2.2 Divisibility and Modular Arithmetic","text":"<p>This page marks the beginning of Module 4. This module contains three lessons:</p> <ul> <li>The division algorithm</li> <li>Modular arithmetic and multiplication</li> <li>Congruence modulo  </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#23-the-division-algorithm","title":"2.3 The division algorithm","text":"<p>Modular arithmetic has division, addition, multiplication, and subtraction  operations. The good news is that modular arithmetic only uses integers-no  fractional or decimal values.  </p> <p>number theory the branch of mathematics concerned with the study of integers.   </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#integer-division","title":"Integer Division","text":"<p>Integer division: the input and output values must always be integers.  For example, when the number 9 is divided by 4, the answer is 2 with a  remainder of 1, instead of 2.25.  </p> <p> </p> <p>If a number x divides two different numbers, y and z, then x divides any linear  combination of y and z.   </p> <p>A linear combination of two numbers is the sum of multiples of those numbers.  For example, 3x - 7y and -2x + 4y are both linear combinations of x and y.  </p> <p>A statement about a generic linear combination uses variables to denote the  integer coefficients. For example, sx + ty is a linear combination of x and y.  </p> <ul> <li>Let x, y, and z be integers. If x|y and x|z, then x|(sy + tz) for any integers s and t.  </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#quotients-and-remainders","title":"Quotients and remainders","text":"<p>If x does not divide y, then there is a non-zero remainder when x is divided  into y. </p> <p>Division Algorithm states that the result of the division (the quotient) and  the remainder are unique:</p> <ul> <li> <p>Let n be an integer and let d be a positive integer. Then, there are unique  integers q and r, with 0 \u2264 r \u2264 d - 1, such that n = qd + r.  </p> </li> <li> <p>In the Division Algorithm, the number q is called the quotient and the number  r is called the remainder. The operations div and mod produce the quotient and  the remainder as a function of n and d.</p> <ul> <li> <p>q = n div d</p> </li> <li> <p>r = n mod d</p> </li> </ul> </li> </ul> <p>Division Algorithm <pre><code># Input: Integers n and d &gt; 0.\n# Output: q = n div d, and r = n mod d.\n# Case 1: n \u2265 0.\n\nq := 0\nr := n\nWhile ( r \u2265 d )\n      q := q + 1\n      r := r - d\nEnd-While\n</code></pre></p> <p> </p> <p>When finding the division of a negative number, overshoot the division by 1, like:</p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#24-modular-arithmetic-and-multiplication","title":"2.4 Modular arithmetic and multiplication","text":"<p>For example, if we wanted to know the date 19 days from January 23, we could  add 23 + 19 and get January 42. However, there's no such date as January 42,  so in order to calculate the date you need to use modular addition.  </p> <p>The operation defined by adding two numbers and applying modulo n to the  result is called addition modulo n:</p> <ul> <li><code>(2 + 4) mod 5 = 1</code></li> </ul> <p>The operation defined by multiplying two numbers and applying modulo n to the  result is called multiplication modulo n.  </p> <ul> <li><code>(2*6) mod 5 = 4</code> </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#25-congruence-modulo-n","title":"2.5 Congruence modulo n","text":"<p>Or perhaps, more simply, recall that military time of 15:00 hours will show  as 3:00 on a circular, analog clock face. Both of these are examples of  congruence, which means the same measure.  </p> <p>Congruence in modular arithmetic is the same principle. For example, 13  mod 4 and 29 mod 4 are congruent since the remainder of 13 mod 4 is 1 and the  remainder of 29 mod 4 is also 1.</p> <p>Why is it important to know about congruence? In cryptography, one of the most  important concepts protecting encryption keys is the idea of a number being  divisible by very large prime numbers. Modular congruence is used frequently to  determine divisibility of integers.  </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#congruence-modulo-n","title":"Congruence modulo n","text":"<p>Let n be an integer greater than 1. Let x and y be any two integers. Then x  is congruent to y modulo n if x mod n = y mod n. The fact that x is congruent  to y modulo n is denoted: x  \u2261  y (mod n).  </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#alternate-characterization-of-congruence-modulo-n","title":"Alternate characterization of congruence modulo n","text":"<p>Let n be an integer greater than 1. Let x and y be any two integers.  Then x  \u2261  y (mod n) if and only if n|(x - y).  </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#exponentiation-modulo-71","title":"Exponentiation modulo 71","text":"<p>Instead of 13<sup>158</sup> mod 71, which is computationally heavy:  </p> <p>The following theorem states that in computing arithmetic expressions with  multiplication and addition operations modulo n, taking partial results modulo  n does not change the final result.</p> <pre><code>p := 13\n\nFor i:= 1 to 158\n      p := (13*p) mod 71\nEnd-for\n\nReturn(p)\n</code></pre>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#alternative-notation-for-modular-arithmetic","title":"Alternative notation for modular arithmetic","text":"<p>Instead of <code>x=y(mod n)</code>, say 'doing operations in Z<sub>n</sub>.</p> <p>Z<sub>n</sub> refers to a set of integers {0, 1, 2,...,n-1} along with the  arithmetic operations mod n (+ mod n, - mod n, x mod n).  Note there is no  \u00f7 mod n.  </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#computing-arithmetic-operations-modulo-n","title":"Computing arithmetic operations modulo n","text":"<p>Let n be an integer larger than 1. Let x and y be any integers. Then:  </p> <pre><code>[(x mod n) + (y mod n)] mod n = [x + y] mod n\n\n[(x mod n)(y mod n)] mod n = [x\u00b7y] mod n\n</code></pre> <p>Alternatively, we could say that addition in Z is compatible with addition in  Zn. That is, we could reduce first and then do the operation, or we could do  the operation and then reduce. Often it simplifies the calculation to reduce as  much as possible as a first step.</p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#26-prime-factorization-gcd-and-euclids-algorithm","title":"2.6 Prime Factorization, GCD, and Euclid's Algorithm","text":"<p>This page marks the beginning of Module 5. This module contains six lessons:</p> <ul> <li>Prime factorization</li> <li>Greatest common denominators (GCD) and least common multiple (LCM)</li> <li>Factoring and primality testing</li> <li>Euclidean algorithm</li> <li>Extended Euclidean algorithm</li> <li>Multiplicative inverse and Euclidean algorithm  </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#27-prime-factorizations","title":"2.7 Prime factorizations","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#prime-and-composite-numbers","title":"Prime and composite numbers","text":"<p>A number p is prime if it is an integer greater than 1 and its only factors  are 1 and p.  </p> <p>A positive integer is composite if it has a factor other than 1 or itself. </p> <p>Every positive integer greater than one can be expressed as a product of primes called its prime factorization.  </p> <p>The fact that every integer greater than one has a unique prime factorization  is central to number theory and is called The Fundamental Theorem of Arithmetic.</p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#the-fundamental-theorem-of-arithmetic","title":"The Fundamental Theorem of Arithmetic","text":"<p>Every positive integer other than 1 can be expressed uniquely as a product of  prime numbers where the prime factors are written in non-decreasing order.  </p> <p>A non-decreasing sequence is a sequence in which each number is equal to or  greater than the one that came before. For example, 1, 1, 2, 3, 17 is an example  of a non-decreasing sequence, whereas the sequence 1, 1, 3, 2, 17 is not  non-decreasing because 2 comes after 3. The number 120 has many prime  factorizations. For example, 2\u00b72\u00b73\u00b72\u00b75 and 2\u00b75\u00b72\u00b72\u00b73 are both prime  factorizations of 120. However, there is only one prime factorization of 120 in  which the prime numbers are written in non-decreasing order: 2\u00b72\u00b72\u00b73\u00b75.  </p> <p>The multiplicity of a prime factor p in a prime factorization is the number of  times p appears in the product of primes. For example, in the prime factorization  of 120 given above, the multiplicity of 2 is 3 and the multiplicity of 3 is 1. </p> <p>For example, the exponential notation for the prime factorization for 120 is:</p> <p>120 = 2<sup>3</sup> x 3 x 5  </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#28-greatest-common-division-and-least-common-multiple","title":"2.8 Greatest common division and least common multiple","text":"<p>Prime factorization is important because it is used to determine the greatest  common divisor (GCD) and the least common multiple (LCM) of integers, which is  also needed to develop encryption keys.  </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#greatest-common-divisors-and-least-common-multiples","title":"Greatest common divisors and least common multiples","text":"<p>The greatest common divisor (GCD) of non-zero integers x and y is the largest  positive integer that is a factor of both x and y.</p> <p>The least common multiple (LCM) of non-zero integers x and y is the smallest  positive integer that is an integer multiple of both x and y.  </p> <p>Two numbers are said to be relatively prime if their greatest common divisor is 1.  </p> <p>Note that any number raised to the power 0 is just 1, so multiplying by  5<sup>0</sup> or 3<sup>0</sup> does not change the value of the number.  </p> <p>Find the GCD and LCM of 24 and 50: </p> <ul> <li>Perform prime factorization:  </li> </ul> <p>24 = 2<sup>3</sup> x 3<sup>1</sup> x 5<sup>0</sup> 50 = 2<sup>1</sup> x 3<sup>0</sup> x 5<sup>2</sup> </p> <ul> <li>Find the greatest common factor shared:  </li> </ul> <p>GCD(24,50) = 2<sup>min(3,1)</sup> x 3<sup>min(1,0)</sup> x 5<sup>min(0,2)</sup> = 2  </p> <ul> <li>The least common multiple can be determined by using the larger of the two exponents  for each prime number appearing in the prime factorization:</li> </ul> <p>LCM(24,50) = 2<sup>max(3,1)</sup> x 3<sup>max(1,0)</sup> x 5<sup>max(0,2)</sup> = 2<sup>3</sup> x 3<sup>1</sup> x 5<sup>0</sup> = 600  </p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#29-factoring-and-primality-testing","title":"2.9 Factoring and primality testing","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#primality-testing","title":"Primality testing","text":"<p>Primality Testing: </p> <ul> <li> <p>Input: Integer N greater than 1.</p> </li> <li> <p>Output: \"Prime\" if N is prime and \"Composite\" if N is composite.</p> </li> </ul> <p>Factoring: </p> <ul> <li> <p>Input: Integer N greater than 1.</p> </li> <li> <p>Output: \"Prime\" if N is prime. If N is composite, return two integers greater  than 1 whose product is N.</p> </li> </ul> <p>A brute force algorithm solves a problem by exhaustively searching all  possible solutions without using an understanding of the mathematical structure  in the problem to eliminate steps.  </p> <p>This is to find the prime factorization of a number</p> <pre><code># Brute force algorithm for factoring\n# Input: Integer N greater than 1.\n# Output: \"Prime\" if N is prime, else \"Composite\" if N is composite.\n\nFor x = 2 to N-1\n      If x evenly divides N,\n            Return( \"Composite\" )\nEnd-for\n\nReturn( \"Prime\" ) \n</code></pre> <p>For a number with 110 digits, running the brute force algorithm would not finish  in our lifetime.  </p> <p>The procedure can be shortened using the fact that there is no need to test  factors past \u221a(N) due to the theorem below:</p> <p>Small factors If N is a composite number, then N has a factor greater than 1 and at most \u221a(N).  </p> <p>Because every composite number N has a factor that is at most \u221a(N), the  loop in the factoring algorithm can stop as soon as it gets past \u221a(N)  instead of N. Note that although \u221a(N) may not be an integer, the factor  must be an integer. Therefore, the last potential factor to test is floor(\u221a(N))  </p> <p> </p> <p>The reason that RSA is used with such confidence to transmit sensitive information  is because researchers believe that there is no efficient algorithm for factoring.  </p> <p>Subtract one from the sqrt of the number, because the count will begin at 2: </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#the-prime-number-theorem","title":"The prime number theorem","text":"<p>The Greek mathematician Euclid around 300 B.C. proved that there are  Infinite Prime Numbers </p> <p>The Prime Number Theorem says how dense primes numbers are among the integers:</p> <p> </p> <p>Question Consider a random integer selected from the range from 2 to 1,000,000,000,000.  Approximately, what are the chances that the selected number is prime?</p> <p>Use the equation <code>1/ln(x)</code>. So 1/ln(1,000,000,000,000) = 0.036  </p> <p>Question Use the prime number theorem to give an approximation for the number of prime  numbers in the range 2 through 10,000,000.</p> <p>10,000,000 = 10<sup>7</sup>. The number of prime numbers in the range 2 through 107 is  approximately 10<sup>7</sup>/ln(10<sup>7</sup>) \u2248 620421.  </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#210-euclidean-algorithm","title":"2.10 Euclidean algorithm","text":"<p>In this lesson, you'll get to learn how to use Euclid's algorithm, a very old  method, to find the GCD of two numbers without having to find their prime  factorizations first.  </p> <p>GCD Theorem:</p> <p>Let x and y be two positive integers. Then GCD(x, y) = GCD(y mod x, x).</p> <p>Suppose that x and y are large numbers and that x &lt; y. According to the GCD  theorem, y can be replaced with (y mod x) in the computation of GCD(x, y) and  the result will be the same.   </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#euclids-algorithm-for-finding-the-greatest-common-divisor","title":"Euclid's algorithm for finding the greatest common divisor","text":"<pre><code>Input: Two positive integers, x and y.\nOutput: GCD(x, y).\n\nIf ( y &lt; x )\n      Swap x and y.\nr := y mod x.\n\nWhile ( r \u2260 0 )\n      y := x\n      x := r.\n      r := y mod x.\nEnd-while\n\nReturn( x )\n</code></pre> <p>Question </p> <p>Find the GCD of 675 and 210.</p> <p>The x in this equation is 210, since 210 &lt; 675.  675 is y.  </p> <p>GCD(y,x) =&gt; GCD(675, 210)</p> <p>The equation will now look like <code>y mod x = r</code>. You will recursively solve this  until you can't, which I think is 0. </p> <p>675 mod 210 = 45 210 mod 45 = 30 45 mod 30 = 15 30 mod 15 = 0  </p> <p>15 was the last number in the iteration, so GCD(675, 210) = 15  </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#211-extended-euclidean-algorithm","title":"2.11 Extended Euclidean algorithm","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#the-extended-euclidean-algorithm","title":"The extended Euclidean algorithm","text":"<p>Expressing GCD(x, y) as a linear combination of x and y:  </p> <p>Let x and y be integers, then there are integers s and t such that</p> <p>GCD(x, y) = sx + ty</p> <p> </p> <p>GET HELP ON EXTENDED EUCLIDEAN </p> <p>For each of the following pairs of numbers, find the GCD of the two numbers, and express the GCD as a linear combination of the two numbers.</p> <p>(a) 56 and 42</p> <pre><code>Solution\n56      42      14      0\n\n56 mod 42 = 14\n\n42 mod 14 = 0\n\nGCD(56, 42) = 14\n\nThe equation is:\n\n14 = 56 - (56 div 42)\u00b742 = 56 - 42\n\nGCD(56, 42) = 14 = 56 - 42\n</code></pre> <p>(b) 81 and 60</p> <pre><code>Solution\n81      60      21      18      3      0\n\n81 mod 60 = 21\n\n60 mod 21 = 18\n\n21 mod 18 = 3\n\n18 mod 3 = 0\n\nThe equations for substitution are:\n\n3 = 21 - (21 div 18)18 = 21 -18\n\n18 = 60 - (60 div 21)21 = 60 - 2\u00b721\n\n21 = 81 - (81 div 60)60 = 81 - 60\n\nSubstitute (60 - 2\u00b721) for 18 into the equation 3 = 21 -18\n\n3 = 21 - (60 - 2\u00b721) = 3\u00b721 - 60\n\nSubstitute (81 - 60) for 21 into the equation 3 = 3\u00b721 - 60\n\n3 = 3\u00b7(81 - 60) - 60 = 3\u00b781 - 4\u00b760\n\nGCD(81, 60) = 3 = 3\u00b781 - 4\u00b760\n</code></pre> <p>(c) 259 and 77</p> <pre><code>Solution\n259      77      28      21      7      0\n\n259 mod 77 = 28\n\n77 mod 28 = 21\n\n28 mod 21 = 7\n\n21 mod 7 = 0\n\nThe equations for substitution are:\n\n7 = 28 - (28 div 21)21 = 28 - 21\n\n21 = 77 - (77 div 28)28 = 77 - 2\u00b728\n\n28 = 259 - (259 div 77)77 = 259 - 3\u00b777.\n\nSubstitute (77 - 2\u00b728) for 21 into the equation 7 = 28 - 21\n\n7 = 28 - (77 - 2\u00b728) = 3\u00b728 - 77\n\nSubstitute (259 - 3\u00b777) for 28 into the equation 7 = 3\u00b728 - 77\n\n7 = 3\u00b7(259 - 3\u00b777) - 77 = 3\u00b7259 - 10\u00b777\n\nGCD(259, 77) = 7 = 3\u00b7259 - 10\u00b777\n</code></pre>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#212-multiplicative-inverse-and-euclidean-algorithm","title":"2.12 Multiplicative inverse and Euclidean algorithm","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#the-multiplicative-inverse-mod-n","title":"The multiplicative inverse mod n","text":"<p>A multiplicative inverse mod n (or just inverse mod n) of an integer x, is an  integer s \u2208 {1, 2, \u2026, n-1} such that sx mod n = 1. Alternatively, we could say that s is the multiplicative inverse of x in  Z<sub>n</sub>.</p> <p>3 is an inverse of 7 mod 10 because 3 \u00b7 7 mod 10 = 1   The number 7 is an inverse of 5 mod 17 because 7 \u00b7 5 mod 17 = 1  </p> <p>The Goal is to have 1 as the result of the mod </p> <p>Numbers that are not relative prime will not have an inverse </p> <p>The Extended Euclidean Algorithm can be used to find the multiplicative inverse  of x mod n when it exists:</p> <ul> <li> <p>If GCD(x, n) \u2260 1, then x does not have a multiplicative inverse mod n.</p> </li> <li> <p>If x and n are relatively prime, then the Extended Euclidean Algorithm finds  integers s and t such that 1 = sx + tn.</p> </li> <li> <p>sx - 1 = -tn. Therefore, (sx mod n) = (1 mod n) = 1. It was shown earlier  that if A - B is a multiple of n then (A mod n) = (B mod n).</p> </li> <li> <p>(s mod n) is the unique multiplicative inverse of x in {0, 1, \u2026, n - 1}.  </p> </li> </ul> <p>Questions For each x and n, find the multiplicative inverse mod n of x. Your answer should be an integer s in the range 0 through n - 1. Check your solution by verifying that sx mod n = 1.</p> <p>(a) x = 52, n = 77</p> <pre><code>Solution\n77      52      25      2      1\n\n77 mod 52 = 25\n\n52 mod 25 = 2\n\n25 mod 2 = 1\n\nThe equations for substitution are:\n\n1 = 25 - 12\u00b72\n\n2 = 52 - 2\u00b725\n\n25 = 77 - 52\n\nSubstitute (52 - 2\u00b725) for 2 into the equation 1 = 25 - 12\u00b72\n\n1 = 25 - 12\u00b7(52 - 2\u00b725) = 25\u00b725 - 12\u00b752\n\nSubstitute (77 - 52) for 25 into the equation 1 = 25\u00b725 - 12\u00b752\n\n1 = 25\u00b7(77 - 52) - 12\u00b752 = 25\u00b777 - 37\u00b752\n\nGCD(77, 52) = 1 = 25\u00b777 - 37\u00b752\n\nThe coefficient of 52 in the equation above is -37. The multiplicative inverse of 52 mod 77 is (-37 mod 77) = 40.\n\nCheck: 52\u00b740 mod 77 = 2080 mod 77 = 1\n</code></pre> <p>(b) x = 77, n = 52</p> <pre><code>Solution\nFrom the solution to the previous problem:\n\nGCD(77, 52) = 1 = 25\u00b777 - 37\u00b752\n\nThe coefficient of 77 in the equation above is 25. The multiplicative inverse of 77 mod 52 is (25 mod 52) = 25.\n\nCheck: 77\u00b725 mod 52 = 1925 mod 52 = 1\n</code></pre> <p>(c) x = 53, n = 71</p> <pre><code>Solution\n71      53      18      17      1\n\n71 mod 53 = 18\n\n53 mod 18 = 17\n\n18 mod 17 = 1\n\nThe equations for substitution are:\n\n1 = 18 - 17\n\n17 = 53 - 2\u00b718\n\n18 = 71 - 53\n\nSubstitute (53 - 2\u00b718) for 17 into the equation 1 = 18 - 17\n\n1 = 18 - (53 - 2\u00b718) = 3\u00b718 - 53\n\nSubstitute (71 - 53) for 18 into the equation 1 = 3\u00b718 - 53\n\n1 = 3\u00b7(71 - 53) - 53 = 3\u00b771 - 4\u00b753\n\nGCD(71, 53) = 1 = 3\u00b771 - 4\u00b753\n\nThe coefficient of 53 in the equation above is -4. The multiplicative inverse of 53 mod 71 is (-4 mod 71) = 67.\n\nCheck: 53\u00b767 mod 71 = 3551 mod 71 = 1\n</code></pre>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#213-number-representation-in-other-bases","title":"2.13 Number Representation in Other Bases","text":"<p>This page marks the beginning of Module 6. This module contains three lessons:</p> <ul> <li>Decimal and binary numbers  </li> <li>Hexadecimal numbers  </li> <li>Base b expansion  </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#214-number-representation-decimal-and-binary-numbers","title":"2.14 Number representation- Decimal and binary numbers","text":"<p>the binary number 1011 corresponds to the decimal  number 1\u00b723 + 0\u00b722 + 1\u00b721 + 1\u00b720 = 11.  </p> <p> </p> <p>The representation of n base b is called the base b expansion of n and is denoted  by (akak-1...a1a0)b. The following animation shows how to convert the  base b expansion of a number into its decimal expansion. The base in the example  is 3:  </p> <p> </p> <p>Match each expression to its decimal expansion:  </p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#215-number-representation-hexadecimal-numbers","title":"2.15 Number representation- Hexadecimal numbers","text":"<p>In hexadecimal notation (or hex for short), numbers are represented base 16.  The 16 digits in hex are the usual 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 along with  A, B, C, D, E, F  </p> <p>Convert hex to decimal:  </p> <p>4E0F = 4 x 16<sup>3</sup> + 14 x 16<sup>2</sup> + 0 x 16<sup>1</sup> + 15 x 16<sup>0</sup> = 19983  </p> <p>Hexadecimal notation is particularly useful in computer science because each  hexadecimal digit can be used to represent a 4-bit binary number. A byte,  which consists of 8 bits, can be represented by a 2-digit hexadecimal number.  </p> <p>Question: Give a binary representation for each number given below in hex.  Drop the leading zeroes in your binary representation.</p> <p>(a) (A3)16</p> <pre><code>Solution\n(A)16 = (1010)2\n(3)16 = (0011)2\n\n(A3)16 = (10100011)2\n</code></pre> <p>(b) (1FC)16</p> <pre><code>Solution\n(1)16 = (0001)2\n(F)16 = (1111)2\n(C)16 = (1100)2\n\n(1FC)16 = (000111111100)2 = (111111100)2\n</code></pre>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#216-base-b-expansion","title":"2.16 Base b expansion","text":"<p>Question: Find the base 6 expansion of 67.  </p> <p>Use the formula <code>[Base b expansion of (n div b)][n mod b]</code>:  </p> <p>[base 6 expansion of 67 div 6][67 mod 6] =&gt; [base 6 expansion of 11] 1   </p> <p>[base 6 expansion of 11 div 6][11 mod 6] 1 =&gt;  [base 6 expansion of 1]  5  1  </p> <p>[base 6 expansion of 0][1 mod 6]  5  1  =&gt; [base 6 expansion of 0] 1  5  1  =&gt;  </p> <p>(1  5  1)<sub>6</sub> = 67  </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#algorithm-to-find-the-base-b-expansion-for-a-positive-integer","title":"Algorithm to find the base b expansion for a positive integer","text":"<pre><code>Input: Integers n and b. b &gt; 1 and n \u2265 1.\nOutput: Base b expansion of n. Base b digits are output in reverse order.\n\nx := n\nwhile ( x &gt; 0 )\n      Output( x mod b )\n      x := x div b\nEnd-while\n</code></pre> <p>Question: Find the expansion base 5 of 57:  </p> <p>57 mod 5 = 2; Rightmost digit is 2. 57 div 5 = 11</p> <p>11 mod 5 = 1; Next digit to the left is 1. 11 div 5 = 2</p> <p>2 mod 5 = 2; Next digit to the left is 2. 2 div 5 = 0</p> <p>Answer: 212 </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#the-number-of-digits-required-to-represent-a-number","title":"The number of digits required to represent a number","text":"<p>The digits in base b range from 0 through b - 1. </p> <p> </p> <p> </p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#217-fast-exponentiation-algorithms","title":"2.17 Fast Exponentiation Algorithms","text":"<p>This page marks the beginning of Module 7. This module contains two lessons:</p> <ul> <li>Fast exponentiation</li> <li>Modular exponentiation  </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#218-fast-exponentiation","title":"2.18 Fast exponentiation","text":"<p>Suppose you wanted to compute x<sup>y</sup>, for positive integers x and y. Computing  exponents is, in fact, an important step in the RSA cryptosystem  </p> <p>An illustration of fast integer exponentiation:</p> <p> </p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#an-iterative-algorithm-for-fast-exponentiation","title":"An iterative algorithm for fast exponentiation","text":"<p>The number of operations performed is therefore O(log y), which is much better  than the y - 1 multiplications required by simply multiplying a partial product  by x.</p> <pre><code>Input: Positive integers x and y.\nOutput: xy\n\np := 1     // p holds the partial result.\ns := x     // s holds the current x^2^j\nr := y     // r is used to compute the binary expansion of y\n\nWhile ( r &gt; 0 )\n      If ( r mod 2 = 1 )\n            p := p\u00b7s\n      s := s\u00b7s\n      r := r div 2\nEnd-while\n\nReturn(p)\n</code></pre>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#219-modular-exponentiation","title":"2.19 Modular exponentiation","text":"<p>If you thought fast exponentiation was efficient, you are in for a treat. In  this lesson you will learn about an even faster, more efficient method for  exponentiation, when you only care about the value mod N. modular exponentiation or iterative fast exponentiation. </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#an-iterative-algorithm-for-fast-modular-exponentiation","title":"An iterative algorithm for fast modular exponentiation","text":"<pre><code>Input: Positive integers x, y, and n.\nOutput: xy mod n\n\np := 1     //p holds the partial result.\ns := x     //s holds the current \n.\nr := y     //r is used to compute the binary expansion of y\n\nWhile ( r &gt; 0 )\n      If ( r mod 2 = 1 )\n            p := p\u00b7s mod n\n      s := s\u00b7s mod n\n      r := r div 2\nEnd-while\n\nReturn(p)\n</code></pre> <p>Get Help </p> <p>Questions Find the modulos fo the following exponential expressions: </p> <p>(a) 535 mod 11</p> <pre><code>Solution\n520 mod 11 = 51 mod 11 = 5 mod 11 = 5\n\n521 mod 11 = 52 mod 11 = 25 mod 11 = 3\n\n522 mod 11 = 32 mod 11 = 9\n\n523 mod 11 = 92 mod 11 = 81 mod 11 = 4\n\n524 mod 11 = 42 mod 11 = 16 mod 11 = 5\n\n525 mod 11 = 52 mod 11 = 25 mod 11 = 3\n\n35 = (100011)2\n\n535 mod 11 = (525 mod 11)(521 mod 11)(520 mod 11) mod 11 = (3\u00b73\u00b75) mod 11 = 45 mod 11 = 1\n</code></pre> <p>(b) 568 mod 7</p> <pre><code>Solution\n520 mod 7 = 51 mod 7 = 5 mod 7 = 5\n\n521 mod 7 = 52 mod 7 = 25 mod 7 = 4\n\n522 mod 7 = 42 mod 7 = 16 mod 7 = 2\n\n523 mod 7 = 22 mod 7 = 4 mod 7 = 4\n\n524 mod 7 = 42 mod 7 = 16 mod 7 = 2\n\n525 mod 7 = 22 mod 7 = 4 mod 7 = 4\n\n526 mod 7 = 42 mod 7 = 2 mod 7 = 2\n\n68 = (1000100)2\n\n568 mod 7 = (526 mod 7)(522 mod 7) mod 7 = (2\u00b72) mod 7 = 4 mod 7 = 4\n</code></pre> <p>(c) 1120 in Z<sub>33</sub></p> <pre><code>Solution\n22\n</code></pre>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#220-mathematical-foundations-of-encryption","title":"2.20 Mathematical Foundations of Encryption","text":"<p>This page marks the beginning of Module 8. This module contains four lessons:</p> <ul> <li>Introduction to cryptography</li> <li>Encryption and decryption</li> <li>RSA encryption</li> <li>RSA decryption</li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#221-introduction-to-cryptography","title":"2.21 Introduction to cryptography","text":"<p>Cryptography is the science of protecting and authenticating data and  communication.</p> <p>sender: sends message to receiver.   </p> <p>receiver: receives sender's message  </p> <p>encrypt: sender encrypts the message    </p> <p>plaintext: unencrypted message  </p> <p>ciphertext: Encrypted message    </p> <p>secret key: needed by the receiver to decrypt the sender's message  </p> <p>decrypt: change ciphertext to plaintext    </p> <p>cryptosystems</p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#222-encryption-and-decryption","title":"2.22 Encryption and decryption","text":"<p>Symmetric key cryptosystem: Alice and Bob must meet in advance (or communicate  over a reliably secure channel) to decide on the value of a shared secret key  </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#simple-encryption-scheme-requirements","title":"Simple encryption scheme requirements:","text":"<ul> <li>no two distinct plaintexts map to the same ciphertext  </li> </ul> <p>If m \u2260 m' and m, m' \u2208 Z<sub>N</sub> then (m + k) mod N \u2260 (m' + k) mod N (no two distinct plaintexts map to same ciphertext)</p> <ul> <li>second fact to verify is that the decryption scheme is indeed the inverse of  the encryption scheme  </li> </ul> <p>If m \u2208 Z<sub>N</sub> then (((m + k) mod N)-k) mod N = m (decryption scheme is inverse of encryption scheme)  </p> <ul> <li> <p>To accurately map plaintext (unencrypted message) to ciphertext (encrypted  message) and then reverse the process (decryption) requires a mathematical  function that is one-to- one. Each input maps to one and only one output, and  each output maps back to one and only one input.</p> </li> <li> <p>One simple cryptosystem uses modular arithmetic to encode and decode a  plaintext message. Specifically, ciphertext can be expressed as  c = (m + k) mod N; where m is the plaintext message, N is an integer, and k is  a secret value known only to the sender and receiver. Then the decryption  function can be expressed as m = (c - k) mod N. Note that the  addition/subtraction inverse operations use the secret value k.</p> </li> <li> <p>The systems used in this lesson are private key cryptosystems. In a private  key system both Bob and Alice must meet to decide upon the value of the secret  key-in our example the value of k-prior to sending encrypted messages.  </p> </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#223-rsa-encryption","title":"2.23 RSA encryption","text":"<p>In a public key cryptosystem, anyone can encrypt the message, but only the receiver  has the correct decryption key to ultimately read the encrypted message.  </p> <p>Public key cryptosystems rely on two premises: </p> <ul> <li> <p>the presumed difficulty of the computation required to decrypt the message </p> </li> <li> <p>the assumption that there exists no more efficient method to decrypt the  ciphertext without knowing the key.  </p> </li> </ul> <p>The mostly widely used public key cryptosystem is the  RSA (Rivest, Adelman, and Shamir) cryptosystem(1978). This method of encryption  depends on the difficulty of factoring large numbers. As of now, there is no  efficient method of factoring numbers without having information (the key)  about how the numbers were created.  </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#public-key-cryptography","title":"Public key Cryptography","text":"<p>In public key cryptography, Bob has an encryption key that he provides publicly  so that anyone can use it to send him an encrypted message. Bob holds a matching  decryption key that he keeps privately to decrypt messages. While anyone can  use the public key to encrypt a message, the security of the scheme depends on the fact that it is difficult to decrypt the message without having the matching private decryption key. </p> <p>Preparation of public and private keys in RSA:</p> <p>1) Bob selects two large prime numbers, p and q.</p> <p>2) Bob computes N = pq and \u03c6 = (p-1)(q-1). [Note the symbol \u03c6 is read Phi.]</p> <p>3) Bob finds an integer e such that gcd(e, \u03c6) = 1.</p> <p>4) Bob computes the multiplicative inverse of e mod \u03c6: an integer d such that  (ed mod \u03c6) = 1.</p> <p>5) Public (encryption) key: N and e.</p> <p>6) Private (decryption) key: d.  </p> <p>Public Key Generation:  </p> <p> </p> <p>There are infinitely many possibilities for public and private keys, which depend  on the choice of e that is relatively prime to phi.  </p> <p>Look at Section 2.11, Extended Euclidean Algorithm to solve for d.</p> <p> </p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#rsa-encryption","title":"RSA Encryption","text":"<p>The RSA scheme requires that m is an integer in Z<sub>N</sub> and is not a  multiple of p or q. Since p and q are primes with hundreds of digits, it is  extremely unlikely that m is a multiple of primes p or q. Alice encrypts her plaintext using e and N to produce ciphertext c as follows:  </p> <p>c = m<sup>e</sup> mod N (encription) m is the message c is the ciphered message</p> <p>Encrypting plaintext into ciphertext using RSA</p> <p></p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#224-rsa-decryption","title":"2.24 RSA decryption","text":"<p>public keys (values referred to as N and e) and private keys (the value d)</p> <p>To decrypt an RSA encoded message, not only must the receiver know the public  key, but the private key d, must also be known.  </p> <p>You will need the following mathematical skills: </p> <ul> <li>modular arithmetic  </li> <li>the extended Euclidean algorithm  </li> <li>the algorithm for fast exponentiation</li> </ul> <p>RSA Decryption:  </p> <p>m = c<sup>d</sup> mod N (decryption) m is the plaintext message c is the cipher  </p> <p> </p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#encrypting-and-decrypting-a-message-using-rsa","title":"Encrypting and decrypting a message using RSA","text":"<p>Question: In this problem, we will implement the RSA algorithm to encrypt  and decrypt the message \"HI\". For this exercise, you may want to use a  calculator that can compute the mod function.</p> <p>(a) Use the scheme used in your text to convert the message \"HI\" into an integer. Call the integer m.</p> <pre><code>Solution\nH \u2192 08, I \u2192 09. m = 0809 = 809\n</code></pre> <p>(b) Set the primes p and q as follows: p = 43 and q = 79. What are the values  for N and \u03c6?</p> <pre><code>Solution\nN = 43\u00b779 = 3397\n\n\u03c6 = (43 - 1)(79 - 1) = 42\u00b778 = 3276\n</code></pre> <p>(c) The value for e is chosen to be 29. Use Euclid's algorithm to verify that  e and \u03c6 are relatively prime and to find d, the multiplicative inverse of  e mod \u03c6.</p> <pre><code>Solution\n3276      29      28      1\n\n3276 mod 29 = 28\n\n29 mod 28 = 1\n\nThe equations for substitution are:\n\n1 = 29 - 28\n\n28 = 3276 - 112\u00b729\n\nSubstitute (3276 - 112\u00b729) for 28 into the equation 1 = 29 - 28\n\n1 = 29 - (3276 - 112\u00b729) = 113\u00b729 - 3276\n\ngcd(3276, 29) = 1 = 113\u00b729 - 3276\n\nThe coefficient of 29 in the equation above is 113. The multiplicative inverse of 29 mod 3276 is 113.\n\nCheck: 29\u00b7113 mod 3276 = 3277 mod 3276 = 1\n\nd = 113\n</code></pre> <p>(d) Encrypt the message m by computing me mod N</p> <pre><code>Solution\nciphertext = 80929 mod 3397\n\n80920 mod 3397 = 8091 mod 3397 = 809 mod 3397 = 809\n\n80921 mod 3397 = 8092 mod 3397 = 654481 mod 3397 = 2257\n\n80922 mod 3397 = 22572 mod 3397 = 5094049 mod 3397 = 1946\n\n80923 mod 3397 = 19462 mod 3397 = 3786916 mod 3397 = 2658\n\n80924 mod 3397 = 26582 mod 3397 = 7064964 mod 3397 = 2601\n\n29 = (11101)2\n\n80929 mod 3397 =\n(80924 mod 3397)(80923 mod 3397)(80922 mod 3397)(80920 mod 3397) mod 3397 =\n(2601\u00b72658\u00b71946\u00b7809) mod 3397 = 336\n\nciphertext = 336\n</code></pre> <p>(e) The result of the previous question is the ciphertext c that is transmitted.  To decrypt the message, compute cd mod N.</p> <pre><code>Solution\nMessage = 336113 mod 3397\n\n33620 mod 3397 = 3361 mod 3397 = 336 mod 3397 = 336\n\n33621 mod 3397 = 3362 mod 3397 = 112896 mod 3397 = 795\n\n33622 mod 3397 = 7952 mod 3397 = 632025 mod 3397 = 183\n\n33623 mod 3397 = 1832 mod 3397 = 33489 mod 3397 = 2916\n\n33624 mod 3397 = 29162 mod 3397 = 8503056 mod 3397 = 365\n\n33625 mod 3397 = 3652 mod 3397 = 133225 mod 3397 = 742\n\n33626 mod 3397 = 7422 mod 3397 = 550564 mod 3397 = 250\n\n113 = (1110001)2\n\n336113 mod 3397 =\n(33626 mod 3397)(33625 mod 3397)(33624 mod 3397)(33620 mod 3397) mod 3397 =\n(250\u00b7742\u00b7365\u00b7336) mod 3397 = 809\n\nMessage = 809\n</code></pre> <p>(f) Verify that the decrypted message is the same as m. Convert m back into a  text message.</p> <pre><code>Solution\nThe decrypted message is 809, the original value for m.\n\n809 \u2192 08 09 \u2192 HI\n</code></pre>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#unit-3","title":"Unit 3","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#31-recursion-and-induction","title":"3.1 Recursion and Induction","text":"<p>The material in this unit comprises 20% of the high-stakes assessment and includes such concepts as:</p> <ul> <li>Recurrence Relations</li> <li>Induction Methods</li> <li>Summations and Limits</li> <li>Recursive Structures</li> <li>Recursive rules with functions, sets, and binary trees</li> <li>Simple Recurrence Relations</li> </ul> <p>There is an old joke in computer science:</p> <p>To understand recursion you must first understand recursion.  </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#32-recurrence-relations","title":"3.2 Recurrence Relations","text":"<p>This page marks the beginning of Module 9. This module contains two lessons:</p> <ul> <li> <p>Introduction to recursive relations  </p> </li> <li> <p>Evaluating recursive relations  </p> </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#33-introduction-to-recursive-relations","title":"3.3 Introduction to recursive relations","text":"<p>a key process for divide and conquer algorithms </p> <p>Recursion is a method that finds new values using previous values.  </p> <ul> <li>To denote the nth term you write a<sub>n</sub>. The 4th term is 16;  written a<sub>4</sub>=16.  </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#recurrence-relations","title":"Recurrence relations","text":"<p>A recurrence relation is an equation that expresses a new term using  previous terms. Requires two things:  </p> <ul> <li> <p>the initial terms  </p> </li> <li> <p>a rule defining the new term based on the previous term  </p> </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#34-evaluating-a-recursive-relation","title":"3.4 Evaluating a recursive relation","text":"<p>Recurrence relation defining an arithmetic sequence:</p> <p>a0 = a   (initial value) an = d + an-1   for n \u2265 1   (recurrence relation) Initial value = a. Common difference = d.</p> <p>Recurrence relation defining an geometric sequence:  </p> <p>a0 = a   (initial value) an = r\u22c5 an-1  for n \u2265 1   (recurrence relation) Initial value = a. Common ratio = r.</p> <p>Fibonacci defined the sequence in an attempt to mathematically describe the  population growth of rabbits.  </p> <p>Divide the previous term by the current term. Then do the same thing to previous  terms. If the quotient is the same, it is a geometric sequence.  </p> <p>If the terms change by a constant amount, then it is an arithmetic sequence</p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#35-induction-methods","title":"3.5 Induction Methods","text":"<p>This page marks the beginning of Module 10. This module contains eight lessons:</p> <ul> <li>Computing summations</li> <li>Summation: limits and variables</li> <li>Inductive proof</li> <li>Divisibility proof by induction</li> <li>Induction proof of a recurrence relation</li> <li>Induction proof of closed summation</li> <li>Strong induction</li> <li>Well-ordering principle  </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#36-summations","title":"3.6 Summations","text":"<p>Summation of sequences (also called series)  </p> <p>Summation notation is used to express the sum of terms in a numerical sequence.  Consider a sequence:  </p> <p> </p> <ul> <li> <p>k is called the index </p> </li> <li> <p>s is the lower limit </p> </li> <li> <p>n is the upper limit </p> </li> </ul> <p>When the index starts at 1, the summation:  is referred to as the nth partial sum </p> <p>Since:  S<sub>n</sub> = a<sub>1</sub> + a<sub>2</sub> + a<sub>3</sub> +...+ a<sub>n - 1</sub> + a<sub>n/sub&gt;   and the nth term of a sequence can be defined recursively in terms of  partial sums a<sub>n</sub> = S<sub>n</sub> - S<sub>n-1</sub> <p>The capital letter sigma (\u03a3) is used to denote the fact that the terms are to be  added together. Summation notation can be used to sum up the terms in a sequence defined by an  explicit formula:  </p> <p> </p> <p>Summation Example:  </p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#pulling-out-a-final-term-from-a-summation","title":"Pulling out a final term from a summation","text":"<p>Representing pulling out the final sum: </p> <p> </p> <p> </p> <p> </p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#37-limits-and-variables","title":"3.7 limits and variables","text":"<p>Change the index variable:  </p> <p> </p> <p>Change variable of summation, change the upper and lower limits:  </p> <p> </p> <p>Note below for practicing change of variables:  You must re-arrange the given substitution <code>j = i + 2</code>. Where the question is  asking for j, you keep the equation <code>j = i + 2</code> the same. But if the question  asks for i, then re-arrange to <code>i = j - 2</code> </p> <p></p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#closed-forms-for-sums","title":"Closed forms for sums","text":"<p>A closed form for a sum is a mathematical expression that expresses the value  of the sum without summation notation. There are closed form expressions for  some, although not all, of the summations that arise naturally in scientific  applications. </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#closed-form-for-arithmetic","title":"Closed form for arithmetic","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#closed-form-for-geometric","title":"Closed form for geometric","text":"<p>Arithmetic and Geometric Closed Form practice:  </p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#38-inductive-proof","title":"3.8 Inductive proof","text":"<p>Induction (not to be confused with inductive reasoning). Knowing that  if the nth compartment filled then the (n+1)th compartment would fill, is the  inductive step. For the dominos to start falling, the first compartment, n=1,  had to fill; this is the base case.   </p> <p>Suppose that one day a genie grants you three wishes. You make two wishes and  then for your third wish, you wish for three more wishes the next day. Given  the fact that you can always use your third wish to renew your wishes for the  next day, it is possible to prove that from that first day onward, you can have  three wishes every day for the rest of your life. This is an example of the  principle of mathematical induction (or just induction for short).  </p> <p>The principle of mathematical induction states that if the base case  (for n = 1) is true and inductive step is true, then the theorem holds for all  positive integers.</p> <p>Use induction to prove that a series is equal to a given formula  </p> <p>Use induction to prove that inequalities are true.  </p> <p>The two components of an inductive proof.</p> <ul> <li>The base case establishes that the theorem is true for the first value in  the sequence.</li> </ul> <p>The genie grants you three wishes on day 1  </p> <ul> <li>The inductive step establishes that if the theorem is true for k, then the  theorem also holds for k + 1.</li> </ul> <p>If you have three wishes on day k, then you can get three wishes for day  k+1 (by using the third wish to ask for three more wishes the next day).  </p> <ul> <li>To be valid, an inductive proof must have a base case and at least one  inductive step.  </li> </ul> <p> </p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#proving-an-identity-by-induction","title":"Proving an identity by induction.","text":"<p>The next example will be a (inductive?) proof that for any positive integer n, the following  equality is true:</p> <p> </p> <p>The left side of the equation is the sum 1 + 2 + 3 + 4 + 5. The expression on  the right side of the equation is 5(5 + 1)/2. Now it is possible to check that  both sides evaluate to the same number (in this case 15). The assertion that  the equality holds for a particular n can be denoted by the predicate P(n).  The statement P(n) may be true or false, depending on the value of n.</p> <p> </p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#39-divisibility-proof-by-induction","title":"3.9 Divisibility proof by induction","text":"<p>The next example of a proof by induction proves that 3 evenly divides the value of a mathematical expression parameterized by an integer n. A quantity is evenly  divisible by 3 if it can be expressed as 3\u00b7m for some integer m. Define the  predicate Q(n) to be the statement:</p> <p>Q(n): 3 evenly divides 2<sup>2n</sup> - 1.</p> <p>The statement Q(3) says that 3 evenly divides 22\u00b73 - 1. Q(3) is true because  22\u00b73 - 1 = 26 - 1 = 63 and 3 does in fact evenly divide 63 (because 63 = 3\u00b721).</p> <p>The following example shows an inductive proof of the theorem that Q(n) is true  for all positive integers n:</p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#310-induction-proof-of-a-recurrence-relation","title":"3.10 Induction proof of a recurrence relation","text":"<ul> <li> <p>Find the base step of an induction proof by substituting in n = 0 or n = 1.</p> </li> <li> <p>Find the inductive step of an induction proof by substituting in n + 1.</p> </li> <li> <p>Check that the base and inductive steps of a recurrence proof are satisfied.</p> </li> <li> <p>Prove the explicit formula for a recurrence relation using induction. Show the  base case by substituting in n = 0 or n = 1. Next substitute n + 1 into the  formula. Algebraically manipulate the result so the case for n is separated.  The n case is assumed to be true; now leverage this to show that the remaining  parts are true. For recursion, this often means isolating the fn+1 term.  </p> </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#explicit-formula-for-a-sequence-defined-by-a-recurrence-relation","title":"Explicit formula for a sequence defined by a recurrence relation","text":"<p>Proving the explicit formula for a recurrence relation by induction </p> <p> </p> <p>The next set of questions present an inductive proof of the following theorem:</p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#explicit-formula-for-a-sequence-defined-by-a-recurrence-relation_1","title":"Explicit formula for a sequence defined by a recurrence relation","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#311-induction-proof-of-closed-summation","title":"3.11 Induction proof of closed summation","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#inductive-proofs-showing-the-closed-forms-for-sums-of-arithmetic-and-geometric-sequences","title":"Inductive proofs showing the closed forms for sums of arithmetic and geometric sequences","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#closed-form-for-the-sum-of-terms-in-a-geometric-sequence","title":"Closed form for the sum of terms in a geometric sequence","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#unit-6","title":"Unit 6","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#61-modeling-computation","title":"6.1 Modeling Computation","text":"<p>The material in this unit comprises 13% of the high-stakes assessment and  includes such concepts as:</p> <ul> <li>Theory of computation</li> <li>Deterministic Finite State Automata (DFA)</li> <li>Nondeterministic Finite State Automata</li> <li>State diagrams and transition tables  </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#62-deterministic-finite-state-machine","title":"6.2 Deterministic Finite State Machine","text":"<p>This page marks the beginning of Module 21. This module contains six lessons:</p> <ul> <li>Theory of computation</li> <li>Introduction to deterministic finite state automata (DFA)</li> <li>DFA state diagrams</li> <li>DFA state transition tables</li> <li>Analyzing transition rules of a DFA</li> <li>Evaluating outcomes of a DFA  </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#63-theory-of-computation","title":"6.3 Theory of computation","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#introduction-to-computational-models","title":"Introduction to computational models","text":"<p>Computation is any type of calculation that includes both arithmetical and  non-arithmetical steps and follows steps that provide a solution to a problem.  </p> <p>Computational models are abstract models that allow computer scientists to  reason about what can and cannot be computed by a particular kind of device.  </p> <ul> <li>pushdown automata </li> <li>linear-bounded automata</li> <li>Turing machines  </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#major-families-of-automata","title":"Major families of automata","text":"<p>There are four major families of automaton listed in order of complexity from  simplest to most complex:  </p> <ul> <li> <p>The finite state machine is the simplest family of automaton. In a finite  state machine, every bit exists in either of two states, 0 or 1, and a finite  number of possible inputs exist.</p> <ul> <li>Ideal for small amounts of memory.  </li> <li>Used in analysis of mathematical problems  </li> <li>Recognize regular language  </li> <li>Handle type-3 grammars</li> </ul> </li> <li> <p>A pushdown automaton uses a stack, or an abstract data type that collects  elements.  </p> <ul> <li>Used in theories to determine what machines can compute  </li> <li>Handle Type-2 grammars and context-free languages </li> </ul> </li> <li> <p>A linear-bounded automaton consists of two endmarkers with input in  between. Data is contained in a \"tape\" between the endmarkers. </p> <ul> <li>handle Type-1 grammars </li> <li>context-sensitive languages  </li> </ul> </li> <li> <p>A Turing machine is the most complex family of automaton. The Turing machine  consists of a finite automaton with infinite storage. </p> <ul> <li>Can change symbols on its tape</li> <li>can model all computations that can be handled by modern computers  </li> <li>handle Type-0 grammars</li> <li>Recursively enumeable languages  </li> </ul> </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#languages-and-grammars","title":"Languages and grammars","text":"<p>The language accepted by a computational model is the set of all strings which  the computational model accepts.  </p> <p>A grammar is a set of rules for generating strings. The  language generated by a grammar is the set of all strings that can be generated  according to the rules of the grammar.  </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#the-finite-state-automaton","title":"The finite state automaton","text":"<p>A finite state automaton (plural: finite state automata) consists of a finite  set of states with transitions between the states triggered by different input  actions. A finite state automaton is also known as a finite state machine (FSM).  </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#summary","title":"Summary:","text":"<ul> <li> <p>Computation is the process of solving problems using a physical device. The physical device that can perform computations is referred to as a \"computer.\"</p> </li> <li> <p>Computational models are abstract models that allow computer scientists to reason out what can and what cannot be computed.</p> </li> <li> <p>Computational models receive a string as an input and produce an output based on the input. Some models output \"yes\" when the input string is accepted by the machine or \"no\" if it is rejected.</p> </li> <li> <p>The set of strings accepted by a machine is called a language. A language is generated by a set of rules called grammar. The concepts of languages, grammars, and automata are intrinsically connected. A grammar generates a language that is accepted by an automaton.</p> </li> <li> <p>Finite state automaton is a computational model that consists of a finite set of states with transitions between the states triggered by different input actions. It is also called a finite state machine (FSM).</p> </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#64-deterministic-finite-state-automata-dfa","title":"6.4 Deterministic finite state automata (DFA)","text":"<ul> <li> <p>A deterministic finite automaton (DFA) is a finite state automaton whose next state is uniquely determined by the current state and the next input symbol.</p> <ul> <li> <p>Is a specific category of FSM  </p> </li> <li> <p>There is no possibility of going into two different states at any given step, which is what makes it \"deterministic.\"  </p> </li> <li> <p>Simplest model of computation  </p> </li> <li> <p>Type-3 grammars, the simplest</p> </li> </ul> </li> <li> <p>A deterministic finite automaton is a quintuplet (5-tuple) that consists of:</p> <ul> <li> <p>a set of finite states,</p> </li> <li> <p>a set of symbols (alphabet),</p> </li> <li> <p>a transition function (set of rules for transitioning between states),</p> </li> <li> <p>an initial state </p> </li> <li> <p>a set of final, accepting states.  </p> </li> </ul> </li> </ul> <p> </p> <ul> <li> <p>Initially the DFA is in the given initial state. It initiates its transitions by looking at the first symbol of the input string. The state the DFA will transition to depends on the symbol currently at the beginning of the input string and the transition function.</p> </li> <li> <p>A string is accepted by a DFA if the machine does not have any symbols from the initial string to read and it has transitioned into an accepting state.</p> </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#65-dfa-state-diagrams","title":"6.5 DFA state diagrams","text":"<ul> <li> <p>A state diagram is a visual representation of a deterministic finite automation.</p> <ul> <li> <p>Circles denote the states of the automation</p> </li> <li> <p>The labeled arrows explain the transitions between states, i.e. they model the transition function.</p> </li> </ul> </li> <li> <p>The automaton transitions between states jumping from one state to another following the arrow that is labeled by the next alphabet symbol from the input string.</p> </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#66-dfa-state-transition-tables","title":"6.6 DFA state transition tables","text":"<ul> <li> <p>The transition function of a deterministic automation can be represented by a  table that defines the state to which the automation transitions, based on the  current state. </p> <ul> <li> <p>states are represented as rows </p> </li> <li> <p>the current alphabet symbols are represented in the columns  </p> </li> </ul> </li> <li> <p>DFA transition functions can be described using: </p> <ul> <li> <p>words  </p> </li> <li> <p>state transition diagrams</p> </li> <li> <p>state transition tables  </p> </li> </ul> </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#67-dfa-analyzing-transition-rules","title":"6.7 DFA analyzing transition rules","text":"<ul> <li> <p>The DFA always starts in the \"start\" state and initiates the transition based  on the first symbol of the input string. In the new state it reacts to the  second symbol, transitions to a new state, and so on.</p> </li> <li> <p>Some DFAs can build output as they transition based on the input symbol.</p> </li> <li> <p>The input and output alphabets may coincide, but they do not need to. The DFA  with output is virtually a rewriting system, one that uses one string and  generates another based on the rewriting rules defined by the transition  function.</p> </li> </ul> <p> </p> <p>DFA State table: </p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#68-dfa-evaluating-outcomes","title":"6.8 DFA evaluating outcomes","text":"<p>There are languages a DFA cannot recognize, as its memory is limited on the  current state and the next symbol of the input string.  </p> <p>The property of whether a number is odd or even is called the parity of a number.  The parity of a string is the parity of the number of 1's. </p> <p> </p> <p>Accepted Strings of a DFA:  </p> <p> </p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#69-nondeterministic-finite-state-machine","title":"6.9 Nondeterministic Finite State Machine","text":"<p>This page marks the beginning of Module 22. This module contains five lessons:</p> <ul> <li> <p>Introduction to nondeterministic finite automata (NFA)</p> </li> <li> <p>NFA state diagrams</p> </li> <li> <p>NFA state tables</p> </li> <li> <p>NFA analyzing transition rules</p> </li> <li> <p>NFA evaluating outcomes</p> </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#610-nondeterministic-finite-automata-nfa","title":"6.10 Nondeterministic finite automata (NFA)","text":"<p>The NFA are a superset of the DFAs.  </p> <p>A non-deterministic finite automaton (NFA) is a finite state automaton  whose next state is not uniquely determined by the current state and the next  input symbol.  </p> <ul> <li> <p>Nondeterministic finite automata are a quintuplet, where the transition  function maps into the power state of the set of states. The components of the  NFAs are:  </p> <ul> <li>states set  </li> <li>the alphabet</li> <li>set of final states</li> <li>initial state</li> <li>a transition function</li> </ul> </li> <li> <p>NFAs can transition into multiple states with one symbol or no symbols.</p> </li> <li> <p>An epsilon transition is a transition from one state or another without  reading an input symbol.  </p> </li> <li> <p>it is impossible to design a DFA that takes as input any binary string and  accepts if and only if the majority of the bits are 1  </p> </li> </ul>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#611-nfa-state-diagrams","title":"6.11 NFA state diagrams","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#612-nfa-state-transition-tables","title":"6.12 NFA state transition tables","text":"<p>Use the state diagram above in 6.11 as a reference:</p> <p></p>"},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#613-nfa-analyzing-transition-rules","title":"6.13 NFA analyzing transition rules","text":""},{"location":"WGU_Notes/C960_Discrete_Math_II/C960_Discrete_Math_II/#614-nfa-evaluating-outcomes","title":"6.14 NFA evaluating outcomes","text":"<p>An NFA accepts a string as long as at least one valid sequence of  transitions corresponding to the input symbols exists, putting the NFA in an  accepting state at the end of the input string.  </p> <p>NFA Accepted State:</p> <p> </p> <p> </p> <p>NFA Rejected State:</p> <p> </p> <p> </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/","title":"Section 1","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#lesson-1","title":"Lesson 1","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#12-communication-interactions","title":"1.2 Communication Interactions","text":"<ul> <li> <p>Communication Processes involves  </p> <ul> <li>Sender     -Written communication is best created when the sender keeps in mind the      intended audience and purpose of the communication.</li> <li>Message  </li> <li>Receiver  </li> <li>Channel  </li> <li>Feedback  </li> <li>Environment  </li> </ul> </li> <li> <p>Can be interrupted by Interferencen </p> </li> <li> <p>Synchronouse Communication and Asynchronous  </p> <ul> <li>Synch (Real-time): Video, phone, face-to-face  </li> <li>Async: Email, text, voicemail  </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#14-message-and-channel","title":"1.4 Message and Channel","text":"<ul> <li>Verbal messages</li> <li>Non-verbal messages: body gesture  <ul> <li>Vocalics or paralanguage: refers to tones, speed, and ptich  </li> </ul> </li> <li>Written message  </li> <li> <p>Visual Message</p> </li> <li> <p>Consider the amount of information, receiver's emotions, and timeliness  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#15-feedback","title":"1.5 Feedback","text":"<ul> <li>Positive Feedback - receiver acknowledges receipt, and makes it clear that the  message was understood    </li> <li>Negative Feedback - did not receive/understand the message  </li> <li>Ambiguous Feedback - neither  </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#17-interference","title":"1.7 Interference","text":"<p>Four types of interference - Physical: background noise - Psychological: thoughts impact the construction of the message - Semantic Interference: Creating a message that the reciever does not understand, with jargon - Physiological Interference: Headache, faitigue, not wearing glasses  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#18-communication-models","title":"1.8 Communication Models","text":"<ul> <li>Linear Model: one way process between sender and receiver. The sender does  not receive feedback  </li> <li>Interaction Model: adds the reciever's feedback   </li> <li>Transactional Model: The two parties are both the sender and receiver  </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#19-types-of-communication","title":"1.9 Types of Communication","text":"<ul> <li>Intrapersonal Communication: communicate with the self  </li> <li>Interpersonal Communication: Two people  </li> <li>Group Communication: 3 to 15 people talking at once</li> <li>Public Communication: One person broadcasting to a group  </li> <li>Mass Communication: broadcasting out to the masses  </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#lesson-2-communication-types-and-styles","title":"Lesson 2 Communication Types and Styles","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#21","title":"2.1","text":"<ul> <li>Converstions are categorized by 1) direction and 2) tone/purpose  <ul> <li>One-way or two-way  </li> <li>Cooperative or competetive  </li> </ul> </li> </ul> Cooperative Competetive two-way Dialogue Debate One-way Discourse Diatribe"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#22-types-of-converstion","title":"2.2 Types of Converstion","text":"<ul> <li>Discourse is one-way, cooperative undertones   </li> <li>Dialogue is a conversation with cooperative undertones  </li> <li>Debate: two-way conversation with competetive undertones  </li> <li>Diatribe: one-way and competetive  </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#23-five-stages-of-conversation","title":"2.3 Five stages of Conversation","text":"<ol> <li>Initiation: Make sure parties are ready to interact  </li> <li>Preview: Introduce what the conversation will be about. Establish eachother's  relationship, like worker and manager   </li> <li>Talking Points: Central or main goals are established  </li> <li>Feedback: mutual understanding of all main points are achieved  </li> <li>Closing: Good bye. It could also mean the start of a new conversation  </li> </ol>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#24-communication-styles","title":"2.4 Communication Styles","text":"<ul> <li>Analytical Communication: data, hard facts, substantiate claims. To the point  leave out emotions  </li> <li>Intuitive: Listen to gut. Look at big picture, may not care for details.  </li> <li>Functional Communication: Detail Oriented, follow order, one-step at a time.  May follow a check list  </li> <li>Personal Communication: value emotions and feelings. Generally good listeners  </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#25-adapting-communiation-to-others","title":"2.5 Adapting Communiation to others","text":"<ul> <li>Analytic: Use logic, hard facts, data. Written communication with loaded detail  Expect blunt, honest feedback. Avoid small-talk  </li> <li>Intuitive: Brain-storm or creative sessions. Visual presentation. Don't send too many details. Answer follow up questions over time.  </li> <li>Functional: Answer a lot of questions, plan out extensively. Do not rush them  when they are focusing on the details  </li> <li>Personal: Create a personal connection. Be honest and open. Send a follow up  email with the details of the meeting because they don't tend to focus on them.  </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#31-one-message-and-many-recievers","title":"3.1 One Message and Many Recievers","text":"<ul> <li>Primary Recievers: may require reciever action  </li> <li>Secondary Recievers: See the message but do not require action. Take as information  </li> <li>Hidden Receivers: Unintentionally recieve the message.  </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#32-tailoring-the-message","title":"3.2 Tailoring the Message","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#33-analysis-tool","title":"3.3 Analysis Tool","text":"<p>AUDIENCE  </p> <ol> <li>A = Analyze: Kinds of people that will receive message  </li> <li>U = Understand: What knowledge does the audience have about the message  </li> <li>D = Demographics: Age, gender, education, position  </li> <li>I = Interest: Level of interest in the message  </li> <li>E = Environment: What perception does the audience have on the topic  </li> <li>N = Need: What information does the audience need  </li> <li>C = Customize: Adjust message to Audience  </li> <li>E = Expectation: of the audience  </li> </ol> <p>Demographic traits: demographic traits refer to the characteristics that make  someone an individual, but that he or she has in common with others.  Stereotyping: generalizing about a group of people and assuming that because  a few people in the group have a characteristic, all of them do. Totalizing: taking one characteristic of a group or person and making that  the \u201ctotality\u201d or sum total of what the person or group is.  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#41-verbal-communication","title":"4.1 Verbal Communication","text":"<p>Verbal communication helps people: - Define reality - Organize complex ideas and experiences into meaningful categories - Think critically - Reason abstractly - Access Memories - Shape attitudes  </p> <p>Meaning of words: - syntactic - Pragmatic - semantic  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#42-reflective-attitude","title":"4.2 Reflective Attitude","text":"<ul> <li>Verbal communication: a channel of communication that uses spoken words  between a source (i.e., speaker) and a receiver (i.e., listener)</li> <li>Connotation: the subjective definition of a word</li> <li>Denotation: the dictionary definition of a word  </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#43-types-of-language","title":"4.3 Types of Language","text":"<p>Formal vs Informal Language  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#44-types-of-language","title":"4.4 Types of Language","text":"<p>Informal Language - Jargon - Colloquialisms - Slang - Idioms - avoid in professional communication - Cliches - idea or expression that is so overused that the original meaning is lost  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#45-improve-language-skills","title":"4.5 Improve language skills","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#51-written-communication","title":"5.1 Written Communication","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#52-plain-language","title":"5.2 Plain Language","text":"<p>Three Cs of Effective Written Communication - Clear - Collaborative - Concise  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#53-put-the-reader-first","title":"5.3 Put the reader first","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#54-email","title":"5.4 Email","text":"<ul> <li>Subject Line  </li> <li>Salutation  </li> <li>Email Body  </li> <li>Valediction: Tie everything together with a short phrase or paragraph that  gives your entire message an appropriate finish. A thoughtful last sentence  or two can help give your email message a polished finish and make the receiver  feel appreciated at the same time.  </li> <li>Complimentary Close  </li> <li>Signatures<ul> <li>Title  </li> <li>Name  </li> <li>Organizational role/position  </li> <li>Department name  </li> <li>company  </li> <li>Address  </li> <li>Email  </li> <li>Phone number  </li> <li>Links</li> </ul> </li> </ul> <p>Advantages of Email - Send a message to one or multiple receivers, including secondary audiences. - Send information anywhere in the world for free. - Make it possible to attach documents or images. - Indefinitely save/store/archive email messages. - Access emails from any device with an internet connection - Use the \u201cReply\u201d feature to carry on email conversations of any length.  </p> <p>Disadvantages of Email - Any number of people may have access to your messages, including area administrators in your office, home, or the offices and homes of the receivers. - Sensitive information may be accidentally forwarded to individuals or groups. - You might send by mistake with incomplete or incorrect information. - You might \u201cReply all\u201d by mistake and send the message to unintended receivers. - You will have limited attachment space. - SPAM filters may prevent the message from being received.  </p> <p>Email Expectations - you reply to an email within 24 hours, - the email has an appropriate subject line, - all expected secondary audiences have been included, - proper email etiquette is followed, and the email content is neatly organized, - the message is clearly about the subject stated in the subject line and only includes the information the recipient needs, - the message has been carefully reviewed for spelling and grammar to demonstrate the credibility of the email sender, - the email is direct and clear to eliminate the need for follow-up responses or misinterpretations, and - the email has a positive overall tone.  </p> <p>Using an active voice in the second person (you, your) with positive language and  active words will help ensure that your message will be well received and acted  upon as you expect.  </p> <p>Do a double check of formatting and spelling before sending  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#section-2-conflict-management-and-professional-conversations","title":"Section 2 Conflict Management and Professional Conversations","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#lesson-11","title":"Lesson 1.1","text":"<ul> <li> <p>Disagreement: arise when two people have different views on something. A  disagreement is not the same as a conflict. </p> </li> <li> <p>Argument: has negative connotation. Giving reasons and citing evidence  for the opinion. Trying to change the other's point of view. </p> </li> <li> <p>Conflict: opposing or incompatible values or beliefs.  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#lesson-12-types-of-conflict-1","title":"Lesson 1.2 Types of Conflict 1","text":"<ul> <li> <p>Conflict of Process: disagreement about a process or way to reach a common  goal  </p> </li> <li> <p>Conflict of Substance: difference in perception of worth or investment related to achieving a goal.  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#lesson-13-types-of-conflict-2","title":"Lesson 1.3 Types of Conflict 2","text":"<ul> <li> <p>Conflict of Values: Clash in a belief system  </p> </li> <li> <p>Conflict of Misperceived Differences: misrepresented messages.  </p> </li> <li> <p>Conflict of Personalities (Relationship Conflict): Self-worth is questioned  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#14-interpersonal-and-small-group-conflict","title":"1.4 Interpersonal and small group conflict","text":"<ul> <li> <p>Interpersonal Conflict - When two people have a disagreement over an idea, thought, or desire over a period of time  </p> </li> <li> <p>Intragroup Conflict: when conflict starts within a group  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#15-the-positives-and-negatives-of-conflict","title":"1.5 The Positives and Negatives of Conflict","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#16-stages-of-conflict","title":"1.6 Stages of Conflict","text":"<p>Five Stages of Conflict: 1) Underlying Conflict - When a person has just begun to experience feelings of  contention. 2) Conflict Development - When those feelings of contention or conflict are  triggered and take shape in the form of arguing, avoiding people, or refusing to follow procedures.  3) Conflict Stalemate - When no party concerned wants to yield or resolve the  conflict.  4) Conflict Resolution - When all parties concerned come together to resolve the  conflict. 5) Reconciliation - When all parties concerned come together to work through  their differences.  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#21-the-iceburg-of-conflict","title":"2.1 The Iceburg of Conflict","text":"<p>Below the waterline:  - Personality differences - Emotions - Differing interests, needs, and desires - Differing self-perceptions and self-esteem - Hidden expectations  - Unresolved past issues  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#22-sources-of-conflict","title":"2.2 Sources of Conflict","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#23-part-2","title":"2.3 Part 2","text":"<p>T.R.I.P: acronym to identify and discuss four types of goals individuals experience - Topic goals: Conflicts due to topic goals arise when the parties have differing  ideas about what to do or what decision to make. - Relational goals:  Conflicts due to relational goals arise when there are  differences in the way each party wants to be treated. - Identity goals: Conflicts due to identity arise when there is a misalignment  between how an individual feels they are perceived by others versus how they perceive their true identity.  - Process goals: Conflicts due to process goals arise when there are different  perceptions as to how communication should be used to manage conflict.  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#25-sources-of-conflict-differing-goals","title":"2.5 Sources of Conflict: Differing Goals","text":"<p>Conflict episodes can change: - Prospective Goals are those that people hold before a conflict. In other words,  these are the types of goals, or intentions, that people have before a conflict begins.  </p> <ul> <li> <p>Transactive Goals are those that people hold during a conflict. While a conflict  episode is ongoing, involved parties may change what they want and what is important to them. </p> </li> <li> <p>Retrospective Goals are those that people hold after conflict. Once the  conflict is over and all involved parties have time to reflect, goals might change  based on what did or didn\u2019t happen.  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#26-sources-of-conflict-power","title":"2.6 Sources of Conflict: Power","text":"<p>Power is the degree to which a social agent (A) can get another person(s) (P)  to alter their thoughts, feelings, and/or behaviors.  </p> <p>Five bases of power:  </p> <p>1) Information -  a social agent\u2019s ability to bring about a change in thought,  feeling, and/or behavior through information\u2014or to cause conflict by withholding  information to gain influence.  </p> <p>2) Coercive Power - ability to punish an individual who does not comply with  one\u2019s attempts to influence them.  </p> <p>3) Legitimate Power - the social agent (A) has a valid right to influence  them, and they have an obligation to accept A\u2019s attempt to influence their thoughts,  feelings, and/or behaviors.  </p> <p>4) Expert Power - perceived knowledge and expertise.   </p> <p>5) Referent Power -  is about relationship building and the desire to keep  and maintain positive relationships.  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#27-escalating-conflict-emotions","title":"2.7 Escalating Conflict: Emotions","text":"<ul> <li> <p>Emotions are natural reactions to stimuli in the outside environment.  </p> </li> <li> <p>Although emotions are not the initial cause of a conflict, they can escalate a  conversation into a conflict episode.  </p> </li> <li> <p>To prevent conflict, it is important to refrain from negating others\u2019 emotions.  Avoid phrases like \"don\u2019t feel that way\" or \"they have no right to feel that way.\"  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#31-conflict-resolution-strategies-negotiation","title":"3.1 Conflict-Resolution Strategies: Negotiation","text":"<p>Negotiation: A discussion aimed at reaching an agreement. </p> <ul> <li> <p>Negotiation is an approach to conflict resolution in which the parties involved  aim to reach a mutual agreement.  </p> </li> <li> <p>Negotiation requires good persuasion, bargaining, and active listening skills. </p> </li> </ul> <p>Mediation: A structured, interactive process in which an impartial third-party  assists disputing parties in resolving conflict through specialized communication.  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#32-curture-and-conflict-resoluction","title":"3.2 Curture and Conflict Resoluction","text":"<ul> <li> <p>Face-Detracting Strategy: Attributes blame to an individual, making that person  feel responsible for things going wrong.  </p> </li> <li> <p>Face-Saving Strategy: Focuses on what went wrong rather than attributing blame  to an individual. All parties involved in the task thus feel supported in trying  to understand what went wrong and correct it.  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#33-when-to-neotiate","title":"3.3 When to Neotiate","text":"<p>4 Essential Characteristics For Negotiation </p> Characteristic Example Interdependent The parties somehow need each other.  For example, Alex and her team were working in the same department. They all had a stake in the outcome of their discussions. This is why negotiation is important to them. Seeking the best possible result for all The parties are each looking to achieve the best possible result for all. Although Alex wants a change and her team wants to keep the status quo, they are both acting in what they perceive to be their department\u2019s best interest. Motivated and capable of influencing one another Both parties have enough power to influence and sway the other\u2019s decisions. The team knows that Alex needs them to get her work done. Alex knows that her assignment to the team indicates that it needs her guidance and expertise. Belief in the value of a mutual agreement The parties believe that it is important to reach a mutual agreement. Both parties believe a middle ground may be reached. They may also be sensitive to the fact that without the other\u2019s cooperation or support, things can actually become more difficult."},{"location":"WGU_Notes/D268_Communication/D268_Communication/#34-the-five-steps-of-negotiation-1","title":"3.4 The Five Steps of Negotiation 1","text":"<p>Steps:  </p> <ul> <li> <p>Prenegotiation: The first step in the negotiation process where you prepare for  negotiating.  </p> <ul> <li>bring clarity to the conflict, comprehensively analyze the issue, identify  the stakeholders, and try to determine what each party requires and wants.   </li> </ul> </li> <li> <p>Opening step: ensure that the tone and style of your opening statement are  positive and objective. Try to avoid offering anything, but state the core issues   present, demonstrate how they are affecting all parties, and suggest that everyone   move forward with an open mind, focusing on the long-term benefits. Actively   listen to others\u2019 opening statements as well to make sure you understand their   concerns.  </p> </li> <li> <p>Exploration: explore all options with an unbiased and objective mind.  Approach the phase with a spirit of collaboration and cooperation. Interrogate  and investigate all options to ensure that all perspectives are heard.  </p> </li> <li> <p>Bargaining: try to avoid an aggressive, negative, or argumentative tone or  style. Do not impose your thoughts and opinions on the other party. Do not try to  assert control, but rather be humble and sensitive to what the other person is  saying. Applying bullying tactics at this step will only aggravate the conflict  and may take you farther away from the agreement step.  </p> </li> <li> <p>Agreement: make sure that everyone\u2019s conditions have been met (even through  compromise) so that no one complains later and backs down on what was agreed upon.  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#36-avoid-common-negotiations-mistakes","title":"3.6 Avoid Common Negotiations Mistakes","text":"<ul> <li> <p>Collaborative, not competitive  </p> </li> <li> <p>Avoid getting stuck on a 'Thorny Point'  </p> </li> <li> <p>Be specific in the Agreement  </p> </li> <li> <p>Check your emotions  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#41-interpersonal-communication","title":"4.1 Interpersonal Communication","text":"<ul> <li> <p>Interpersonal Communication: The exchange of information between two or more  people with mutual, unique connections.  </p> </li> <li> <p>Interpersonal Conflict: Occurs between two or more people when there are  perceived or real goals that are not compatible with each other. This type of  conflict can be expressed verbally or nonverbally.  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#42-interpersonal-communication-behavior-1","title":"4.2 Interpersonal Communication Behavior 1","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#43-interpersonal-communiation-behavior-2","title":"4.3 Interpersonal Communiation Behavior 2","text":"<p>Bad Listening Practices:  </p> <ul> <li> <p>Interrupting  </p> </li> <li> <p>Unintentional Interruptions  </p> </li> <li> <p>Eavesdropping  </p> </li> <li> <p>Aggressive listening: Listen attentively to attack someone  </p> </li> <li> <p>Narcissistic Listening: Make the interaction about themselves  </p> </li> <li> <p>Defensive Listenting: Being defensive, for no reason  </p> </li> <li> <p>Insensitive Listening: Ignoring the emotion in the conversation  </p> </li> <li> <p>Pseudo-listening: Pretending to pay attention  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#44-interpersonal-communication-behaviors-3","title":"4.4 Interpersonal Communication Behaviors 3","text":"<ul> <li> <p>Mindfulness: being aware  </p> </li> <li> <p>Attention  </p> </li> <li> <p>Intention  </p> </li> <li> <p>Attitude  </p> </li> </ul> <p>\\5 Facets of Mindfulness:  </p> <ul> <li> <p>Observing  </p> </li> <li> <p>Describing  </p> </li> <li> <p>Acting with Awareness  </p> </li> <li> <p>Nonjudging of Inner Experience  </p> </li> <li> <p>Nonreactivity to Inner Experience  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#45-active-listening-skills-1","title":"4.5 Active Listening Skills 1","text":"<ul> <li> <p>Listen vs Hear: </p> <ul> <li> <p>Concentrate on the speaker  </p> </li> <li> <p>Make eye contact with the speaker  </p> </li> <li> <p>Acknowledge the speech sounds and/or body language of the speaker </p> </li> <li> <p>Understand what the speaker is saying  </p> </li> <li> <p>Ask clarifying questions  </p> </li> <li> <p>Confirm your understanding with a response  </p> </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#46-active-listenting-skills-2","title":"4.6 Active Listenting Skills 2","text":"<p>Active Listening Indicators  </p> <p>Nonverbal:  </p> <ul> <li> <p>Making eye contact  </p> </li> <li> <p>Smiling  </p> </li> <li> <p>Slightly raising an eyebrow  </p> </li> <li> <p>Having an upright posture  </p> </li> <li> <p>Having a slight lean toward the speaker  </p> </li> <li> <p>Head nods  </p> </li> <li> <p>Lack of distraction  </p> </li> </ul> <p>Verbal:  </p> <ul> <li> <p>Referencing past statements  </p> </li> <li> <p>Not interrupting or interjecting  </p> </li> <li> <p>Ask probing questions for both clarification and elaboration  </p> </li> <li> <p>Using simple phrases of understanding like \"ok\"  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#47-active-listening-skills-3","title":"4.7 Active Listening Skills 3","text":"<p>Empathetic Listening: The practice of suspending judgment and seeking  clarification and connection with the sender when receiving a message.</p> <ul> <li> <p>Paraphrasing \u2013 when you put the other person\u2019s words into your frame of  experience without making it about you.  </p> </li> <li> <p>Mirroring \u2013 when you replicate the nonverbal signals of a speaker.  </p> </li> <li> <p>Questioning \u2013 specifically when you ask reflective questions that invite  elaboration from the speaker, which helps to demonstrate that you are listening.  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#49-listening-styles-2","title":"4.9 Listening Styles 2","text":"<ul> <li>People-oriented<ul> <li>Use stories, images, or other visuals to share your message.</li> <li>Share your emotions and be open to the speaker sharing theirs.</li> </ul> </li> <li>Action-oriented<ul> <li>Keep your presentations concise.</li> <li>Share step-by-step plans and have an actionable item at each step.</li> <li>Maintain control of your speech.</li> </ul> </li> <li>Content-oriented<ul> <li>Use credible evidence and hard data.</li> <li>Appeal to logic and reasoning, and share clear plans.</li> <li>Use charts or graphs when possible.</li> </ul> </li> <li>Time-oriented<ul> <li>Begin by asking how much time the receiver has to listen.</li> <li>Be on the lookout for nonverbal cues of disinterest or a desire to end  the conversation.  </li> <li>Let the listener know that the time they spend in open communication will  save time in the long run.  </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#410-effective-feedback-skills-1","title":"4.10 Effective Feedback Skills 1","text":"<ul> <li> <p>Feedback: Information about the quality, process, or product of a group or an  individual\u2019s work.  </p> </li> <li> <p>Descriptive Feedback: Feedback that objectively shares what has been observed.  </p> </li> <li> <p>Evaluative Feedback: Feedback that provides an assessment of a group or an  individual\u2019s work.  </p> </li> <li> <p>Prescriptive Feedback: Feedback that provides next steps based on observation  and evaluation.  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#411-effective-feedback-skills-2","title":"4.11 Effective Feedback Skills 2","text":"<p>Listenable messages are ones that are delivered orally to another person and  are crafted in such a way as to be heard and received by the person you are  talking to. This is feedback that isn't meant to be mean, such as sarcastic or abrasive  </p> <ul> <li> <p>Short sentences</p> </li> <li> <p>Active verbs as much as possible  </p> </li> <li> <p>\u201cI\u201d statements and personal pronouns (e.g. I, me, my, mine)  </p> </li> <li> <p>Lists or other organizational structures  </p> </li> <li> <p>Transitions and previews of what\u2019s to come  </p> </li> <li> <p>Examples that are relevant to your listener  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#6-components-of-effective-feedback","title":"6 Components of Effective Feedback","text":"Component Description Be Specific Tory will need to tell Taylor specifically what they are struggling with. Telling Taylor the documents are frustrating is not helpful, as Taylor will not know how to improve them. To be specific, Tory should say, \"the documents you have been sending are not organized well and the formatting is inconsistent.\" Be Descriptive Tory will also need to be more detailed in her explanation. For example, she could add to the previous specific sentence by sharing, \"when I look through the documents, I am not able to see your flow of ideas because the formatting is inconsistent.\" Be Positive The feedback will be better received if Tory is able to add a positive message to her feedback. For example, adding to the above by saying, \"I really appreciate your ideas on this team, and I want to be able to take them all into consideration.\" Be Constructive Taking it another step forward and providing a constructive, actionable step for Taylor is recommended. For example, Tory could ask Taylor to look over the way a few other team members format their documents and see which ones might feel best to them to try out. Be Realistic Additionally, it is important to be realistic in the feedback you give. Imagine, for example, that Tory said to Taylor, \"I don\u2019t really understand what your documents are trying to say.\" This might be true, but it could have more to do with Tory\u2019s complex literacy skills or the amount of time she is taking to understand Taylor\u2019s work, than with the work itself. Be Relevant Lastly, it is critical for Tory to provide feedback that is directly relevant to Taylor\u2019s work. For example, it would not be productive for Tory to share that she liked the 'subject lines' of Taylor\u2019s emails. It is certainly something she could share with Taylor at another time, but for the purposes of effective formal feedback, this is not appropriate or helpful."},{"location":"WGU_Notes/D268_Communication/D268_Communication/#412-emotions-and-conflict-1","title":"4.12 Emotions and Conflict 1","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#414-emotional-intelligence","title":"4.14 Emotional Intelligence","text":"<p>Emotional Intelligence: Your ability to assess and manage your own emotions and  use them positively.</p> <ul> <li>\"Emotional intelligence is an individual\u2019s appraisal and expression of their emotions and the emotions of others in a manner that enhances thought, living, and communicative interactions.\"  </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#51-what-is-a-group","title":"5.1 What is a Group","text":"<p>Group dynamics govern how the group members behave within the group, their attitudes, and their overall performance on a regular basis. Group \u201chealth\u201d depends largely on whether group dynamics are positive or if there is friction negatively impacting them.  </p> <p>Intragroup Conflict: Conflict that occurs among members of a group that share common goals, interests, or other identifying characteristics.</p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#52-group-characteristics-and-confilct-management","title":"5.2 Group Characteristics and Confilct Management","text":"<ul> <li>Group Norms: The set of behaviors or rules that individuals follow within a group.</li> <li>Role: An assigned identity within the group defining an individual\u2019s responsibilities.</li> <li>Status: An individual\u2019s position across group relationships.</li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#53-stage-1-the-group-forms","title":"5.3 Stage 1: The Group \"Forms\"","text":"<p>Forming Stage: The first stage of group formation is the forming stage. At this stage, the group is being formed and members may feel discomfort because they don\u2019t yet know each other.</p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#54-stage-2-the-group-storms","title":"5.4 Stage 2: The Group \"Storms\"","text":"<ul> <li> <p>Storming Stage: The second stage of group formation, in which group members vie for roles, begin taking sides against others in the group, and resist being managed by self-appointed leaders. Members communicate with each other, but group cohesiveness is overshadowed by individual goals.  </p> </li> <li> <p>Assigned Role: The role assigned to an individual within a group or team.</p> </li> <li> <p>Assumed Role: When a role or responsibility is not assigned to an individual, but they assume it as part of the group dynamic.</p> </li> <li> <p>Mismatched Expectations: When an individual\u2019s expectations do not match what they are told.</p> </li> <li> <p>Competition: When individuals vie for positions over other group members.  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#55-active-listening-in-groups","title":"5.5 Active Listening in Groups","text":"<p>DO: - Determine their purpose for listening and keep it in mind.  - Identify the levels at which group members are communicating their messages\u2014e.g., emotional, positional, or intellectual. - Assess the relative significance of people\u2019s comments and listen for main ideas. - When possible and appropriate, urge other members of the group to speak, especially those who are less dominant. Speaking can be encouraged with statements like \u201cPlease go on,\u201d \u201cTell me more,\u201d and \u201cCare to expand on that?\u201d  - Observe others\u2019 body language and other nonverbal cues. - Show interest in others\u2019 messages through nonverbal actions such as nodding your head.  - Use \"interactive questioning.\" Ask open-minded and open-ended questions to clarify ideas and information, to probe a speaker\u2019s reasoning and evidence, and to expand incomplete information. Use and ask for examples so that the speaker can connect your questions with their own world of experiences. - Use tentative clarifying and confirming statements: e.g., \"It sounds like . . . ,\" \"You seem to think that . . . ,\" and \"As I understand it, you . . . .\" - Make polite, \"targeted\" interruptions. Be judicious with interruptions. - Paraphrase back to the speaker. Don\u2019t just see if you can accurately repeat what a person is saying. - Respond after listening, sincerely, and constructively. Focus on content, ideas, and analysis rather than on personal matters. - Allow for, and be careful how you interpret, silence. Keep in mind that people may have many reasons, positive or otherwise, for not speaking at a particular time.</p> <p>Do NOT: - Let listening be a dead end, in which you receive messages and don\u2019t react at all. - Allow the listening behavior of others to sway your own. - Cut off or put down a speaker. - Interrupt excessively. - Pose \"counterfeit questions\"\u2014belligerent statements masquerading as questions simply because they end with question marks. - Allow the tone of someone\u2019s message to influence your interpretation or reactions to it. - Express your interpretations of other people\u2019s messages excessively.</p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#56-decision-making-in-groups-1","title":"5.6 Decision Making in Groups 1","text":"<p>Decision Making Continuum: </p> <ul> <li>In a consensus approach, all group members work together to make a decision.</li> <li>Voting allows each group member to make a single choice. </li> <li>In a compromise, group members reach a mutually beneficial decision. </li> <li>Under authority rule, a single person makes a decision and the other group members follow it and work accordingly.  </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#57-decision-making-in-groups-2","title":"5.7 Decision Making In Groups 2","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#58-stage-3-the-group-norms","title":"5.8 Stage 3: The Group \"Norms\"","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#59-stage-4-the-group-performs","title":"5.9: Stage 4: The Group \"Performs\"","text":"<ul> <li>Performing Stage: The fourth stage of group formation, when the members of the group start to perform as one cohesive unit.</li> <li>Cooperation: When people come together to work toward a common goal, which may not include working toward their personal or individual goals.</li> <li>Collaboration: When people come together to work toward goals that may be related to their individual goals.  </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#510-stage-5-the-group-adjourns","title":"5.10 Stage 5: The Group \"Adjourns\"","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#strategies-to-manage-intragroup-conflict","title":"Strategies to Manage Intragroup Conflict","text":"<p>1) Emphasizing group goals and effectiveness. Focusing on group goals and objectives helps prevent group conflict. If larger goals are emphasized, group members are more likely to see the big picture and work together to achieve them.</p> <p>2) Providing stable, well-structured tasks. When work activities are clearly defined, understood, and accepted, conflict is less likely to occur. Conflict is most likely to occur when task uncertainty is high; specifying or structuring roles and tasks minimizes ambiguity.</p> <p>3) Facilitating dialogue. Misperception of the abilities, goals, and motivations of others often leads to conflict, so efforts to increase dialogue among group members and to share information can help eliminate conflict. As group members come to know more about one another, suspicions often diminish, and greater intergroup teamwork becomes possible.</p> <p>4) Avoiding win-lose situations. If win-lose situations are avoided, less potential for conflict exists.  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#eight-strategies-to-prevent-conflict-episodes","title":"Eight Strategies to prevent Conflict Episodes","text":"Strategy Description Physical separation The quickest and easiest solution to resolve the conflict is physical separation. Separation is useful when conflicting individuals or groups are not working on a joint task or do not need a high degree of interaction. Although this approach does not encourage members to change their attitudes, it does provide time to seek better accommodation. Use of rules and regulations Conflict can also be reduced by clearly specifying rules, regulations, and procedures. Again, however, basic attitudes are not modified in this case. Use of integrators Integrators are individuals who are assigned a boundary-spanning role between two people or groups. In this scenario, the project manager was the integrator. To be trusted, integrators must be perceived as legitimate and knowledgeable by both groups. The integrator often takes the \u201cshuttle diplomacy\u201d approach, moving from one person or group to another, identifying areas of agreement, and attempting to find areas of future cooperation. Confrontation and negotiation In this approach, competing parties are brought together face to face to discuss their basic areas of disagreement. The hope is that through open discussion and negotiation, a means can be found to resolve problems. Contract negotiations between union and management represent one such example. If a \u201cwin-win\u201d solution can be identified through these negotiations, the chances of an acceptable resolution of the conflict increase. Rotation of members By rotating from one group to another, individuals come to understand the frames of reference, values, and attitudes of other members, and communication is thus increased. When those rotated are accepted by the receiving groups, a change in attitudes as well as behavior becomes possible. This is clearly a long-term technique, as it takes time to develop good interpersonal relations and understanding among group members. Identification of shared tasks and goals A further strategy is to establish goals that require groups to work together to achieve overall success. Use of training The final technique on the continuum is training. Outside training experts are retained on a long-term basis to help groups develop relatively permanent mechanisms for working together. Structured workshops and training programs can help forge more favorable intergroup attitudes and, as a result, more constructive group behavior. <p>Adjourning Stage: The fifth stage in group forming, when group goals have been met and the group may disintegrate or start on a new project.  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#section-2-lesson-5-quiz","title":"Section 2, Lesson 5 Quiz","text":"<p>Groupthink is a negative group phenomenon characterized by a lack of critical evaluation of proposed courses of action that results from high levels of cohesion and/or high conformity pressures.  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#61-conflict-management-styles-1","title":"6.1 Conflict Management Styles 1","text":"<p>Competing: Individuals who employ a competing style of conflict management exhibit a low concern for the other and a high concern for self. This is a winner-takes-all attitude. Coercion\u2014either through threats or through persuasion\u2014is a strategy adopted in this style.  </p> <p>Avoiding: Individuals who use avoidance as a conflict-management style often indicate a low concern for both self and others. Not addressing the issue and choosing instead to avoid it is one strategy used by this style. Usually, but not always, a strategy of passive-aggressive behavior is used to avoid conflict.  </p> <p>Accommodating: An individual with an accommodating style is inclined to have a low concern for self and a high concern for others. While this is often viewed as a submissive and counterproductive position, context and motivation will help determine whether this is an appropriate strategy.  </p> <p>Compromising: A compromising approach to conflict indicates a low concern for self and others. While a compromise may look like a reasonable approach, it may arise from indifference and low investment in the outcome, in which case it is not advisable. For it to be equitable, both parties must give up and gain something.  </p> <p>Collaborating: A collaborating style of managing conflict indicates high concern for self and others and investment in the outcome. This is an ideal approach, as everyone\u2019s needs are optimally met. However, this may not be feasible in many situations, and hence, the other styles of conflict resolution are used.  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#62-conflict-management-styles-2","title":"6.2 Conflict Management Styles 2","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#section-3-influencing-others","title":"Section 3 Influencing Others","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#11-can-you-influence-others","title":"1.1 Can you influence others?","text":"<p>Influence: When an individual or group of people alters another person\u2019s thinking, feelings, and/or behaviors through accidental, expressive, or rhetorical communication.  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#12-what-is-infulential-communication","title":"1.2 What is Infulential Communication?","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#13-styles-of-influence","title":"1.3 Styles of Influence","text":"<p>Five styles of Influence:  </p> <ul> <li> <p>Rationalizing: focusing on facts, objective data, and expertise</p> </li> <li> <p>Asserting: stating ideas forcefully and directly </p> </li> <li> <p>Negotiating: looking for ways to collaborate</p> </li> <li> <p>Inspiring: using passion to excite people for change</p> </li> <li> <p>Bridging: listening to others to build personal connections  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#14-persuasion-power-motivation-and-influencer-1","title":"1.4 Persuasion, Power, Motivation, and Influencer 1","text":"<p>Power: The ability to change what someone thinks, feels or does.</p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#15-persuasion-power-motivation-and-influencer-2","title":"1.5 Persuasion, Power, Motivation, and Influencer 2","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#16-alternative-ways-to-think-about-influence-12","title":"1.6: Alternative Ways to Think about Influence (1/2)","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#17-alternative-ways-to-think-about-influence-22","title":"1.7: Alternative Ways to Think about Influence (2/2)","text":"<p>Perspectives: A point of view or a particular attitude toward or way of regarding something.  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#18-levels-of-influence-12","title":"1.8: Levels of Influence (1/2)","text":"<p>Compliance Level of Influence: The shallowest level of influence. Change occurs because the person is rewarded if they do change and punished if they do not change. </p> <p>Identification Level of Influence: The second level of influence. Change occurs because they want to fit in or be like the person or group that is attempting to influence them.  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#19-levels-of-influence-22","title":"1.9: Levels of Influence (2/2)","text":"<p>Internalization Level of Influence: the longest-lasting type of influence because the person influenced incorporates the change into their own sense of self and their values.  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#110-influence-in-a-professional-setting","title":"1.10: Influence in a Professional Setting","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#21-defining-your-audience","title":"2.1: Defining Your Audience","text":"<p>Implied Audience: The broader audience that your actual audience represents, but might not be present.</p> <p>Explicit Audience: The people the message is directly sent to.  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#22-audience-demographics-and-knowledge","title":"2.2 Audience: Demographics and Knowledge","text":"<p>\"Demographics\" can be defined as socio-cultural characteristics that identify and characterize populations.  </p> <p>Consider these key questions about the audience\u2019s relationship to the topic. </p> <ul> <li> <p>K = Knowledge: Do audience members already know a lot about the topic? A little? Nothing at all?</p> </li> <li> <p>R = Relevance: Why does this or should this topic matter to the audience? Do they already understand its importance, or does it need to be pointed out?</p> </li> <li> <p>I = Interest level: Is your audience likely to want to know about this topic? Are they curious about it, or will you have to get them interested in it?</p> </li> <li> <p>P = Point of view: Is this a topic your audience likely already has an opinion on?  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#23-audience-willingness-and-connectiveness","title":"2.3 Audience: Willingness and Connectiveness","text":"<p>Ask yourself the following questions to examine your connection to the audience:</p> <ul> <li> <p>Insider/outsider: Am I part of the same group as my audience? Am I \"one of them,\" or am I speaking to them as an outsider?</p> </li> <li> <p>Common traits: What qualities or traits do I share with the audience that might be relevant? </p> </li> <li> <p>History: Does this audience know me? How well? How will my past interactions with them affect how they respond to me? If they don\u2019t know me, what can I do to gain their trust?</p> </li> <li> <p>Trustworthy or skeptical: Is the audience likely to assume I am a trustworthy source of information and ideas, or are they likely to be distrustful? </p> </li> <li> <p>Agenda: What will the audience assume is my purpose in speaking with them? Is their assumption accurate? In either case, how will this affect my interaction with them?</p> </li> <li> <p>Shared goals: What goals do the audience and I share? What are things that we all would hope would happen? What might we all want to come out of this interaction?   </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#24-audience-expectations","title":"2.4 Audience: Expectations","text":"<p>To meet the audience\u2019s expectations, consider the following variables and questions:  </p> Variable Questions to Consider Purpose of presentation Is the audience expecting the message to be primarily informational, persuasive, entertaining, or perhaps some combination of these? Length How long is the audience expecting to listen? Style What kind of language and tone will the audience be expecting? Serious? Humorous? Casual? Formal? Technical? Organization How does the audience expect the message to be organized? Are they going to assume you\u2019ll mention the main point right away or work up to it gradually? Are they expecting a narrative (i.e., story)? Are they expecting you to present two sides of an issue and then side with one or the other? Preparation Does the audience expect you to have a clearly prepared message that\u2019s been scripted out? Something that\u2019s prepared but not written out word-for-word? Or do they expect you to be speaking casually and impromptu? Technology Will the audience expect this to be a message you\u2019ll deliver in person or via the media? If you are using technology, what kind would be acceptable in this situation? Sensory aids Will the audience expect visual aids? If so, what kind? Will they expect handouts or notes to go along with what you\u2019re saying?"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#25-audience-values","title":"2.5 Audience: Values","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#26-audience-perspectives-12","title":"2.6 Audience Perspectives (1/2)","text":"<p>There are people that are \"For\" and \"Against\" a perspective, then there is  the Third side which represents the people in the middle that are neither  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#lesson-27-audience-perspectives-22","title":"Lesson 2.7 Audience Perspectives (2/2)","text":"<p>Advantages of seeing additional perspectives  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#28-factors-affecting-your-message-12","title":"2.8 Factors Affecting Your Message (1/2)","text":"<p>Physical Environment and Messsages: </p> <ul> <li>Physical locations of speaker and audience</li> <li>Body language, position, and movement</li> <li>Use of visual aids and technology</li> <li>Lighting  </li> </ul> <p>Message Context: The overall situation a message is being communicated in.  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#29-factors-affecting-your-message-22","title":"2.9 Factors Affecting Your Message (2/2)","text":"<p>The Communication Channel   </p> <p>Genre: A category of artistic composition, as in literature, characterized by similarities in form, style, or subject matter.  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#31-influential-messages-12","title":"3.1: Influential Messages (1/2)","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#32-influential-messages-22","title":"3.2: Influential Messages (2/2)","text":"<p>\u201cwhy\u201d is probably the most important message an organization or individual can communicate, as this is what inspires others to take action.  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#33-appealing-to-your-audience-12","title":"3.3: Appealing to Your Audience (1/2)","text":"<p>Three Ways to Appeal to the Audience:</p> <ul> <li> <p>Reason  </p> </li> <li> <p>Emotion  </p> </li> <li> <p>Personal Credibiity  </p> </li> </ul> <p>Also called the Rhetorical Triangle  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#34-appealing-to-your-audience-22","title":"3.4: Appealing to Your Audience (2/2)","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#35-organization-of-your-message-12","title":"3.5: Organization of Your Message (1/2)","text":"<p>Five ways to structure the message:  </p> <ul> <li> <p>Topical: divide your larger point it into a few subpoints  </p> </li> <li> <p>Comparison/Contrast: focuses on similarities and differences between two or more things to help make a point.  </p> </li> <li> <p>Spatial: focuses on physical space or geography.  </p> <ul> <li> <p>Advantages to the local community when residents register to vote.  </p> </li> <li> <p>Advantages to the city/state when residents register to vote.  </p> </li> </ul> </li> <li> <p>Cause/Effect</p> <ul> <li>When you register to vote (cause), it is recorded in a voter database (effect).  </li> </ul> </li> <li> <p>Problem/Solution: first defining a problem or need facing the audience and then suggesting a potential solution.  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#36-organization-of-your-message-22","title":"3.6: Organization of Your Message (2/2)","text":"<p>Openers for a message: </p> <ul> <li> <p>Humor  </p> </li> <li> <p>A startling fact or statistic  </p> </li> <li> <p>Use a quotation  </p> </li> <li> <p>Ask a question  </p> </li> <li> <p>Brief story or anecdote  </p> </li> </ul> <p>Effective Closing:  </p> <ul> <li>The most effective conclusions do this in a way that\u2019s memorable and connects the audience to the speaker and topic. Many communicators also use the \"hook\" approach in their conclusion.  </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#37-fine-tuning-your-message","title":"3.7: Fine Tuning Your Message","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#38-five-mistakes-to-avoid","title":"3.8: Five Mistakes to Avoid","text":"<ul> <li> <p>Mistake #1: Deceiving Your Audience  </p> </li> <li> <p>Mistake #2: Making Your Audience Come to a False Conclusion  </p> </li> <li> <p>Mistake #3: Making It All About You  </p> </li> <li> <p>Mistake #4: Failing to Prepare  </p> </li> <li> <p>Mistake #5: Failing to Care  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#41-visual-communication","title":"4.1: Visual Communication","text":"<p>Visual communication is used when you need to:</p> <ul> <li> <p>Link raw data to usable knowledge</p> </li> <li> <p>Save space</p> </li> <li> <p>Be persuasive</p> </li> <li> <p>Speak in a universal language</p> </li> <li> <p>Provide quick, concrete representations  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#42-using-visual-aids-12","title":"4.2: Using Visual Aids (1/2)","text":"<p>Research has demonstrated that people remember only about 10% of what they hear. However, they remember close to 80% of what they see.  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#43-using-visual-aids-22","title":"4.3: Using Visual Aids (2/2)","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#44-four-rules-for-using-visual-aids","title":"4.4: Four Rules for Using Visual Aids","text":"<p>The four key \"don\u2019ts\" of visual aids are:</p> <ul> <li> <p>Don\u2019t crowd your slides with text, visuals, or both.</p> </li> <li> <p>Don\u2019t use distracting or inconsistent colors or themes.</p> </li> <li> <p>Don\u2019t use small or complicated fonts.</p> </li> <li> <p>Don\u2019t use distracting animations.  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#45-relevant-messages-with-images-12","title":"4.5: Relevant Messages with Images (1/2)","text":"<p>Checkout Inkscape for infographic creation on linux</p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#46-relevant-messages-with-images-22","title":"4.6 Relevant Messages with Images (2/2)","text":"<p>Choose simplicity.  When in doubt, add words  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#47-visual-slideshow-design-principles","title":"4.7: Visual Slideshow Design Principles","text":"<p>The 10/20/30 Rule for Presentations:</p> <ul> <li> <p>10 Slides  </p> </li> <li> <p>20 Minutes  </p> </li> <li> <p>30 point font  </p> </li> </ul> <p>The 6 x 6 Rule:  </p> <ul> <li> <p>Six words per line  </p> </li> <li> <p>Six bullet points per slide  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#48-the-multimedia-principles-12","title":"4.8: The Multimedia Principles (1/2)","text":"<p>Five principles that help reduce extraneous loads for viewers:  </p> <ul> <li> <p>Coherence Principle: Avoid or exclude extraneous information or images. Less is more.  </p> </li> <li> <p>Signaling Principle: Use cues to highlight important material and draw the viewer\u2019s attention to it.  </p> </li> <li> <p>Redundancy Principle: Avoid repetitive and extraneous on-screen text. Provide voice-over narration rather than putting your entire presentation on the screen.  </p> </li> <li> <p>Spatial Contiguity Principle: Place related content (images and words) in close proximity to each other.  </p> </li> <li> <p>Temporal Contiguity Principle: Align spoken words with the visuals to which they correspond.  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#49-the-multimedia-principles-22","title":"4.9: The Multimedia Principles (2/2)","text":"<p>There are four principles that help viewers process the essential message:  </p> <ul> <li> <p>Segmenting Principle: Break complex ideas into manageable pieces.  </p> </li> <li> <p>Pretraining Principle: Provide key information viewers will need, such as terms or concepts, early on.  </p> </li> <li> <p>Modality Principle: Present words as speech rather than on-screen text when possible.  </p> </li> <li> <p>Multimedia Principle: Use both images and words together to promote processing.  </p> </li> </ul> <p>There are three principles that help viewers interpret the message:  </p> <ul> <li> <p>Personalization Principle: Use a conversational tone that welcomes viewers into the presentation.  </p> </li> <li> <p>Voice Principle: Regulate your voice to sound more human than machine.  </p> </li> <li> <p>Image Principle: Don\u2019t assume that because the speaker\u2019s image is on screen the viewers will pay more attention.  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#51-digital-media","title":"5.1: Digital Media","text":"<ul> <li> <p>Digital Media: Created with code on a computer using various applications.</p> </li> <li> <p>Multimedia: The integration of multiple forms of media, including print, images, and animations.  </p> </li> </ul>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#52-video-as-a-digital-communication-tool","title":"5.2: Video as a Digital Communication Tool","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#53-video-best-practices-12","title":"5.3: Video Best Practices (1/2)","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#54-video-best-practices-22","title":"5.4: Video Best Practices (2/2)","text":"<p>Panopto recording software  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#55-audio-as-a-digital-communication-tool-12","title":"5.5: Audio as a Digital Communication Tool (1/2)","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#56-audio-as-a-digital-communication-tool-22","title":"5.6: Audio as a Digital Communication Tool (2/2)","text":"<p>Audacity as a voice recorder  </p> <p>How to record a Presentation in PowerePoint or Google Slides  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#57-digital-audio-best-practices","title":"5.7: Digital Audio Best Practices","text":""},{"location":"WGU_Notes/D268_Communication/D268_Communication/#58-using-digital-images","title":"5.8: Using Digital Images","text":"<p>Finding images online:</p> <ul> <li> <p>Openverse</p> </li> <li> <p>Pixabay  </p> </li> <li> <p>Flickr  </p> </li> <li> <p>Pexels  </p> </li> </ul> <p>Guide to Copyrighted images  </p> <p>Creative Commons: Just want artistic credit Creative Commons.org  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#59-how-to-create-presentations-using-powerpoint","title":"5.9: How to Create Presentations using PowerPoint","text":"<p>PowerPoint training  </p>"},{"location":"WGU_Notes/D268_Communication/D268_Communication/#510-how-to-create-presentations-using-panopto","title":"5.10: How to Create Presentations Using Panopto","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/","title":"D284 Software Engineering","text":"<p>Resource: Stephens, R. (2015). Beginning software engineering. Wrox. ISBN: 978-1-118-96914-4\u202f </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#crm","title":"CRM","text":"<ul> <li>Leads, Opportunities, Close Rates</li> <li>Forecasting</li> <li>Market Feedback </li> <li>Analysis by Channel </li> <li>Teamwork and Engagement </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#sdlc","title":"SDLC??","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#requirements-gathering","title":"Requirements gathering","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#change-control","title":"Change Control","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#executive-sponsor-executive-champion","title":"Executive sponsor/ Executive Champion","text":"<p>Highest ranking executive supporting the project  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#project-manager","title":"Project manager","text":"<p>Highest ranking person on the team Interface between customers and rest of team  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#pert-chart","title":"PERT Chart","text":"<p>Program Evaluation and Review Technique  - Introduced by the Navy in the 50s - AOA, activity on arrow, arrow is task and node is a milestone  - AON, activity on node, node is the task and arrows represent precedence relations  - Each task lists the time to complete and the predecessor</p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#critical-paths","title":"Critical paths","text":"<p>is the longest possible path through the network. The network is usually formed by  a PERT chart  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#gantt-charts","title":"Gantt Charts","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#risk-management","title":"Risk Management","text":"<p>Rather than wait for an inssue to happen, be proactive and plan: - Likelihood - Severity - Consequences - Work-arounds      - Dificulty     - Impact     - Pros     - Cons  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#deployment","title":"Deployment","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#deployment_1","title":"Deployment","text":"<p>Puting the project in the customer's hands  Can also have the terms: - Implementation, installation, release  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#scope","title":"Scope","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#planning","title":"Planning","text":"<p>List the steps that you hoe to follow, describe eac in detail List the ways that the step could fail. Describe the actions that you will  take. Describe work-arounds.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#cutover","title":"Cutover","text":"<p>Process of moving customers over to the new appliation  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#staged-deployment","title":"Staged Deployment","text":"<p>Reduce catastrophic failures of cutover by doing staged development. Create a staging area, a fully functional environment for practicing deployment. Get a power user involved in the testing, someone that is an expert at the previous issues.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#gradual-cutover","title":"Gradual Cutover","text":"<p>Only give the new application to some customer until it is verified that the deployment worked  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#incremental-deployment","title":"Incremental Deployment","text":"<p>Release features gradually.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#parallel-testing","title":"Parallel Testing","text":"<p>Have some users perform their normal tasks on the test application for a while  as if it were the real thing, while other users are actually doing the tasks  on the old system. The test system does not count.   </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#deployment-tasks","title":"Deployment Tasks","text":"<ul> <li>Physical Environment  </li> <li>Hardware  </li> <li>Documentation  </li> <li>Training  </li> <li>Database  </li> <li>Other people's Software  </li> <li>Your software  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#deployment-mistakes","title":"Deployment Mistakes","text":"<ul> <li>Assume everything will work  </li> <li>Have no rollback plan  </li> <li>Allow insufficient time  </li> <li>Don't know when to surrender  </li> <li>Skip staging  </li> <li>Install lots of updates all at once  </li> <li>Use an unstable environment  </li> <li>Set an early point of no return  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#process-models","title":"Process Models","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#predictive-models","title":"Predictive Models","text":"<p>Predictive models predict in advance what needs to be done. A different approach is Adaptive Development Models, that enable you to change  the project's goals if necessay during development.  </p> <p>When Predictive Models maybe successful: - User Involvement: when users help define the requirements, they're more likely  to be correct. - Clear vision: Customer and develpers have the same clear vision. - Limited size: Small size make it easier to see the whole picture - Experienced Team: - Realistic:  - Established Technology:  </p> <p>When Predictive Models won't work: - Incomplete requirements - Unclear requirements - Changing Requirements - No resources  </p> <p>Advantages of Predictive Models: - Predictability - Stability - Cost-savings - Detailed design - Less refactoring - Fix bugs early - Better documentation - Easy maintenance  </p> <p>Disadvantages of Predictive Models:  - Inflexible - Later initial release - Big Design Up Front (BDUF): Can't design until everything is known.</p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#waterfall","title":"Waterfall","text":"<p>Predictive model. Finish each step before moving on to the next step.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#waterfall-with-feedback","title":"Waterfall with Feedback","text":"<p>Allows you to move back a step.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#shashimi","title":"Shashimi","text":"<p>Predictive.  Steps are allowed to overlap. - Requirements  - Design  - Implementation - code writing - Verification - testing - Deployment  - Maintenance You could have people working on requirements, desing, implementation, and testing all at the same time.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#shashimi-series","title":"Shashimi Series","text":"<p>Multiple shashimi series overlapping. It is incremental. Similar to an incremental  waterfall below. </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#incremental-waterfall","title":"Incremental Waterfall","text":"<p>Incremental waterfall (multi-waterfall) uses a seris of separate waterfall  cascases. Each cascade ends with the delivery of a useable application called an  increment. Build the project incrementally rather than try to tackle the whole  thing at once. This is somewhat adaptive  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#v-model","title":"V-Model","text":"<p>Decomposition- breaks the application down into peices that you can use. This is  the left side of the diagram.  </p> <p>Integration - the right side of the diagram. Working towards complettion of the  delivery.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#sdlc-software-development-life-cycle","title":"SDLC Software Development Life Cycle","text":"<p>AKA the application develpment life cycle. A waterfall method that circle back around on it's self.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#sub-steps-of-the-sdlc","title":"Sub steps of the SDLC","text":"<ul> <li>Initiation: Customer comes up with the initial idea  </li> <li>Concept Development: Initiator and interested parties explore posibilities. This  step determines if it is a go/no-go. It is expensive to back out after this.  <ul> <li>project definitions </li> <li>feasibility analysis  </li> <li>cost-benefit analysis </li> <li>risk analysis  </li> </ul> </li> <li>Preliminary planning: Project Manager and tech lead are assigned to the project. They start planning and may give tasks to team leads to plan. Estimate resources  needed, like staff, computers, networks, and such.<ul> <li>Document tracking (PERT or Gantt charts) </li> <li>Gather metrics so the PM can keep track of the project  </li> </ul> </li> <li>Requirements analysis: Team studies the user's needs and creates requirement  documents. <ul> <li>UML showing application structure </li> <li>Pics, use cases, prototypes, business rules</li> <li>Tech requirements for the developers to follow in the build  </li> </ul> </li> <li>High-level design: Team creates high-level design that specify major subsystems, data flow, database needs, applications high-level structure.  </li> <li>Low-level design: how to build the pieces, to the point a second-shelf programmer could build the right thing  </li> <li>Developement: Write the code. </li> <li>Acceptance testing: User tests the applications  </li> <li>Deployement: Roll out the app  </li> <li>Maintenance: </li> <li>Review: Use metrics gathered during the development to determine if the design  process can be improved.  </li> <li>Disposal: </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#iterative-models","title":"Iterative Models","text":"<p>Start by building a small program that is useful, then provide increments to  add more features to the program.  Improves over predictive models issues of not being flexible to changes, requiring the exact requirements up front, and this allows for hazy, undefined requriements  to be used in the start, but figured out as the project moves along.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#comparison","title":"Comparison:","text":"<p>Fidelity is the completeness of a feature. Low-fidelity is a released feature that  needs work still. High/full fidelity the feature is complete. - Predictive: All features are full fidelity - Iterative: Inital features are low fidelity. Every iteration afterwards is  higher and higher fidelity until full fidelity is reached. - Incremental: One feature is rolled out, but it is full fidelity. The other  features will be released incrementally, at full fidelity. - Agile: Start with the lowest fidelity and features. Later versions add features  and increase fidelity.  </p> <p> </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#prototypes","title":"Prototypes","text":"<p>Prototype  is a simplified model that demostrates some behaviour you want to  study. Mimics a part of the appliation you want to build. - Horizontal prototypes: demonstrates features but has no depth, like a user interface, where the user can navigate through pages. That is breadth.   - Vertical prototype: has little breadth, but great depth. Something may hot have  a user interface but is able to print a customer receipt.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#prototype-types","title":"Prototype types:","text":"<ul> <li>Throw away: build and discard </li> <li>Evolutionary: Build into a finished product  </li> <li>Incremental prototyping: building the features in several prototypes, then taking  the code and building a full application.  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#spiral","title":"Spiral","text":"<p>Used to determine what development approach to take for parts of the project.  For example, if you don't understand all the requirements, use and iterative approach.  </p> <p> </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#unified-process","title":"Unified Process","text":"<p>Iterative and incremental development framework Four phases:  - Inception: Come up with project's ideas.  - Elaboration: Project requirements - Construction: Write, test, debug code. - Transition: Transfer project ot customers. You can add more phases to this if you want. Ex of two more: - Production: Users use the appliation. - Disposal: Remove the app  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#rational-unified-process-rup","title":"Rational Unified Process (RUP)","text":"<p>IBMs version. Uses that same 4 basic phases of UP. Uses the same engineering disciplines: - Business modeling - Requirements - Analysis and design - Implementation - Test - Deployment RUP has additional IBM tools: - artifact templates - document production and sharing - change rwquest tracking - visual modeling - performance profiling  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#cleanroom-model","title":"Cleanroom model","text":"<p>Empphaizes defect prevention rather than defect removal.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#rapid-appplication-developement-rad","title":"Rapid Appplication Developement (RAD)","text":"<p>First created by James Martin in the 1980s, he described his method to be RAD. Now the term has expanded to mean several more models of rapid development  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#techniques-used-in-rad","title":"Techniques used in RAD","text":"<ul> <li>Small teams: half dozen or fewer   </li> <li>Requirement gathering through focus groups, workshops, facilitated meetings, prototyping, and brainstorming.  </li> <li>Requirement validation through iteration prototypes, use cases, and constant customer testing designs.  </li> <li>Repeated customer testing of designs as they evolve.  </li> <li>Constant integration and testing of new code into the application.  </li> <li>Informal reviews and communication among team members.  </li> <li>Short iterations lasting between a few months and as little as a week.  </li> <li>Deferring complicated features for later releases. Doing just enough work to get the job done.  </li> <li>Timeboxing, setting a tight delivery schedule for producing something, usually  the next iteration. The scope might change but the completion date for the iteration  cannot.  </li> </ul> <p>Iteration 0: RAD starts in the middle of a project, assumably. That iteration  usually involves setting up hardware and development invironments. Try not to  include this iteration towards the budget.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#rad-advantages","title":"RAD Advantages","text":"<ul> <li>More accurate rerquirements. THe suctomer can adjust the requirements as needed  during the project.  </li> <li>The ability to track changing requirements. If requirements must change (within reason), the  project can start tracking the new requirements in the next iteration.  </li> <li>Frequent customer feedback and involvement. In addition to helping keep the project on  track, theis keeps the users engagged with the project.  </li> <li>Reduced development time. If everyting goes smoothly, you don't spend as much time writing  requirements in exessive detail.  </li> <li>Encourages code reuse. One of the key RAD ides is to do whatever it takes to get the  current iteration done. If an existing piece of code does whit you need it to does  (or even almost what you need it to do), timeboxing encourages you  to use that code  instead of writing something new.  </li> <li>Possible early realeases with limited functionality.  </li> <li>Constant testing promotes high-quality code and eases integration issues.  </li> <li>Risk mitigation. Before each iteration, you can look for potential risks and handle them.  </li> <li>Greater chand of success. BDUF projects sometimes spend a lot of time following an incorrect  path before discovering they're heading in the wrong direction and they need to be  radically redone or even canceled. Frequent increments allow RAD projects to detect  and correct problems quickly before they become insurmountable.  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#rad-disadvantages","title":"Rad Disadvantages","text":"<ul> <li>Some software engineering groups resist to change and use RAD  </li> <li>Doesn't handle large systems well. Communication is difficult for larger projects.  </li> <li>Requires more skilled team members.  </li> <li>Requires access to scarce resources.  A lot of interaction with customer and  system experts.  </li> <li>Adds extra overhead if the requirements are known completely and correctly in advance.  </li> <li>Less managerial control.  </li> <li>Sometimes results in a less optimal design.  </li> <li>Unpredictable.  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#james-martin-rad","title":"James Martin RAD","text":"<p>Used these four phases: - Requirements planning: Executive champion, management, team leaders and other stakeholders  agree on the project's general goals and requirements. - User design: User and team members work together to convert he requirements  into a workable design. - Construction: code - Cutover: deliver project (staged delivery, gradual cutover, or incremental deployment)  </p> <p> </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#agile","title":"Agile","text":"<p>Set of guidelines, not really a model.  www.agilemanifesto.org  The values are: - Individuals and interactions over process and tools - Working software over comprehensive documentation - Customer collaboration over contract negotiation - Responding to change over following a plan  </p> <p>** Self-Organizing Teams**:  has the flexibility and authority to find its own methods  for achieving its goals. - Google 'scrumalliance' and 'sef-organizing teams'  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#common-agile-traits","title":"Common Agile traits","text":"<ul> <li>Communication is constant with the customer  </li> <li>Incremental development. If every member of the team understands all the development  functions, the team is called cross-functional.  </li> <li>Focus on Quality  </li> <li>XP: Extreme programming. Increasing the fequency and amount of code reviewed. <ul> <li>Pair programming: two or more programmers write the code together, infront of the same  monitor. The driver controls the keyboard.  The second programmer, navigator, pointer, observer  watches and reviews every line of code.  </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#versioning-shcemes","title":"Versioning shcemes","text":"<p>Version 1.2.3.4 means: 1 - Major: thist represnts a new mahor release with significant new features. These  come out once or twice a year. 2 - Minor: All non major releases are minor  3 - Build: Each weekly build gets a new build number 4 - Revision: Builds that are not final weekly builds get a new revision number.  </p> <p>Point releases: </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#xp","title":"XP","text":"<p>In addition to the above description of XP, there are other possible roles: - Customer: verifies the needs of the Customer are being met - Tracker: Monitors the team memvers' progress and provides useful metrics - Programmer: Defines the application's architecture and writes the code. - Coach: Helps the team work effectively, self-organizing, and use good XP practices. - Tester: Helps the suctomer write and perform acceptance test for use cases; looks for missing  requirements and holse in the design. - Administratior: Sets up and maintains the team members' computers, network, and development tools.  - Doomsayer: looks for trouble  </p> <p>Values: - Communication - Simplicity - Feedback - Courage - Respect: see book \"Extreme Programming Explained: Embrace Change\" by Kent Beck  </p> <p>Practices:  - Have a customer on site - Play the planning game - Use standup meetings - Make frequent small releases - Use intuitive metaphors - Keep designs simple - Defer optimization - Refactor when necessary - Give everyone ownership of the code - Use coding standards - Promote generalization - Use pair programming - Test constantly - Integrate continuously - Work sustainably - Use test-driven and test-first development     - One way is Test first development, write the test first before writing code.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#scrum","title":"SCRUM","text":"<p>The members of a Scrum team play three roles: - Product owner: represent the customer, users, stakeholders     - User stories describe project goals     - Backlog: prioritized list of wanted features     - Liason between team and stakeholders - Team member: build the application - Scum Master: remover of obstacles for the team.  Sometimes leads meetings, makes  sure team is practicing Scrum, challenges team to improve. Funny name, \"Scrum bag\"  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#scrum-spirits","title":"Scrum spirits","text":"<p>Spirits: series of timeboxed incremental iterations - 30 days long, or two weeks, preference based - Potentially shippable increment (PSI): fully tested and approved piece  </p> <p>Hold a sprint planning meeting before each sprint begins Product owner selects the stories for the sprint Items are moved from the product backlog to the sprint backlog During a standup, answer the following three questions: - What did I do since the last scrum? - What do you hope to accomplish before the next scrum? - What obstacles do you see in your way? Sprint review meeting at the end of sprint where Product owner makes sure the requirements were met Burndown charts measure progress   </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#lean-software-development-lsd","title":"Lean Software Development (LSD)","text":"<p>Work on only the essentials  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#crystal","title":"Crystal","text":"<p>Developed by Alistair Cockburn Colors that indicate the project's size  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#feature-driven-development-fdd","title":"Feature Driven Development (FDD)","text":"<p>Iterative and incremental development model. Created to work with large teams. Class owners will create a team for making changes to a class. In other agile methods,  anyone can make changes to the code. In this case, parts are given ownership to  individuals.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#agile-unified-process-aup","title":"Agile Unified Process (AUP)","text":"<p>Version of Unified Process, developed by Scott Amber \"Serial at Large\" means follows 4 phases of UP, sequentially \"Iterative in the small\" meas performs each of theos phaes iteratively  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#disciplined-agile-delivery-dad","title":"Disciplined Agile Delivery (DAD)","text":"<p>Scott Amber moved to this in 2012 from AUP. People first, learning oriented hybrid agil approach.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#dynamic-sytem-development-mehtod-dsdm","title":"Dynamic Sytem Development Mehtod (DSDM)","text":"<p>www.dsdm.org Meant to bring business deciplines to the relatively untamed RAD wilderness  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#kanban","title":"Kanban","text":"<p>japanese for sign board Just-in-time (JIT) production methodology for controlling logistics in a production chain Uses cards, called Kanbans, at each station. When the cards run out at the station,  that station is sent to the supplier to indicate a need for more.   </p> <p> </p> <p>Limit Work in progress (WIP).  The shaded areas are consided WIP. This is to limit  task switching and keep production constant. Limit multitasking.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#gathering-requirements","title":"Gathering Requirements","text":"<p>Requirements are: - Clear - Unambiguous - Consistent: Don't contradict each other, not too many constraints that make it unsolvable - Prioritized     - MOSCOW is a method of Prioritization:     - Must: required     - Should: there are important features that should be included if possible     - Could: Desirable features     - Won't: Optional features   - Verifiable  </p> <p>Requirement Categories: - Audience-Oreinted Requirements - Business Requirements - User Requirements - Functional Requirements - Nonfunctional Requirements - Implementation Requirements  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#furps","title":"FURPS","text":"<p>Acronym for this system requirement categories - Functionality - Usability - Reliability - Performance - Supportability  </p> <p>FURPS+: adds categories software engineers thought were missing - Design Constraints - Implementation requirements - Interface Requirements - Physical requirements  </p> <p>Common Application Requirements: - Screens  - Menus - Navigation - Work flow - Login - User types - Audit tracking and history - Archiving - Configuration  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#how-to-gather-requirements","title":"How to gather requirements","text":"<ul> <li>Listen to Customers and Users  <ul> <li>Who, what, when, where, why, how  </li> </ul> </li> <li>Study users  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#refine-requirements","title":"Refine Requirements","text":"<ul> <li>Copy existing systems  </li> <li>Clairvoyance  </li> <li>Brainstorm  <ul> <li>Osborn method: <ul> <li>Focus on quality  </li> <li>Withhold criticism </li> <li>Encourage unusual ideas  </li> <li>Combine and improve ideas  </li> </ul> </li> <li>Popcorn: people shout out ideas that come to them  </li> <li>Subgroups: break into groups for thinking  </li> <li>Sticky Notes: write on something and share with group  </li> <li>Idea passing: pass the idea around for review  </li> <li>Circulation list: idea passing over email  </li> <li>Individual  </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#recording-requirements","title":"Recording Requirements","text":"<ul> <li>UML  </li> <li>User Stories</li> <li>Use cases: description of a series of interactions between actors.  <ul> <li>Title  </li> <li>Main success scenario  </li> <li>Extensions  </li> </ul> </li> <li>Prototypes  </li> <li>Requirement Specification  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#requirement-validation","title":"Requirement Validation","text":"<p>Makes sure requirements say the right things</p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#requirement-verification","title":"Requirement Verification","text":"<p>Checking that the final applications actually satisfies requirements  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#change-requirements","title":"Change Requirements","text":"<p>Change control board: submittals for changes  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#high-level-design","title":"High-Level Design","text":"<p>High-level design provides a view of the system at the abstract level. How the major  pieces of the finished app will fit together and interact The following are major things to consider adding to high-level design:  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#security","title":"Security","text":"<ul> <li>OS security  </li> <li>App security  </li> <li>Data  </li> <li>Networking  </li> <li>Physical  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#hardware","title":"Hardware","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#user-interface","title":"User Interface","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#internal-interfaces","title":"Internal Interfaces","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#external-interfaces","title":"External Interfaces","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#architecture","title":"Architecture","text":"<ul> <li>Monolithic  </li> <li>Client/Server architecture  <ul> <li>Two-tier architecture: client is separate from the server  </li> </ul> </li> <li>Component-based software engineering (CBSE): loosely coupled components  </li> <li>Service-oriented Architecture (SOA): services that can run as programs on their own that are joined together  </li> <li>Data-centric architecture </li> <li>Event-driven architecture  </li> <li>Rule-based architecture</li> <li>Distributed architecture: different parts of app run on different processors  </li> <li>Mix and match  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#reports","title":"Reports","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#databases","title":"Databases","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#audit-trails","title":"Audit trails","text":"<p>Track user actions on app</p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#user-access","title":"User Access","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#database-maintenance","title":"Database Maintenance","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#configuration-data","title":"Configuration Data","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#data-flows-and-states","title":"Data Flows and States","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#training","title":"Training","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#uml","title":"UML","text":"<p>www.uml.org There are 13 types: - Structural Diagram     - Class Diagram      - Composite Structure Diagram     - COmponent Diagram     - Deployment Ditagram     - Object Diagram     - Package Diagram     - Profile Diagram - Behavior Diagram     - Activity Diagram     - Use Case Diagram     - State Machine Diagram     - Interaction Diagram         - Sequence Diagram         - Communication Diagram         - Interaction Overview Diagram         - Timing Diagram  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#structural-diagram","title":"Structural Diagram","text":"<p>Shows things that will be in the system  </p> <p>Here is a class UML:  Above, 1 student is taking one or more classes  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#development","title":"Development","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#the-right-tools","title":"The Right Tools","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#profilers","title":"Profilers","text":"<p>Let you determine what parts of the program use the most tiem, memory, files  or other resources.   </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#static-analysis-tools","title":"Static Analysis Tools","text":"<p>Study the code without executing it.  Focus on the code style.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#testing-tools","title":"Testing Tools","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#source-code-formatters","title":"Source code formatters","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#refactoring-tools","title":"Refactoring Tools","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#selecting-algorithms","title":"Selecting Algorithms","text":"<ul> <li>Effective  </li> <li>Efficient  </li> <li>Predictable  </li> <li>Simple  </li> <li>Use packaged code/algorithms already in the language  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#top-down-design","title":"Top-Down Design","text":"<p>Top-down, also calleds stepwise refinement: start with a high-level statement  of a problem, and you break the problem down into more detailed pieces. </p> <p>When commenting code, write what the code is supposed to do, not what it actually  is doing. The 'actually doing' comments are pseudo code.</p> <p>Avoid magid numbers, which are numbers that just appear with no explaination.  Like just assigning 201 for a return type. You could create a constant variable  called 'ELEMENT_CREATED' and assign it the value 201.  </p> <p>First make it work. Then make it faster if necessary.  </p> <p>Use a Profiler to see where the performance bottleneck is.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#testing","title":"Testing","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#testing-goals","title":"Testing Goals","text":"<p>Toolsmith: The job of a person on large projects. They help out by building tools  that will help out the teams. Like count lines, re-arrange the controls on a form, search customer data for pattersn. The handyman  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#levels-of-testing","title":"Levels of Testing","text":"<p>Summary: Unit testing - You unit test each individual piece of code. Think each file or class.</p> <p>Integration testing - When putting several units together that interact you need to conduct Integration testing to make sure that integrating these units together has not introduced any errors.</p> <p>Regression testing - after integrating (and maybe fixing) you should run your unit tests again. This is regression testing to ensure that further changes have not broken any units that were already tested. The unit testing you already did has produced the unit tests that can be run again and again for regression testing.</p> <p>Acceptance tests - when a user/customer/business receive the functionality they (or your test department) will conduct Acceptance tests to ensure that the functionality meets their requirements.</p> <p>You might also like to investigate white box and black box testing. There are also performance and load testing, and testing of the \"'ilities\" to consider.  </p> <p>Load Test - simulate a lot of users all running simultaneously</p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#unit-testing","title":"Unit Testing","text":"<p>Unit tests verify the correctness of a specific piece of code.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#integration-testing","title":"Integration Testing","text":"<p>After you write a chunk of code and use unit tests to verify that it works, it's time  to intergrate it into the existing codebase. An integration test verifies that the new  method works and plays well with others. It checks that existing code calls the new  method correctly , and that the new method can call other methods correctly.  </p> <p>Regression testing is a type of QA software testing that ensures changes or updates to an existing software product do not affect previously functioning features. </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#automated-testing","title":"Automated Testing","text":"<p>Automated testing tools let you define tests and the results  they should produce. Like what keystrokes or mouse actions should be taken for the  test.</p> <p>A good testing tool should let you shcedule tests so that you can run regression testing  every night after the developers go home.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#component-interface-testing","title":"Component Interface Testing","text":"<p>Component interface testing studies the interactions between components.</p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#system-testing","title":"System Testing","text":"<p>System testing is an end to end run of the whole system.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#acceptance-testing","title":"Acceptance Testing","text":"<p>Does it meet the user's requirements.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#alpha-testing","title":"Alpha Testing","text":"<p>First round of testing by selected customers. Not open to the public.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#beta-testing","title":"Beta Testing","text":"<p>Second round of testing. Sometimes released as a limited trial to users.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#and-others","title":"And others....","text":"<ul> <li>Compatability test  </li> <li>Destructive test  </li> <li>Functional test  </li> <li>Installation test  </li> <li>Internationalization test  </li> <li>Nonfunctional test  </li> <li>Performance test  </li> <li>Security Test  </li> <li>Usability test </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#testing-techniques","title":"Testing Techniques","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#exhaustive-testing","title":"Exhaustive Testing","text":"<p>Proves that a method works under all cases by providing every case  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#black-box-testing","title":"Black-box testing","text":"<p>You pretend you don't know the way the method works, it's a black box. You just  spray a whole bunch of different cases into it and see if it breaks.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#white-box-testing","title":"White-box testing","text":"<p>You know what the method looks like on the inside.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#gray-box-testing","title":"Gray-box Testing","text":"<p>You know some, but not all of the internals.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#testing-habits","title":"Testing Habits","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#test-and-debug-when-you-are-alert","title":"Test and Debug when you are Alert","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#test-your-own-code","title":"Test Your Own Code","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#have-someone-else-test-your-code","title":"Have Someone else test your code","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#the-rules-of-egoless-programming","title":"The Rules of Egoless Programming:","text":"<ol> <li>Understand and accept that you will make mistakes  </li> <li>You are not your code.  </li> <li>No matter how much \"karate\" you know, someone else will always know more.  </li> <li>Don'e rewrite code without consultation  </li> <li>Treat people who know less than you with respect, deference, and patience.  </li> <li>Th only constant in the world is change.  </li> <li>The only true authority stems from knowledge, not from position.  </li> <li>Fight for what you believe, but gracefully accept defeat.  </li> <li>Don't be \"the guy in the room\". Collaborate with others, don't be isolated.  </li> <li>Cirtique code instead of people - be kind to the coder, not the code.  </li> </ol>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#fix-your-own-bugs","title":"Fix your own bugs","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#think-before-you-change","title":"Think before you change","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#lincoln-index","title":"Lincoln Index","text":"<p>Equation for estimating bugs in program  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#metrics","title":"Metrics","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#defect-analysis","title":"Defect Analysis","text":"<p>Defects: all incorrect features - bugs: type of defect    - changes: type of defect  </p> <p>Categorizing defects: - Discoverer - Severity - Time discovered - Age at fix - Task Type: Like High-level, Security, User Interface, Database...  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#ishikawa-diagram","title":"Ishikawa Diagram","text":"<p>Called fishbone diagrams. Used to determine which category a defect should go into. Also called cause and effect diagrams.  </p> <p> </p> <p>The defect is listed on the right. All causes leading up to the defect are drawn  as \"bones\".  </p> <p> </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#software-metrics","title":"Software Metrics","text":"<p>Metrics give you quantitative measurements. Defect analysis gives you qualitative results.  </p> <p>Attribute: something you can measure.  </p> <p>Metric: value that you sue to study aspects of a project. Sometimes the same as  and attribute.  </p> <p>Study the metrics to determine indicators of the project's future.  </p> <p>Use the indicators to make improvements  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#attributes-of-a-metric","title":"Attributes of a Metric","text":"<ul> <li>Simple  </li> <li>Measurable  </li> <li>Relevant  </li> <li>Objective / quantitative  </li> <li>Easily obtainable  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#process-metrics","title":"Process Metrics","text":"<p>Measure your organization's development process.  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#project-metrics","title":"Project Metrics","text":"<p>Measure and track the current project  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#things-to-measure","title":"Things to measure","text":"<ul> <li>Cost  </li> <li>Effort  </li> <li>Defect Rates  </li> <li>Lines of code (LOC)  </li> <li>Pages of documentation  </li> <li>Functionality  </li> <li>Quality  </li> <li>Complexity  </li> <li>Efficiency  </li> <li>Reliability  </li> <li>Maintainability  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#measuring-metrics","title":"Measuring Metrics","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#function-point-normalization","title":"Function Point Normalization","text":"<p>Generates a number representing the application's complexity.   </p> <p>Overview: - Count five specific function point metrics that include such things as the number of inputs and the number of outputs. - Multiply eash of those values by a complexity fator to indicate how complicated each activity is. Add up the results to get a raw FP value. - Calculate a series of complexity adjustment factors that take into account the  importance of general features of the application. Add the complexity adjustment factor  to get the complexity adjustment value (CAV). - Take a weighted average of the raw FP and the CAV and you have the final FP value.  </p> <p>Count Function Point Metrics: - Inputs: The number of times data moves inot the application and updates the  application's internal data. - Outputs: The number of times outputs move out of the application. - Inquiries: The number of times the application performs a query/response action. - Internal Files: The number of internal logical files used by the application. - External Files: The number of files that the application uses that are maintained by  some other program.  </p> <p> </p> <p>Calculate the Complexity Adjustment Value:  Use the importance rating to assign for each of the items. </p> <p>Factors: </p> <p>Calculate Adjusted FP:  </p> <p>FP = (raw FP) x (0.65 + 0.01 X CAV)  =&gt; FP = (267) x (0.65 + 0.01 X 42) = 285.69  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#uml_1","title":"UML","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#common-users-of-uml-diagrams","title":"Common Users of UML Diagrams:","text":"<ul> <li>Product Owner  </li> <li>Business Analyst  </li> <li>Architect  </li> <li>Operations  </li> <li>Quality Assurance  </li> <li>Developer  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#building-blocks","title":"Building blocks","text":"<p>Things: </p> <p>Relationships: </p> <p>Extensions: </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#structural-modeling","title":"Structural Modeling","text":"<ul> <li>Physical and conceptual parts.  </li> <li>Static parts  </li> <li>Nouns  </li> <li>Types:  <ul> <li>Class  </li> <li>Component  </li> <li>Package  </li> <li>Deployment  </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#class-diagrams","title":"Class Diagrams","text":"<ul> <li>Identifies Vocabulary  </li> <li>Relationships  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#classes","title":"Classes","text":"<ul> <li>Represents an Entity (Noun):  <ul> <li>Attributes  </li> <li>Operations  </li> </ul> </li> <li>Omit details if not required  </li> <li>Interface  </li> </ul> <ul> <li>Implementation and Inheritance  <ul> <li>Account Implements the interface IAccount </li> <li>CheckingAccount \"Is A\" Account (Inheritance)  </li> <li>Absract Class: Account is an abstract class  </li> <li>Concrete Class: CheckingAccount is a concrete class  </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#relationships","title":"Relationships","text":"<p> - Aggregation is a object that can stand alone. \"Payee\" is a stand alone to \"Customer\". - Composite objects rely on other parts. \"Customer\" relys on \"Address\". - Multiplicity describes how many instances of one class can be connected to an instance of another class through a given association.  </p> <p> </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#component-diagram","title":"Component Diagram","text":"<ul> <li>Interfaces:  <ul> <li>Realized: \"Lolipop\" connected to a square port. Service provided by the lolipop.  </li> <li>Required: Half-circle, services that need to be built  </li> </ul> </li> <li>Tight connections, two boxes connected between components.  </li> <li>Loosely Connected, a half circle connecting to a full circle.  </li> </ul> <ul> <li>Components can be inside components  <ul> <li>An arrow pointing in means a resource being supplied  </li> <li>An arrow pointing out means a component output. This is a component in a  component. </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#package-diagram","title":"Package Diagram","text":"<ul> <li>Logical Container, showing dependencies and groupings  </li> <li>Support Large Models  </li> </ul> <ul> <li> <p>Nested Package  </p> <ul> <li>Use a Fully Qualified Domain name to access nested components </li> </ul> </li> <li> <p>Web Client has a dependency on Account Services  </p> </li> <li>BirthdayBonus is dependent on ChildSavingsPlan</li> </ul> <p> </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#deployment-diagram","title":"Deployment Diagram","text":"<p>Nodes can be represented as an image (stereotyped) or by cubes. Cubes can also  be elaborated with details (multiplicity, attributes..).  </p> <p> </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#behavoral-modeling","title":"Behavoral Modeling","text":"<ul> <li>Functionality<ul> <li>Process </li> <li>Interactions  </li> </ul> </li> <li>Dynamic Parts  </li> <li>Verbs  </li> <li>Types of Diagrams:<ul> <li>Use Case</li> <li>Sequence  </li> <li>State  </li> <li>Activity  </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#use-case-diagram","title":"Use Case Diagram","text":"<p>Identify what is needed, not how it is implemented</p> <p> </p> <p> </p> <ul> <li>Generalize: two or more actions are grouped into one action for simplification.  </li> </ul> <p></p> <ul> <li>One use case may have many scenarios.  <ul> <li>In this case, many use case diagrams will have to be created for each scenario.  </li> <li>Scenarios:  <ul> <li>Steps in process  </li> <li>Branches  </li> <li>Extensions  </li> <li>Exceptions  </li> </ul> </li> <li>Use Case vs. Use Case Diagrams <ul> <li>A non-diagram is a text document  </li> <li>Pre-Conditions  </li> <li>Post-Conditions  </li> </ul> </li> <li>May relate to User Stories  </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#sequence-diagram","title":"Sequence Diagram","text":"<p>Class: - Lifeline: dashedline that shows how long the class is alive. - Focus of Control: block on the lifeline - X on lifeline to mark that it was deleted  </p> <p> </p> <ul> <li>Asynchronous messages don't have a dotted return line  </li> <li>Sequences can loop, indicated by a box that says loop: </li> <li>A box that says \"Opt\" means this sequence is optional. The condition that triggers  the option is called a Guard Condition and is written below opt.  </li> <li>A box with \"alt\" is a conditional. Each if/else gaurd clause is separated by a horizontal dash line: </li> <li>A Parallel box is represented with the word \"par\". Multiple actions can occur at  the same time, indicated within the box by sequences separated by a horizontal dash line.  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#state-diagram","title":"State Diagram","text":"<ul> <li> <p>Swim lane: the area for an individual or party responsible for the actions.  Represented above with \"Customer\", \"Loan Officer\", and \"Loan Processor\".  </p> </li> <li> <p>Internal behavior describes what methods are taken for each action. In the example  below, on entry into the method, another method is called, logPaymentAttempt().  On exit from the method, logConfirmation is performed.  </p> </li> <li>The start of a state diagram is a solid circle  </li> <li> <p>The end of a state diagram is a solid circle with a circle around it. </p> </li> <li> <p>The only transitions that won't be labeled are the start state and end state.  </p> </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#activity-diagrams","title":"Activity Diagrams","text":"<p>Similar in looks to a flow chart  </p> <p> </p> <ul> <li>Action: single step that cannot logically be broken down  </li> <li>Activity: multi-step that takes multiple actions  </li> <li>Both Activity and Action are represented the same.  </li> </ul> <p> </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#relational-database-design","title":"Relational Database Design","text":"<ul> <li>Based on Set Theory  </li> <li>First-order predicate logic  </li> <li> <p>Row (tuple), Column (attribute), Table (relation)  </p> </li> <li> <p>Cod's 12 rules (13 actually):  </p> <ul> <li>0:Foundation Rule </li> <li>1:Information Rule  </li> <li>2:Guaranteed Access Rule  </li> <li>3:Systematic Treatment of Null Values  </li> <li>4:Dynamic On-line Catalog Based on the Relational Model  </li> <li>5:Comprehensive Data Sublanguage  </li> <li>6:View Updating Rule  </li> <li>7:High-level insert, update and delete  </li> <li>8:Physical Data Independence  </li> <li>9:Logical Data Independence  </li> <li>10:Integrity Independence  </li> <li>11:Distribution Independence  </li> <li>12:Nonsubversion   </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#data-modeling","title":"Data Modeling","text":"<ul> <li>Conceptual Data Model  <ul> <li>All information in the organization  </li> <li>Not necessarily stored in computers  </li> </ul> </li> <li>Logical data model  <ul> <li>For storing in computers  </li> <li>For a specific database technology  </li> <li>Implementation independent  </li> </ul> </li> <li>Physical data model  <ul> <li>Optimized for specific vendor  </li> <li>Based on logical model  </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#er-modeling-entity-relation","title":"ER Modeling (Entity-Relation)","text":"<ul> <li>IDEF1X notation  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#entity-types","title":"Entity Types","text":"<ul> <li>Entity: Objects, events, or abstractions  <ul> <li>Entity Instance  </li> </ul> </li> <li>Entity Type: describe all instances of the same type.  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#attributes","title":"Attributes","text":"<ul> <li>Keys:  <ul> <li>Composite Key<ul> <li>Candidate keys:<ul> <li>One primary key </li> <li>Zero or more alternate key  </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#relationship","title":"Relationship","text":"<ul> <li>Identifying relationship: Solid line showing the child is dependent on the parent for its identity and cannot exist without it.  </li> <li>Solid lines represent identifying relationships and dashed lines represent non-identifying relationships. In a non-identifying relationship, the foreign key field does not form a part of the parent table's primary key.</li> <li> <p>Maximum Cardinality: </p> </li> <li> <p>Minimum Cardinality: </p> <ul> <li>Parent adds a \"P\" if at least one is required, else it is left as is.  </li> <li>A diamond is added from the child if min. is 0. </li> </ul> </li> <li>Read the realation from parent to child. Ex: \"League contains Member\". The underside can be the  child to parent relation. \"Member plays in League\"  </li> <li>Child in a relationship is weak, represented with round corners, if it's primary key  is dependent on the key of the parent. The parent key is part of the child's primary composite key.   </li> <li>A Child with corners is strong and has it's own primary key, not related  to other tables' primary key.  </li> <li>There can be more than one relationship between entities. (The bottom relation is one to one):  Going the other way: </li> <li>Many to many relationship: </li> <li>Recursive relation can never be an identifying relationship: </li> <li>Normalizing between tables creates a weak relationship with a join table: </li> <li>Subtypes:  <ul> <li>A board member cannot be a volunteer. A member could be neither board member or volunteer.  This is marked with a single horizontal line.      </li> <li>A board member is either male or female. Because they have to be one or the other,  there is a double horizontal bar for the subtype.      </li> <li>Subtypes are one-to-one relationship  </li> </ul> </li> </ul> <p> </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#create-a-data-model","title":"Create a Data Model","text":"<ul> <li>Mission statement: Broad overview (I think user story)   </li> <li>Interviews:  <ul> <li>Management  </li> <li>Subject matter experts  </li> <li>End users  </li> </ul> </li> <li>Interviewing styles:  <ul> <li>Use concrete examples  </li> </ul> </li> <li>Find the relevant constraints  </li> <li>Convert the interview responses to facts </li> <li>Create the data model  <ul> <li>Functional dependencies  </li> <li>Normalize the data model  </li> </ul> </li> <li>Reading a mission statement: </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#creating-the-er-model","title":"Creating the ER model","text":"<ul> <li>Find Entity Types  </li> <li>All Entity types have an identifying fact type  </li> <li>You will have to create your own language for identifying an optional attribute in an Entity.  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#converting-to-relational-database-design","title":"Converting to Relational database Design","text":""},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#relational-db-representation","title":"Relational DB representation:","text":"<ul> <li>Table1(Column1, Column2, Column3)  <ul> <li>Very vague. The underlined column is the candidate key(s)  </li> <li>Dashed underlines are alternate keys  </li> </ul> </li> <li> <p>Another Representaion of DB is Data Description Language (DDL) of SQL: </p> </li> <li> <p>Many to many relationships will have to have a join table  </p> </li> <li>Generated Column: when attribute is inserted, a check manipulates the value, usually to make it acceptable  </li> <li>Asserted column: during an attribute insertion, a check that performs a query on the database to check the value is performed.  </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#normalization","title":"Normalization","text":"<p>Steps: - First Normal Form (1NF) - Second Normal Form (2NF) - Third Normal Form (3NF) (best option)  - Elementary Key Normal Form (EKNF) - Boyce-Codd Normal Form (BCNF) - 4th - 5th - Domain/Key Normal Form (DKNF) - 6th  </p>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#functional-dependencies","title":"Functional Dependencies","text":"<ul> <li>Determinant: attribute  A =&gt; attribute B  <ul> <li>\"Attribute B is functionally dependent on attribute A\"  </li> <li>Attribute A = Dave  </li> <li>Attribute B = No birthday on file  </li> <li>Attribute A is the Determinant </li> </ul> </li> <li>Dependent Attribute: attribute B above  </li> <li>Trivial Dependency: every attribute depends on itself  </li> <li>Derived Attribute: Attribute calculated from other attributes  <ul> <li>Storing: Price, tax rate, and taxed amount. Taxed amount is derived.  </li> <li>Avoid derived attributes  </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#first-normal-form","title":"First Normal Form","text":"<ul> <li>Every table must have a key  </li> <li>Candidate keys: attributes that could qualify as primary keys or alternate keys  <ul> <li>All attributes must be dependent on the Candidate Key  </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D284_Software_Engineering/D284_Software_Engineering/#agile_1","title":"Agile","text":"<p>Sprint Board. PBI is \"Product Backlog Item\". Minimize works in progress (WIP). Managed by Developers.  Burndown chart measures the developer's approach to completion.   </p> <p>Burn-up Chart: The line at the top represents items that have to be completed. </p> <p>Estimation Wall: Team members place tasks in the column where they feel it matches the task time duration.  Other members can move/change once placed. </p>"},{"location":"WGU_Notes/D287_Java_Frameworks/Additional_Material/Additional_Material/","title":"Additional Material","text":""},{"location":"WGU_Notes/D287_Java_Frameworks/Additional_Material/Additional_Material/#command-line-arguments","title":"Command-Line Arguments","text":"<p><pre><code>public class ArgTest {\n   public static void main(String[] args) {\n      int i;\n      int argc;\n\n      argc = args.length;\n      System.out.println(\"args.length: \" + argc);\n\n      for (i = 0; i &lt; argc; ++i) {\n         System.out.println(\"args[\" + i + \"]: \" + args[i]);\n      }\n   }\n}\n</code></pre> Output: <pre><code>&gt; java ArgTest\nargs.length: 0\n\n&gt; java ArgTest Hello\nargs.length: 1\nargs[0]: Hello\n\n&gt; java ArgTest Hey ABC 99 -5\nargs.length: 4\nargs[0]: Hey\nargs[1]: ABC\nargs[2]: 99\nargs[3]: -5\n</code></pre></p>"},{"location":"WGU_Notes/D287_Java_Frameworks/Collections/Collections/","title":"Collections","text":""},{"location":"WGU_Notes/D287_Java_Frameworks/Collections/Collections/#enhanced-for-loop","title":"Enhanced For Loop","text":"<ul> <li>Enhanced for loop is a for loop that iterates throug each element in an array or Collection  <ul> <li>AKA for each loop</li> </ul> </li> <li>Only allows elements to be accessed forward from the first element to the last element  </li> </ul> <pre><code>ArrayList&lt;String&gt; teamRoster = new ArrayList&lt;String&gt;();\n\n// Adding player names\nteamRoster.add(\"Mike\");\nteamRoster.add(\"Scottie\");\nteamRoster.add(\"Toni\");\n\nSystem.out.println(\"Current roster:\");\n\nfor (String playerName : teamRoster) {\n   System.out.println(playerName);\n}\n</code></pre> <p>Output: <pre><code>Current roster:\nMike  \nScottie  \nToni  \n</code></pre></p>"},{"location":"WGU_Notes/D287_Java_Frameworks/Collections/Collections/#linkedlist","title":"LinkedList","text":"<ul> <li>Uses the List interface, implements adding, modifying, and removing  </li> <li>LinkedList is an ADT (Abstract Data Type - generic) implemented as a generic  class that supports different types of elements.  </li> <li>Can insert at a specified index <code>authorList.add(3, \"Butler\")</code> or will add to the end of the list if no index is specified <code>authorList.add(\"Martin\")</code> </li> </ul>"},{"location":"WGU_Notes/D287_Java_Frameworks/Collections/Collections/#accessing-items-using-listiterator","title":"Accessing items using ListIterator","text":"<ul> <li>ListIterator is an object that points to a location in a List and provides methods to access an element and advance the ListIterator to the next position in the list  </li> <li><code>import java.util.ListIterator;</code> <pre><code>LinkedList&lt;String&gt; authorsList = new LinkedList&lt;String&gt;();  \nString authorName;  \nListIterator&lt;String&gt; listIterator;\n\nauthorsList.add(\"Gamow\");  \nauthorsList.add(\"Greene\");  \nauthorsList.add(\"Penrose\");\n\nlistIterator = authorsList.listIterator();\n\nwhile (listIterator.hasNext()) {     \n   authorName = listIterator.next();     \n   System.out.println(authorName);  \n}\n</code></pre></li> </ul>"},{"location":"WGU_Notes/D287_Java_Frameworks/Collections/Collections/#hashmap","title":"HashMap","text":"<ul> <li>Used to iterate through to find an instance</li> <li>import java.util.HashMap  </li> <li>Declared as `HashMap hasMap = new HashMap();<ul> <li>K is the key and V is the value.</li> </ul> <p><pre><code>HashMap&lt;String, Integer&gt; statePopulation = new HashMap&lt;String, Integer&gt;();\n\n// 2013 population data from census.gov\nstatePopulation.put(\"CA\", 38332521);\nstatePopulation.put(\"AZ\", 6626624);\nstatePopulation.put(\"MA\", 6692824);\n\nSystem.out.print(\"Population of Arizona in 2013 is \");\nSystem.out.print(statePopulation.get(\"AZ\"));\nSystem.out.println(\".\");\n</code></pre> * HashMap and TreeMap are ADTs implementing the Map interface. Although both HashMap and TreeMap implement a Map, a programmer should select the implementation that is appropriate for the intended task. A HashMap typically provides faster access but does not guarantee any ordering of the keys, whereas a TreeMap maintains the ordering of keys but with slightly slower access. This material uses the HashMap class, but the examples above can be modified to use TreeMap  </p>"},{"location":"WGU_Notes/D287_Java_Frameworks/Collections/Collections/#hashset","title":"HashSet","text":"<ul> <li>HashSet and TreeSet are ADTs implementing the Set interface. Although both HashSet and TreeSet implement a Set, a programmer should select the implementation that is appropriate for the intended task. A HashSet typically provides faster access but does not guarantee any ordering of the elements, whereas a TreeSet maintains the ordering of elements but with slightly slower access.  </li> <li>Declared as <code>HashSet&lt;T&gt; hashSet - new HashSet&lt;T&gt;();</code> </li> <li><code>import java.util.HashSet;</code></li> <li>The add() method does not add duplicate elements to a set. Trying to add a duplicate returns false.</li> </ul> <pre><code>import java.util.HashSet;\n\npublic class BookCollection {\n   public static void main(String[] args) {\n      HashSet&lt;String&gt; ownedBooks = new HashSet&lt;String&gt;();\n\n      ownedBooks.add(\"A Tale of Two Cities\");\n      ownedBooks.add(\"The Lord of the Rings\");\n\n      System.out.println(\"Contains \\\"A Tale of Two Cities\\\": \" +\n                         ownedBooks.contains(\"A Tale of Two Cities\"));\n\n      ownedBooks.remove(\"The Lord of the Rings\");\n\n      System.out.println(\"Contains \\\"The Lord of the Rings\\\": \" +\n                         ownedBooks.contains(\"The Lord of the Rings\"));\n   }\n}\n</code></pre>"},{"location":"WGU_Notes/D287_Java_Frameworks/Exceptions/Exceptions/","title":"Exceptions","text":""},{"location":"WGU_Notes/D287_Java_Frameworks/Exceptions/Exceptions/#try-with-resources","title":"try-with-resources","text":"<ul> <li>closes the resource once the block is completed. So you don't have to explicitly close a file</li> <li>ex: </li> </ul> <pre><code>    try(Scanner fileScnr - new Scanner (new FileInputStream(\"input.tst?))){\n            code\n        } catch (...){\n        }\n</code></pre> <p>finally block always executes when exiting a try/catch</p> <p>If a method is built to throw an exception to be handled by the calling method, its signature looks:</p> <p>public static doubl getArea(Scanner scnr) throws Exception, FileNotFoundException { method stuff return value</p> <p>}</p> <p>Above is called a throws clause. Multiple exceptions can be declared. The first exception declared in the 'throws' statement must be used in the callingme method. The second or additional exceptions are optional to the calling method.</p>"},{"location":"WGU_Notes/D287_Java_Frameworks/Exceptions/Exceptions/#java-has-two-types-of-exceptions","title":"Java has two types of exceptions:","text":"<p>A checked exception is an exception that a programmer should be able to anticipate and handle. Ex: A program that opens files should anticipate and handle a FileNotFoundException. An unchecked exception is an exception caused by hardware or logic errors that a programmer usually cannot anticipate and handle.  Ex: A program should try to eliminate code that uses null references instead of catching and handling NullPointerException.</p>"},{"location":"WGU_Notes/D287_Java_Frameworks/Exceptions/Exceptions/#figure-241-exceptions-with-hierarchical-methods-datatimespeedup-example","title":"Figure 2.4.1: Exceptions with hierarchical methods: DataTimeSpeedup example.","text":"<pre><code>import java.util.Scanner;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\n\npublic class DataTimeSpeedup {\n   public static double calcAvgInputVal(Scanner scnr) throws Exception {\n      double sumVal = 0;\n      int numValues = scnr.nextInt();\n\n      if (numValues &lt; 0) {\n         throw new Exception(\"Negative number of values\");\n      }\n\n      for (int i = 0; i &lt; numValues; ++i) {\n         sumVal += scnr.nextDouble();\n      }\n\n      return sumVal / (double) numValues;\n   }\n\n   public static double calcAvgSpeedup(String file1, String file2) throws FileNotFoundException, Exception {\n      FileInputStream inStream1 = new FileInputStream(file1);\n      FileInputStream inStream2 = new FileInputStream(file2);\n      Scanner fileScnr1 = new Scanner(inStream1);\n      Scanner fileScnr2 = new Scanner(inStream2);\n\n      double file1Avg = calcAvgInputVal(fileScnr1);\n      double file2Avg = calcAvgInputVal(fileScnr2);\n\n      return file2Avg / file1Avg;\n   }\n\n   public static void main(String[] args) {\n      Scanner scnr = new Scanner(System.in);\n      String file1;\n      String file2;\n      double avgSpeedup;\n      boolean retry = true;\n\n      while (retry) {\n         System.out.print(\"Enter data file names: \");\n         file1 = scnr.next();\n         file2 = scnr.next();\n\n         try {\n            avgSpeedup = calcAvgSpeedup(file1, file2);\n            retry = false;\n\n            System.out.println(\"Speedup: \" + avgSpeedup);\n         }\n         catch (FileNotFoundException exception) {\n            System.out.println(exception.getMessage());\n            retry = true;\n         }\n         catch (Exception exception) {\n            System.out.println(exception.getMessage());\n            retry = false;\n         }\n      }\n   }\n}\n</code></pre>"},{"location":"WGU_Notes/D287_Java_Frameworks/Exceptions/Exceptions/#collections","title":"Collections","text":"<ul> <li>Collections provide static methods that operate on vairous types of lists, like ArrayList<ul> <li>The sort() method will work as long as the Collection elements implement the Comparable interface</li> <li>Comparable interface is used in primitive wrapper classes (Integer, Double)</li> <li>These clases implement the compareTo() method</li> <li>the import java.util must be used ot implement the sort() method</li> </ul> </li> </ul> <p>Testing adding a bash alias</p>"},{"location":"WGU_Notes/D287_Java_Frameworks/Generics/Generics/","title":"Generics","text":""},{"location":"WGU_Notes/D287_Java_Frameworks/Generics/Generics/#collections","title":"Collections","text":"<ul> <li>Collections provide static methods that operate on vairous types of lists, like ArrayList<ul> <li>The sort() method will work as long as the Collection elements implement the Comparable interface</li> <li>Comparable interface is used in primitive wrapper classes (Integer, Double)</li> <li>These clases implement the compareTo() method</li> <li>the import java.util must be used ot implement the sort() method</li> </ul> </li> </ul>"},{"location":"WGU_Notes/D287_Java_Frameworks/Generics/Generics/#figure-311-collections-sort-method-operates-on-lists-of-integer-objects","title":"Figure 3.1.1: Collections' sort() method operates on lists of Integer objects.","text":"<pre><code>import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class ArraySorter {\n   public static void main(String[] args) {\n      Scanner scnr = new Scanner(System.in);\n      final int NUM_ELEMENTS = 5;                             // Number of items in array\n      ArrayList&lt;Integer&gt; userInts = new ArrayList&lt;Integer&gt;(); // Array of user defined values\n      int i;                                                  // Loop index\n\n      // Prompt user for input, add values to array\n      System.out.println(\"Enter \" + NUM_ELEMENTS + \" numbers...\");\n      for (i = 1; i &lt;= NUM_ELEMENTS; ++i) {\n         System.out.print(i + \": \");\n         userInts.add(scnr.nextInt());\n      }\n\n      // Sort ArrayList of Comparable elements\n      Collections.sort(userInts);\n\n      // Print sorted array\n      System.out.print(\"\\nSorted numbers: \");\n      for (i = 0; i &lt; NUM_ELEMENTS; ++i) {\n         System.out.print(userInts.get(i) + \" \");\n      }\n      System.out.println(\"\");\n   }\n}\n</code></pre>"},{"location":"WGU_Notes/D287_Java_Frameworks/Generics/Generics/#figure-312-sorting-an-arraylist-of-employee-records","title":"Figure 3.1.2: Sorting an ArrayList of employee records.","text":"<p>This creates a userdefined compareTo() by implementing the Comparable class"},{"location":"WGU_Notes/D287_Java_Frameworks/Generics/Generics/#employeedatajava","title":"EmployeeData.java:","text":"<pre><code>public class EmployeeData implements Comparable&lt;EmployeeData&gt; {\n   private String firstName; // First Name\n   private String lastName;  // Last Name\n   private Integer emplID;   // Employee ID\n   private Integer deptNum;  // Department Number\n\n   EmployeeData(String firstName, String lastName, Integer emplID, Integer deptNum) {\n      this.firstName = firstName;\n      this.lastName = lastName;\n      this.emplID = emplID;\n      this.deptNum = deptNum;\n   }\n\n   @Override\n   public int compareTo(EmployeeData otherEmpl) {\n      String fullName;           // Full name, this employee\n      String otherFullName;      // Full name, comparison employee\n      int comparisonVal;         // Outcome of comparison\n\n      // Compare based on department number first\n      comparisonVal = deptNum.compareTo(otherEmpl.deptNum);\n\n      // If in same organization, use name\n      if (comparisonVal == 0) {\n         fullName = lastName + firstName;\n         otherFullName = otherEmpl.lastName + otherEmpl.firstName;\n         comparisonVal = fullName.compareTo(otherFullName);\n      }\n\n      return comparisonVal;\n   }\n\n   @Override\n   public String toString() {\n      return lastName + \" \" + firstName + \n             \"       \\tID: \" + emplID + \n             \"\\t\\tDept. #: \" + deptNum;\n   }\n}\n</code></pre>"},{"location":"WGU_Notes/D287_Java_Frameworks/Generics/Generics/#employeerecordsjava","title":"EmployeeRecords.java:","text":"<pre><code>import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class EmployeeRecords {\n\n   public static void main(String[] args) {\n      Scanner scnr = new Scanner(System.in);\n      ArrayList&lt;EmployeeData&gt; emplList = new ArrayList&lt;EmployeeData&gt;(); // Stores all employee data\n      EmployeeData emplData;                                            // Stores info for one employee\n      String userCommand;                                               // User defined add/print/quit command\n      String emplFirstName;                                             // User defined employee first name\n      String emplLastName;                                              // User defined employee last name\n      Integer emplID;                                                   // User defined employee ID\n      Integer deptNum;                                                  // User defined employee Dept\n      int i;                                                            // Loop counter\n\n      do {\n         // Prompt user for input\n         System.out.println(\"Enter command ('a' to add new employee, 'p' to print all employees, 'q' to quit): \");\n         userCommand = scnr.next();\n\n         // Add new employee entry\n         if (userCommand.equals(\"a\")) {\n            System.out.print(\"First Name: \");\n            emplFirstName = scnr.next();\n            System.out.print(\"Last Name: \");\n            emplLastName = scnr.next();\n            System.out.print(\"ID: \");\n            emplID = scnr.nextInt();\n            System.out.print(\"Department Number: \");\n            deptNum = scnr.nextInt();\n            emplData = new EmployeeData(emplFirstName, emplLastName, emplID, deptNum);\n            emplList.add(emplData);\n         }\n         // Print all entries\n         else if (userCommand.equals(\"p\")) {\n\n            // Sort employees by department number first\n            // and name second\n            Collections.sort(emplList);\n\n            System.out.println(\"\");\n            System.out.println(\"Employees: \");\n            // Access employee records\n            for (i = 0; i &lt; emplList.size(); ++i) {\n               System.out.println(emplList.get(i).toString());\n            }\n            System.out.println(\"\");\n         }\n      } while (!userCommand.equals(\"q\"));\n   }\n}\n</code></pre>"},{"location":"WGU_Notes/D287_Java_Frameworks/Generics/Generics/#implements","title":"Implements:","text":"<ul> <li>Implements keyword tells the compiler that a class implements, instead of extends, instead of extends, a particular interface</li> <li>Interfaces cannot instantiate the methods declared, it must be overwritten by an implementing class  </li> <li>Interfaces have method declarations, not method definitions</li> </ul>"},{"location":"WGU_Notes/D287_Java_Frameworks/Generics/Generics/#generic-method","title":"Generic Method:","text":"<ul> <li>Generic Methods have a special type parameter rather than a specific type.  </li> <li>It is (Kind of) an alternative to using method overrides, because those can be confusing, I guess  </li> <li>In the following:  <ul> <li>The method return type is preceded by &gt;,  where TheType can be any identifier. That type is known as a type parameter  and can be used throughout the method for any parameter types, return types, or local  variable types. The identifier is known as a template parameter, and may be various  reference types or even another template parameter.   <li>Type Bound specifyies what type is allowed, like Compare means that only a class implementing compareTo() can be used as a type. <li>Primitive types cannot be used for arguments, use primitive wrapper classes  </li>"},{"location":"WGU_Notes/D287_Java_Frameworks/Generics/Generics/#figure-322-a-generic-method-enables-a-method-to-handle-various-class-types","title":"Figure 3.2.2: A generic method enables a method to handle various class types.","text":"<p><pre><code>public class ItemMinimum {\n   public static &lt;TheType extends Comparable&lt;TheType&gt;&gt; \n   TheType tripleMin(TheType item1, TheType item2, TheType item3) {\n      TheType minVal = item1; // Holds min item value, init to first item\n\n      if (item2.compareTo(minVal) &lt; 0) {\n         minVal = item2;\n      }\n      if (item3.compareTo(minVal) &lt; 0) {\n         minVal = item3;\n      }\n      return minVal;\n   }\n\n   public static void main(String[] args) {\n      Integer num1 = 55;    // Test case 1, item1\n      Integer num2 = 99;    // Test case 1, item2\n      Integer num3 = 66;    // Test case 1, item3\n\n      Character let1 = 'a'; // Test case 2, item1\n      Character let2 = 'z'; // Test case 2, item2\n      Character let3 = 'm'; // Test case 2, item3\n\n      String str1 = \"zzz\";  // Test case 3, item1\n      String str2 = \"aaa\";  // Test case 3, item2\n      String str3 = \"mmm\";  // Test case 3, item3\n\n      // Try tripleMin method with Integers\n      System.out.println(\"Items: \" + num1 + \" \" + num2 + \" \" + num3);\n      System.out.println(\"Min: \" + tripleMin(num1, num2, num3) + \"\\n\");\n\n      // Try tripleMin method with Characters\n      System.out.println(\"Items: \" + let1 + \" \" + let2 + \" \" + let3);\n      System.out.println(\"Min: \" + tripleMin(let1, let2, let3) + \"\\n\");\n\n      // Try tripleMin method with Strings\n      System.out.println(\"Items: \" + str1 + \" \" + str2 + \" \" + str3);\n      System.out.println(\"Min: \" + tripleMin(str1, str2, str3) + \"\\n\");\n   }\n}\n</code></pre> Output: <pre><code>run:\nItems: 55 99 66\nMin: 55\n\nItems: a z m\nMin: a\n\nItems: zzz aaa mmm\nMin: aaa\n</code></pre></p>"},{"location":"WGU_Notes/D287_Java_Frameworks/Generics/Generics/#generic-class","title":"Generic class","text":"<p>TripleItem.java: <pre><code>public class TripleItem &lt;TheType extends Comparable&lt;TheType&gt;&gt; {\n   private TheType item1; // Data value 1\n   private TheType item2; // Data value 2\n   private TheType item3; // Data value 3\n\n   public TripleItem(TheType i1, TheType i2, TheType i3) {\n      item1 = i1;\n      item2 = i2;\n      item3 = i3;\n   }\n\n   // Print all data member values\n   public void printAll() {\n      System.out.println(\"(\" + item1 + \",\" + item2 + \",\" + item3 + \")\");\n   }\n\n   // Return min data member value\n   public TheType minItem() {\n      TheType minVal;        // Holds min item value, init to first item\n\n      minVal = item1;\n\n      if (item2.compareTo(minVal) &lt; 0) {\n         minVal = item2;\n      }\n      if (item3.compareTo(minVal) &lt; 0) {\n         minVal = item3;\n      }\n      return minVal;\n   }\n}\n</code></pre> TripleItemManager.java: <pre><code>public class TripleItemManager {\n   public static void main(String[] args) {\n\n      // TripleItem class with Integers\n      TripleItem&lt;Integer&gt; triInts = new TripleItem&lt;Integer&gt;(9999, 5555, 6666);       \n\n      // TripleItem class with Shorts\n      TripleItem&lt;Short&gt; triShorts = new TripleItem&lt;Short&gt;((short)99, (short)55, (short)66); \n\n      // Try methods from TripleItem\n      triInts.printAll();\n      System.out.println(\"Min: \" + triInts.minItem() + \"\\n\");\n\n      triShorts.printAll();\n      System.out.println(\"Min: \" + triShorts.minItem());\n   }\n}\n</code></pre> Output: <pre><code>(9999,5555,6666)\nMin: 5555\n\n(99,55,66)\nMin: 55\n</code></pre></p>"},{"location":"WGU_Notes/D287_Java_Frameworks/Searching_and_Algorithms/Search_and_Algo/","title":"Searching and Algorithm","text":""},{"location":"WGU_Notes/D287_Java_Frameworks/Searching_and_Algorithms/Search_and_Algo/#linear-searching","title":"Linear Searching","text":"<ul> <li>For a list with N elements, linear search thus requires at most N comparisons. The algorithm is said to require \"on the order\" of N comparisons.  </li> </ul> <pre><code>import java.util.Scanner;\npublic class LinearSearch {\n   public static int linearSearch(int [] numbers, int key) {\n      int i;\n\n      for (i = 0; i &lt; numbers.length; ++i) {\n         if (numbers[i] == key) {\n            return i;\n         }\n      }\n\n      return -1; /* not found */\n   }\n\n   public static void main(String [] args) {\n      Scanner scnr = new Scanner(System.in);\n      int [] numbers = {2, 4, 7, 10, 11, 32, 45, 87};\n      int i;\n      int key;\n      int keyIndex;\n\n      System.out.print(\"NUMBERS: \");\n      for (i = 0; i &lt; numbers.length; ++i) {\n         System.out.print(numbers[i] + \" \");\n      }\n      System.out.println();\n\n      System.out.print(\"Enter a value: \");\n      key = scnr.nextInt();\n\n      keyIndex = linearSearch(numbers, key);\n\n      if (keyIndex == -1) {\n         System.out.println(key + \" was not found.\");\n      } \n      else {\n         System.out.println(\"Found \" + key + \" at index \" + keyIndex + \".\");\n      }\n   }\n}\n</code></pre>"},{"location":"WGU_Notes/D287_Java_Frameworks/Searching_and_Algorithms/Search_and_Algo/#runtime","title":"Runtime","text":"<ul> <li>An algorithm's runtime is the time the algorithm takes to execute. If each comparison takes 1 \u00b5s (1 microsecond), a linear search algorithm's runtime is up to 1 s to search a list with 1,000,000 elements, 10 s for 10,000,000 elements, and so on. Ex: Searching Amazon's online store, which has more than 200 million items, could require more than 3 minutes.  </li> </ul>"},{"location":"WGU_Notes/D287_Java_Frameworks/Searching_and_Algorithms/Search_and_Algo/#binary-search","title":"Binary Search","text":"<ul> <li>Checks the middle first  </li> <li>For a 32 element list, if the search key is not found, the search space is halved to have 16 elements, then 8, 4, 2, 1, and finally none, requiring only 6 steps.   <ul> <li> </li> <li>Know the change of base calculation!!! </li> </ul> </li> </ul> <p><pre><code>import java.util.Scanner;\n\npublic class BinarySearch {\n   public static int binarySearch(int [] numbers, int key) {\n      int mid;\n      int low;\n      int high;\n\n      low = 0;\n      high = numbers.length - 1;\n\n      while (high &gt;= low) {\n         mid = (high + low) / 2;\n         if (numbers[mid] &lt; key) {\n            low = mid + 1;\n         } \n         else if (numbers[mid] &gt; key) {\n            high = mid - 1;\n         } \n         else {\n            return mid;\n         }\n      }\n\n      return -1; // not found\n   }\n\n   public static void main(String [] args) {\n      Scanner scnr = new Scanner(System.in);\n      int [] numbers = {2, 4, 7, 10, 11, 32, 45, 87};\n      int i;\n      int key;\n      int keyIndex;\n\n      System.out.print(\"NUMBERS: \");\n      for (i = 0; i &lt; numbers.length; ++i) {\n         System.out.print(numbers[i] + \" \");\n      }\n      System.out.println();\n\n      System.out.print(\"Enter a value: \");\n      key = scnr.nextInt();\n\n      keyIndex = binarySearch(numbers, key);\n\n      if (keyIndex == -1) {\n         System.out.println(key + \" was not found.\");\n      } \n      else {\n         System.out.println(\"Found \" + key + \" at index \" + keyIndex + \".\");\n      }\n   }\n}\n</code></pre> Output: <pre><code>NUMBERS: 2 4 7 10 11 32 45 87 \nEnter a value: 10\nFound 10 at index 3.\n...\nNUMBERS: 2 4 7 10 11 32 45 87 \nEnter a value: 17\n17 was not found.\n</code></pre></p>"},{"location":"WGU_Notes/D287_Java_Frameworks/Searching_and_Algorithms/Search_and_Algo/#sorting","title":"Sorting","text":""},{"location":"WGU_Notes/D287_Java_Frameworks/Searching_and_Algorithms/Search_and_Algo/#sorting-selection","title":"Sorting Selection","text":"<ul> <li>Selection Sort is an algorithm that treats the input as two parts, a sorted part and an unsorted part, and repeatedly selects the proper next value to move from the unsorted part to the end of the sorted part.  </li> <li>Selection Sort runtime = O(N^2)<ul> <li>The outer loop executes N-1 times</li> <li>The inner loop executes N/2 times</li> <li>The result is (N-1) x (N/2) = O(N^2)  </li> </ul> </li> </ul> <p><pre><code>public class SelectionSort {\n   public static void selectionSort(int [] numbers) {\n      int i;\n      int j;\n      int indexSmallest;\n      int temp;      // Temporary variable for swap\n\n      for (i = 0; i &lt; numbers.length - 1; ++i) {\n\n         // Find index of smallest remaining element\n         indexSmallest = i;\n         for (j = i + 1; j &lt; numbers.length; ++j) {\n\n            if (numbers[j] &lt; numbers[indexSmallest]) {\n               indexSmallest = j;\n            }\n         }\n\n         // Swap numbers[i] and numbers[indexSmallest]\n         temp = numbers[i];\n         numbers[i] = numbers[indexSmallest];\n         numbers[indexSmallest] = temp;\n      }\n   }\n\n   public static void main(String [] args) {\n      int numbers [] = {10, 2, 78, 4, 45, 32, 7, 11};\n      int i;\n\n      System.out.print(\"UNSORTED: \");\n      for (i = 0; i &lt; numbers.length; ++i) {\n         System.out.print(numbers[i] + \" \");\n      }\n      System.out.println();\n\n      /* initial call to selection sort with index */\n      selectionSort(numbers);\n\n      System.out.print(\"SORTED: \");\n      for (i = 0; i &lt; numbers.length; ++i) {\n         System.out.print(numbers[i] + \" \");\n      }\n      System.out.println();\n   }\n}\n</code></pre> Output: <pre><code>UNSORTED: 10 2 78 4 45 32 7 11 \nSORTED: 2 4 7 10 11 32 45 78\n</code></pre></p>"},{"location":"WGU_Notes/D287_Java_Frameworks/Searching_and_Algorithms/Search_and_Algo/#insertion-sort","title":"Insertion Sort","text":"<p>Insertion sort is a sorting algorithm that treats the input as two parts, a sorted part and an unsorted part, and repeatedly inserts the next value from the unsorted part into the correct location in the sorted part. * Same runtime as a Selection Sort, O(N^2)     - This may not be true. The practice questions use Factorial =&gt;          - In the worst case, assuming each comparison takes 1 \u00b5s, how long will insertion sort algorithm take to sort a list of 10 elements?         - If N = 10, then Insertion Sort comparisons = (N-1)! = 45  For sorted or nearly sorted inputs, insertion sort's runtime is O(N). A nearly sorted list only contains a few elements not in sorted order. Ex: {4, 5, 17, 25, 89, 14} is nearly sorted having only one element not in sorted position.</p> <p><pre><code>public class InsertionSort {\n   public static void insertionSort(int [] numbers) {\n      int i;\n      int j;\n      int temp;      // Temporary variable for swap\n\n      for (i = 1; i &lt; numbers.length; ++i) {\n         j = i;\n         // Insert numbers[i] into sorted part \n         // stopping once numbers[i] in correct position\n         while (j &gt; 0 &amp;&amp; numbers[j] &lt; numbers[j - 1]) {\n\n            // Swap numbers[j] and numbers[j - 1]\n            temp = numbers[j];\n            numbers[j] = numbers[j - 1];\n            numbers[j - 1] = temp;\n            --j;\n         }\n      }\n   }\n\n   public static void main(String [] args) {\n      int [] numbers = {10, 2, 78, 4, 45, 32, 7, 11};\n      int i;\n\n      System.out.print(\"UNSORTED: \");\n      for (i = 0; i &lt; numbers.length; ++i) {\n         System.out.print(numbers[i] + \" \");\n      }\n      System.out.println();\n\n      insertionSort(numbers);\n\n      System.out.print(\"SORTED: \");\n      for (i = 0; i &lt; numbers.length; ++i) {\n         System.out.print(numbers[i] + \" \");\n      }\n      System.out.println();\n   }\n}\n</code></pre> Output: <pre><code>UNSORTED: 10 2 78 4 45 32 7 11 \nSORTED: 2 4 7 10 11 32 45 78\n</code></pre></p>"},{"location":"WGU_Notes/D287_Java_Frameworks/Searching_and_Algorithms/Search_and_Algo/#quicksort","title":"Quicksort","text":"<ul> <li>Quicksort is a sorting algorithm that repeatedly partitions the input into low and high parts (each part unsorted), and then recursively sorts each of those parts. To partition the input, quicksort chooses a pivot to divide the data into low and high parts.</li> <li>The pivot can be any value within the array being sorted, commonly the value of the middle array element. Ex: For the list {4 34 10 25 1}, the middle element is located at index 2 (the middle of indices 0..4) and has a value of 10.</li> <li>The quicksort algorithm's runtime is typically O(N log N). </li> <li>So the worst case runtime for the quicksort algorithm is O(N^2)  </li> </ul> <p><pre><code>public class QuickSort {\n   public static int partition(int [] numbers, int i, int k) {\n      int l;\n      int h;\n      int midpoint;\n      int pivot;\n      int temp;\n      boolean done;\n\n      /* Pick middle element as pivot */\n      midpoint = i + (k - i) / 2;\n      pivot = numbers[midpoint];\n\n      done = false;\n      l = i;\n      h = k;\n\n      while (!done) {\n         /* Increment l while numbers[l] &lt; pivot */\n         while (numbers[l] &lt; pivot) {\n            ++l;\n         }\n\n         /* Decrement h while pivot &lt; numbers[h] */\n         while (pivot &lt; numbers[h]) {\n            --h;\n         }\n\n         /* If there are zero or one items remaining,\n            all numbers are partitioned. Return h */\n         if (l &gt;= h) {\n            done = true;\n         } \n         else {\n            /* Swap numbers[l] and numbers[h],\n               update l and h */\n            temp = numbers[l];\n            numbers[l] = numbers[h];\n            numbers[h] = temp;\n\n            ++l;\n            --h;\n         }\n      }\n\n      return h;\n   }\n\n   public static void quicksort(int [] numbers, int i, int k) {\n      int j;\n\n      /* Base case: If there are 1 or zero entries to sort,\n       partition is already sorted */\n      if (i &gt;= k) {\n         return;\n      }\n\n      /* Partition the data within the array. Value j returned\n         from partitioning is location of last item in low partition. */\n      j = partition(numbers, i, k);\n\n      /* Recursively sort low partition (i to j) and\n         high partition (j + 1 to k) */\n      quicksort(numbers, i, j);\n      quicksort(numbers, j + 1, k);\n   }\n\n   public static void main(String [] args) {\n      int [] numbers = {10, 2, 78, 4, 45, 32, 7, 11};\n      int i;\n\n      System.out.print(\"UNSORTED: \");\n      for (i = 0; i &lt; numbers.length; ++i) {\n         System.out.print(numbers[i] + \" \");\n      }\n      System.out.println();\n\n      /* Initial call to quicksort */\n      quicksort(numbers, 0, numbers.length - 1);\n\n      System.out.print(\"SORTED: \");\n      for (i = 0; i &lt; numbers.length; ++i) {\n         System.out.print(numbers[i] + \" \");\n      }\n      System.out.println();\n   }\n}\n</code></pre> Output:  <pre><code>UNSORTED: 10 2 78 4 45 32 7 11 \nSORTED: 2 4 7 10 11 32 45 78\n</code></pre></p>"},{"location":"WGU_Notes/D287_Java_Frameworks/Searching_and_Algorithms/Search_and_Algo/#merge-sort","title":"Merge Sort","text":"<ul> <li>Merge sort is a sorting algorithm that divides a list into two halves, recursively sorts each half, and then merges the sorted halves to produce a sorted list. The recursive partitioning continues until a list of 1 element is reached, as list of 1 element is already sorted.</li> <li>The merge sort algorithm uses three index variables to keep track of the elements to sort for each recursive method call. The index variable i is the index of first element in the list, and the index variable k is the index of the last element. The index variable j is used to divide the list into two halves. Elements from i to j are in the left half, and elements from j + 1 to k are in the right half.  </li> <li>Runtime is O(N log N)<ul> <li>Merge sort divides the input in half until a list of 1 element is reached, which requires log N partitioning levels. At each level, the algorithm does about N comparisons selecting and copying elements from the left and right partitions, yielding N * log N comparisons.  </li> </ul> </li> </ul> <p><pre><code>public class MergeSort {\n   public static void merge(int [] numbers, int i, int j, int k) {\n      int mergedSize = k - i + 1;       // Size of merged partition\n      int mergedNumbers [] = new int[mergedSize]; // Temporary array for merged numbers\n      int mergePos;                     // Position to insert merged number\n      int leftPos;                      // Position of elements in left partition\n      int rightPos;                     // Position of elements in right partition\n\n      mergePos = 0;\n      leftPos = i;                      // Initialize left partition position\n      rightPos = j + 1;                 // Initialize right partition position\n\n      // Add smallest element from left or right partition to merged numbers\n      while (leftPos &lt;= j &amp;&amp; rightPos &lt;= k) {\n         if (numbers[leftPos] &lt; numbers[rightPos]) {\n            mergedNumbers[mergePos] = numbers[leftPos];\n            ++leftPos;\n         } \n         else {\n            mergedNumbers[mergePos] = numbers[rightPos];\n            ++rightPos;\n         }\n         ++mergePos;\n      }\n\n      // If left partition is not empty, add remaining elements to merged numbers\n      while (leftPos &lt;= j) {\n         mergedNumbers[mergePos] = numbers[leftPos];\n         ++leftPos;\n         ++mergePos;\n      }\n\n      // If right partition is not empty, add remaining elements to merged numbers\n      while (rightPos &lt;= k) {\n         mergedNumbers[mergePos] = numbers[rightPos];\n         ++rightPos;\n         ++mergePos;\n      }\n\n      // Copy merge number back to numbers\n      for (mergePos = 0; mergePos &lt; mergedSize; ++mergePos) {\n         numbers[i + mergePos] = mergedNumbers[mergePos];\n      }\n   }\n\n   public static void mergeSort(int [] numbers, int i, int k) {\n      int j;\n\n      if (i &lt; k) {\n         j = (i + k) / 2;  // Find the midpoint in the partition\n\n         // Recursively sort left and right partitions\n         mergeSort(numbers, i, j);\n         mergeSort(numbers, j + 1, k);\n\n         // Merge left and right partition in sorted order\n         merge(numbers, i, j, k);\n      }\n   }\n\n   public static void main(String [] args) {\n      int [] numbers = {10, 2, 78, 4, 45, 32, 7, 11};\n      int i;\n\n      System.out.print(\"UNSORTED: \");\n      for (i = 0; i &lt; numbers.length; ++i) {\n         System.out.print(numbers[i] + \" \");\n      }\n      System.out.println();\n\n      /* initial call to merge sort with index */\n      mergeSort(numbers, 0, numbers.length - 1);\n\n      System.out.print(\"SORTED: \");\n      for (i = 0; i &lt; numbers.length; ++i) {\n         System.out.print(numbers[i] + \" \");\n      }\n      System.out.println();\n   }\n}\n</code></pre> Output: <pre><code>UNSORTED: 10 2 78 4 45 32 7 11 \nSORTED: 2 4 7 10 11 32 45 78\n</code></pre></p>"},{"location":"WGU_Notes/D287_Java_Frameworks/Unit_Testing/Unit_Testing/","title":"Unit Testing","text":"<ul> <li>Test Bench, Test Harness is a separate program created just to check method returns  </li> <li>Test Vector - unique input values   </li> <li>Border Cases - represent fringe scenarios  </li> <li>Regression Testing - retesting after a change was made  </li> </ul> <p>Sample Test Harness: <pre><code>public class HrMinToMinTestHarness {\n   public static int hrMinToMin(int origHours, int origMinutes) {\n      int totMinutes;     // Resulting minutes\n\n      totMinutes = (origHours * 60) + origMinutes;\n\n      return origMinutes;\n   }\n\n   public static void main(String[] args) {\n      System.out.println(\"Testing started\");\n\n      System.out.println(\"0:0, expecting 0, got \" + hrMinToMin(0, 0));\n      System.out.println(\"0:1, expecting 1, got \" + hrMinToMin(0, 1));\n      System.out.println(\"0:99, expecting 99, got \" + hrMinToMin(0, 99));\n      System.out.println(\"1:0, expecting 60, got \" + hrMinToMin(1, 0));\n      System.out.println(\"5:0, expecting 300, got \" + hrMinToMin(5, 0));\n      System.out.println(\"2:30, expecting 150, got \" + hrMinToMin(2, 30));\n      // Many more test vectors would be typical...\n\n      System.out.println(\"Testing completed\");\n   }\n}\n</code></pre></p>"},{"location":"WGU_Notes/D288_Backend_Programming/D288_Backend_Programming/","title":"D288 Backend Programming","text":""},{"location":"WGU_Notes/D288_Backend_Programming/D288_Backend_Programming/#unit-testing","title":"Unit Testing","text":"<p>1) Explain what unit testing is.  </p> <p>Testing the lowest level compoenents of an application.  Unit and Integration testing.  Can perform performance testing. Can perform functional testing. Final step is User Acceptance Testing.  </p> <p>2) Differentiate between black box and glass box testing.  </p> <p>Black box testing tests only the functionality of a particular component without knowing anything about how the component is implemented. Glass box or white box, testing does take the implementation of a component into acount. The tests are designed so that each code path through teh compoenent is ecercised.  </p> <p>3) Differentiate between stateful and stateless components.  </p> <p>Stateless: code that has no state, causes no side effects.  IF you put the same inputs into this code, it will always produce the same result.  </p> <p>Stateful: identical inputs might be different depending on what happened previously.   </p> <p>Stateful code may need to be tested in a specific order, while stateless code can be tested in any order.  </p> <p>4) Describe test-driven development. Trace the process of Red/Green/Refactor. </p> <p>Test-Driven Developement: unit tests for a component are written before the componenet is implemented. All tests start out failing.  - Known as Red/Green/Refactor. All tests start red, turn green, then the developer is free to refactor the code to make it more concise or efficient.  </p> <p>5) n/a 6) Explain the usage of test stubs.</p> <p>Test stubs allow us to simulate some components of the system to make the testing of other components easier. For example, when testing the business logic in our Service Layer, we will stub out both the ClassRosterDao and the ClassRosterAuditDao components. It is not necessary for the DAOs to actually read from and write to files when testing the Service Layer so we'll replace the File Implementations with Stub Implementations containing canned data.</p> <p>7) Use JUnit to create, run, and document unit tests. 8) Explain how the arrange, act, assert approach to unit testing works.</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/","title":"Ethics in Technology","text":"<p>Online staffing websites such as 99 Designs, Freelancer, Guru, Toptal, Witmart</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#module-1","title":"Module 1","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#topics","title":"Topics","text":"<ul> <li>What is ethics?</li> <li>What trends have increased the likelihood of unethical behavior?</li> <li>What is corporate social responsibility, and why is fostering good business ethics important?</li> <li>What measures can organizations take to improve their business ethics?</li> <li>How can you include ethical considerations in your decision-making?</li> <li>What trends have increased the risk that information technology will be used in an unethical manner?  </li> </ul> <p>Sections 1.1-1.7 in Computing and Technology Ethics: Engaging Through Science Fiction.  </p> <p>Ethical Statements are in two varieties: - Normative: one provides an assessment of how things should be rather than  how they are.      - \"he was wrong to do that\"      - \"being kind is more important than being the most successful\"     - What is good and bad - Descriptive: furnishing the decision maker with a critical framework that  enables you to understand what is happening in a given situation and what is at  stake in any action you might take.  </p> <p>Participatory Design:  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#kinds-of-ethics-problems","title":"Kinds of Ethics problems","text":"<ul> <li>Limited Resources: who do you give a donated kidney to?  </li> <li>Competing kinds of goods: Which school to attend?  </li> <li>Different ideas about what is good:  </li> </ul>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#ethics-vs-morals","title":"Ethics vs Morals","text":"<p>It is a dispute; are ethics a subset of morals or morals a subset of ethics. The two definitions are similar.  </p> <p>Morals: person's standards of behavior or beliefs concerning what is and is not  acceptable for them to do. Morals are the personal principles that determine what  an individual considers to be right or wrong</p> <p>Ethics: thoughtful reflection on and application of our standards of behavior  and beliefs about what is acceptable to do and not to do. Ethics is a code of behavior  defined by a group an individual belongs to. </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#invisibility-factor","title":"Invisibility factor","text":"<p>James Moor presented the potential dangers of an invisibility factor with technology: - Invisible abuse: lower-level operations of a computer to invisibly exploit the  user who is, for example, transferring money - Invisible programming values: decision-making algorithms that may ensure that  different people are invisibley advantaged or disadvantaged by the use of an  algorithm. - Invisible complex calculations: no human is able to inspect code and understand  completely.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#societal-reconfigurations-from-computer-technologies","title":"Societal Reconfigurations from computer technologies","text":"<p>Deborah Johnson (1998) published an arguement for three changes:  </p> <ul> <li> <p>Reproducibility:   </p> </li> <li> <p>Information flow: easier many-to-many communication  </p> </li> <li> <p>Identity conditions: Loss of anonymity or there is anonymity. Data tracks  you on the internet.  </p> </li> </ul>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#fantasy-for-moral-imagination","title":"Fantasy for moral imagination","text":"<p>Story frames: highlights important topics, themes, or events of the story  that one should read critically.  </p> <p>Story points: </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#professional-ethics","title":"Professional Ethics","text":"<p>Two societies promote the ethics in computer technology: AMC IEEE National Academy of Engineering   </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#ethical-frameworks","title":"Ethical frameworks","text":"<p>Ethical frameworks: important features of some ethical theories  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#section-2-module-1-review","title":"Section 2 Module 1 Review","text":"<ul> <li>Property deals directly with information ownership  </li> <li>Privacy deals with revelaing information about an individual  </li> <li>Access deals with restricting the ability to access information.  </li> <li>Accuracy deals with the reliability, authenticity, and integrity of the information.  </li> </ul>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#introduction-to-etical-frameworks-section2-module-2","title":"Introduction to Etical Frameworks, Section2 Module 2","text":"<ul> <li>What are ethical frameworks?</li> <li>How do ethical frameworks help us navigate complex problems?</li> <li>How would the different frameworks discussed in the text respond to a specific ethical problem?</li> <li>What are some of the problems with each of the ethical frameworks presented in the text?</li> </ul> <p>Chapter 2 Computing and Technology Ethics: Engaging Through Science Fiction.  </p> <p>Frameworks discussed: - deontology: moral obligation and perscribes or describes moral principles that govern  action.   - virtue ethics: center on human character as the locus of moral activity and pays  special attention to how we develop and exercise good qualities.   - communitarianism: interdependent nature of human life and examines how that  interdependence shapes our possibilities for well-being and self-realization. - unitarianism: prioritizes the greatest happiness for the greatest number of people and therfore focuses on the outcome of actions.  </p> <p>Traditions: interpret core principles differently, different approaches to applying  methods of the framework that they belong to.  </p> <p>Metaphysics: our understanding of how the world works and the nature of reality, including  what human beings are and are for.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#dentology","title":"Dentology","text":"<p>Dentology: focuses on duties, rights, and moral obligations. Rightness or  wrongness of actions. Determined by: - Social Contracts - A God or gods - Human reasoning  </p> <p>Obligation: also called positive laws. A part of dentology where you should  do and that require active effort on the part of the agent.  </p> <p>Prohibitions: also called negative laws. A part of dentology, prohibits (forbids) certain kinds of actions. They are obeyed by refraining from acting in a way that  has been described as wrong.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#political-authority","title":"Political Authority","text":"<p>Contractarianism: example of political authority.  Presumes humans are driven  by self-interest.  It is decided which self-interests are all common among the  people, and sign a contract. It is better to cooperate than constantly be at odds  with eachother. Grew from social contract theory, Thomas Hobbes  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#divine-authority","title":"Divine Authority","text":"<p>Divine command theory: derives authority from God.  </p> <p>The Ten Commandments is an example containing obligations and prohibitions.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#authority-of-human-reasoning","title":"Authority of Human Reasoning","text":"<p>Enlightenment  </p> <p>St.Thomas Aquinas  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#kantian-deontology","title":"Kantian Deontology","text":"<p>Developed as a response to a growing trend in religious authority.  Rejects  the idea that any code of law handed down in a religious tradition or promulgated by  the state can successfully address the full breadth and complexity of right  and wrong.  </p> <p>Assumptions: - All human beings are free and rational  - They are familiar with both the experience of being moved by the feeling of  duty or moral obligation. </p> <p>Categorical imperative: a law that is unconditionally and universally valid.  True freedom is the freedom to act according to a law that you can both apply to  yoursefl and universally legislate for all.  </p> <p>An action has no moral worth if it is not done out of duty.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#modalities-for-judgement","title":"Modalities for Judgement","text":"<ul> <li>How fundamental is it?  <ul> <li>Do you choose to protect a stranger or a child, because you have a fundamental role as a parent?  </li> </ul> </li> <li>How relevant is it?  <ul> <li>Do what is Right over what is Good  </li> </ul> </li> </ul> <p>Machine Ethics - Part of these ethics include training AI     - bottom-up approach: machines are given examples of proper behavior and      attempt to abstract from those what to do in situations.     - top-down approach: agents are given a set of rules and are expected to      incorporate the rules in the actions they take.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#virtue-ethics","title":"Virtue Ethics","text":"<p>Virtue ethics is organized around the idea of human flourishing and human excellence.  All humans share some basic qualities of character, some excell at those characters  better than others based on experience. Humans are concerned with how to live  the good life.  </p> <p>Virtue ethics focuses on the whole person: the qualities of character that they have  and the patterns of living that issue from and reveal those qualities. habitus is the pattern. Interlocking set of habits that are what feels right or natural for a person.   Virtues is cultivating excellence in a range of basic humand capacities. - Nobody is bor virtuous.  - It takes continual practice. - It is goal-driven, for the creation of good outcomes - We all start out with the same tool set of virtues. It is up to us to develop  the virtues.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#confucian-virtue-ethics","title":"Confucian Virtue Ethics","text":"<p>His quotes were written in the Analects. Other writtings about him include  Mencius and Dctrine of the Mean.  </p> <p>Hundred Schools of Thought </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#aristotelian-virtue-ethics","title":"Aristotelian Virtue Ethics","text":"<p>Aristotle's Nicomachean Ethics </p> <p>What things a person needs to do in order to achieve deep happiness and satisfaction  with life, to flourish.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#appetite-desire-virtue","title":"Appetite, Desire, Virtue","text":"<p>Basic human appetites include, hunger, fear, and emotional or psychological desires.  The fact that these appetites and desires are a basic part of human nature means  that they are fundamentally good for humans, and necessary for humans to flourish.  Suppressing these appetites entirely is jas as damaging to a person as allowing them to  expand out of control. Virtue places value on learning to regulate appetites and desires, exercise moderation.  </p> <p>Continence: the forcible restraint of one's own appetite or desire. It is not  a virtue because it requires us to suppress our desires and appetites.  </p> <p>Temperance: training yourself to do what is right. Wholeheartedness: temperance in the terms of Confucius. One does not feel  internal resistance or conflict but is genuinely and joyfully committed to a  course of action.    </p> <p>Virtue is a spectrum, not binary.  </p> <p>Practical Wisdom: ability to judge what the best action would be in any given  situation.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#communitarianism","title":"Communitarianism","text":"<p>Communitarianism is an approach to ethics organized around self-realization in  the context of interdependence.  Its basic assumption is that human  beings exist in a state of mutual reliance on one another.   </p> <p>Communities existed prior to any individual born and raised within them.  </p> <p>sympathetic awareness of others.  </p> <p>Ubuntu: comes from a family of Bantu languages.  Refers to a crucial  quality that is central to communitarianism of southern and eastern Africa. Another  general definition is to engage in the process of becoming and being human.  </p> <p>Yoruba: Based in now Nigeria. Hearing is the foundation for how we percieve the world.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#utilitarianism","title":"Utilitarianism","text":"<p>Utilitarianism is an approach to ethics organized around the idea of happiness.  Humans are motivated to be happy. Which acts bring joy to the most amount of people. </p> <p>Principle of utility or greatest happiness principle: Decide on the actions that bring happiness to the most amount of people.  </p> <p>John Stuart Mill and Jeremy Bentham, proponent of utilitarianism  </p> <p>Form of consequentialism, consequences determine the moral worth of an action.  </p> <p>No one person's happiness is more valuable than anothers.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#contemporary-ethics","title":"Contemporary Ethics","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#responsibility-ethics","title":"Responsibility Ethics","text":"<p>Started by Hans Jonas.  </p> <p>Responsiblity Ethics looks at cause and effect on a larger scale of environment  and economy.  </p> <ul> <li>Accountability to all life  <ul> <li>Responsibility for our actions  </li> <li>Responsibility to living beings and environment  </li> </ul> </li> <li>Heuristics of fear  </li> </ul>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#feminist-ethics","title":"Feminist Ethics","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#the-capability-approach","title":"The Capability Approach","text":"<p>Capability Ethics: create conditions for people to fulfill thier potential. Pay  attention to the freedoms, resources, and opportunities available to an individual.  </p> <p>Introduced by Amartya Sen. It was an argument that countries were focused on  economic growth at the expense of human well-being.  </p> <p>Further developled by Martha Nussbaum.  </p> <p>Creating the potential for good outcomes.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#ch-1-etext","title":"Ch 1 eText","text":"<p>Ethics in Information Technology  </p> <p>Ethics: is a code of behavior that is defined by the group to which an individual  belongs. Ethical behavior conforms to generally accepted norms, which may change  over time.  </p> <p>Morals are the personal principles upon which an individual bases his or her  decisions about what is right and what is wrong. They are core beliefs formed  and adhered to by an individual.  </p> <p>A virtue is a habit that inclines people to do what is acceptable</p> <p>A vice is a habit of unacceptable behavior.  </p> <p>A person who acts with integrity acts in accordance with a personal code of  principles. One approach to acting with integrity is to extend to all people  the same respect and consideration that you expect to receive from them.  </p> <p>Law is a system of rules that tells us what we can and cannot do. Laws are enforced  by a set of institutions (the police, courts, law-making bodies). Violation of  a law can result in censure, fines, and/or imprisonment.  </p> <p>generally accepted accounting practices (GAAP)  </p> <p>The moral corruption of people in power, which is often facilitated by a tendency  for people to look the other way when their leaders act inappropriately has been  given the name Bathsheba syndrome\u2014a reference to the biblical story of King  David, who became corrupted by his power and success.  </p> <p>Corporate social responsibility (CSR) is the concept that an organization should  act ethically by taking responsibility for the impact of its actions on its  shareholders, consumers, employees, community, environment, and suppliers.  </p> <p>Supply chain sustainability is a component of CSR that focuses on developing  and maintaining a supply chain that meets the needs of the present without  compromising the ability of future generations to meet their needs.  </p> <p>Why a business should pursue CSR: - Gaining the goodwill of the community - Creating an organization that operates consistently - Fostering good business practices - Protecting the organization and its employees from legal action - Avoiding unfavorable publicity  </p> <p>A stakeholder is someone who stands to gain or lose, depending on how a particular  situation is resolved.  </p> <p>Appoint a Corporate Ethics Officer  </p> <p>A corporate ethics officer (also called a corporate compliance officer)  provides an organization with vision and leadership in the area of business  conduct. This individual \u201caligns the practices of a workplace with the stated  ethics and beliefs of that workplace, holding people accountable to ethical  standards.\u201d Responsibilities:</p> <ul> <li>Responsibility for compliance\u2014that is, ensuring that ethical procedures are put into place and consistently adhered to throughout the organization</li> <li>Responsibility for creating and maintaining the ethics culture envisioned by the highest level of corporate authority</li> <li>Responsibility for being a key knowledge and contact person on issues relating to corporate ethics and principles</li> </ul> <p>Require the Board of Directors to Set and Model High Ethical Standards  </p> <p>Establish a Corporate Code of Ethics  </p> <p>A code of ethics is a statement that highlights an organization\u2019s key  ethical issues and identifies the overarching values and principles that are  important to the organization and its decision making.</p> <p>Conduct Social Audits  </p> <p>An increasing number of organizations conduct regular social audits of their  policies and practices. In a social audit, an organization reviews how well it  is meeting its ethical and social responsibility goals and communicates its new  goals for the upcoming year.  </p> <p>Require employees to take Ethics training  </p> <p>Include Ethical Criteria in Employee Appraisals  </p> <p>Create an Ethical Work Environment  </p> <p>Include Ethical Considerations in Decision Making  </p> <p> </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#section-2-module-2-review","title":"Section 2, Module 2 Review","text":"<p>Francis, a software engineer for a database management company, discovers a security flaw in an upcoming release. A colleague encourages Francis to keep this discovery quiet, as it may affect a tight release window. Francis disagrees, citing their duty to abide by a code of conduct. Which theory best exemplifies Francis\u2019 reasoning? Deontology </p> <p>A car manufacturer decides to alter its emission testing to pass regulatory requirements. The emission reduction system is only used during tests. The system is not engaged during normal driving conditions to improve fuel efficiency, torque, and acceleration. Which step in the ethical decision-making process should have been used to evaluate the environmental impact of this decision? Choose Alternatives </p> <p>A computer animator for a children\u2019s show is reviewing the draft of script. In the script, the main character engages in behavior that seems to encourage dishonesty. The animator expresses a concern to the director, citing the need to help improve the moral character of all viewers. Which theory best exemplifies the animator\u2019s reasoning? Virtue Ethics </p> <p>A manager for a cybersecurity company is preparing an employee for an upcoming sales trip. During the preparation, the manager advises the employee to use their company card to host expensive dinners and entertainment events for potential clients. When the employee expresses concern about whether this approach aligns with their personal values, the manager responds that fostering strong relationships and integrating into the local business community is essential, and such practices are often seen as a way to build trust and rapport within those communities. Which theory best exemplifies the manager\u2019s reasoning? Communitarianism </p> <p>Nadia is a park ranger who maintains a set number of visitors per hour to a specific attraction in a small regional park. When the attraction is at capacity, she often must turn visitors away. While Nadia acknowledges that her actions do disrupt some people, she justifies it by stating that it is for the greater good. Which theory best exemplifies Nadia\u2019s reasoning? Utilitarianism </p> <p>Deron breaks his roommate's video game controller in a fit of rage. To avoid making his roommate angry with him, Deron claims the dog knocked it out of his hands and down some stairs. What best describes Deron\u2019s actions? unethical/legal </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#professional-ethics-section-2-module-3","title":"Professional Ethics, Section 2, Module 3","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#chapter-6-computing-and-technology-ethics-engaging-through-science-fiction","title":"Chapter 6, Computing and Technology Ethics: Engaging Through Science Fiction.","text":"<p>Professional ethics: the day-to-day expectations of the individual worker.</p> <p>Profession is (Greenwood): - core body of ethical knowledge     - deep specialized knowledge of professionals give them authority     - non-professionals are customers, customers have clients - profession is given special and often unique privileges by the community (like a license) - professions regulate themselves with code of ethics - profession is its own culture </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#code-of-ethics","title":"Code of Ethics","text":"<p>ACM: Association for Computing Machinery IEEE: Institute of Electronics and Electrical Engineering  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#prioritize-public-good","title":"Prioritize public good","text":"<p>ACM 1.1: \u201cContribute to society and to human well-being, acknowledging that all people are stakeholders in computing.\u201d IEEE 1: \u201cTo hold paramount the safety, health, and welfare of the public, to strive to comply with ethical design and sustainable development practices.\u201d SECEPP 1.02: \u201cModerate the interests of the software engineer, the employer, the client and the users with the public good.\u201d</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#avoidance-of-harm-and-disclosing-risks-thereof","title":"Avoidance of harm and disclosing risks thereof","text":"<p>ACM 1.2: \u201cAvoid harm.\u201d IEEE 1: \u201cTo disclose promptly factors that might endanger the public or the environment.\u201d SECEPP 1.03: \u201cApprove software only if they have a well-founded belief that it is safe, meets specifications, passes appropriate tests, and does not diminish quality of life, diminish privacy or harm the environment. The ultimate effect of the work should be to the public good.\u201d SECEPP 1.04: \u201cDisclose to appropriate persons or authorities any actual or potential danger to the user, the public, or the environment, that they reasonably believe to be associated with software or related documents.\u201d</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#honesty","title":"Honesty","text":"<p>ACM 1.3: \u201cBe honest and trustworthy.\u201d IEEE 4: \u201cTo reject bribery in all its forms.\u201d SECEPP 1.06: \u201cBe fair and avoid deception in all statements, particularly public ones, concerning software or related documents, methods and tools.\u201d SECEPP 4.04: \u201cNot engage in deceptive financial practices such as bribery, double billing, or other improper financial practices.\u201d</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#accurate-assessment","title":"Accurate Assessment","text":"<p>ACM 2.5: \u201cGive comprehensive and thorough evaluations of computer systems and their impacts, including analysis of possible risks.\u201d IEEE 3: \u201cTo be honest and realistic in stating claims or estimates based on available data.\u201d SECEPP 6.07: \u201cBe accurate in stating the characteristics of software on which they work, avoiding not only false claims but also claims that might reasonably be supposed to be speculative, vacuous, deceptive, misleading, or doubtful.\u201d</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#avoidance-or-disclosure-of-conflicts-of-interest","title":"Avoidance or disclosure of conflicts of interest.","text":"<p>ACM 1.3 elaboration: \u201cComputing professionals should be forthright about any circumstances that might lead to either real or perceived conflicts of interest or otherwise tend to undermine the independence of their judgment.\u201d IEEE 2: \u201cTo avoid real or perceived conflicts of interest whenever possible, and to disclose them to affected parties when they do exist.\u201d SECEPP 4.06: \u201cRefuse to participate, as members or advisors, in a private, governmental or professional body concerned with software related issues, in which they, their employers or their clients have undisclosed potential conflicts of interest.\u201d</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#nondiscriminatory-treatment","title":"Nondiscriminatory treatment","text":"<p>ACM 1.4: \u201cBe fair and take action not to discriminate.\u201d IEEE 8: \u201cTo treat fairly all persons and to not engage in acts of discrimination based on race, religion, gender, disability, age, national origin, sexual orientation, gender identity, or gender expression.\u201d SECEPP 8.07: \u201cNot give unfair treatment to anyone because of any irrelevant prejudices.\u201d</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#educate-the-public","title":"Educate the public","text":"<p>ACM 2.7: \u201cFoster public awareness and understanding of computing, related technologies, and their consequences.\u201d IEEE 5: \u201cTo improve the understanding by individuals and society of the capabilities and societal implications of conventional and emerging technologies, including intelligent systems.\u201d SECEPP 1.08: \u201cBe encouraged to volunteer professional skills to good causes and contribute to public education concerning the discipline.\u201d</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#working-only-in-areas-of-competence","title":"Working only in areas of competence","text":"<p>ACM 2.6: \u201cPerform work only in areas of competence.\u201d IEEE 6: \u201cTo undertake technological tasks for others only if qualified by training or experience, or after full disclosure of pertinent limitations.\u201d SECEPP 2.01: \u201cProvide service in their areas of competence, being honest and forthright about any limitations of their experience and education.\u201d</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#give-credit-and-respect-for-intellectual-property","title":"Give credit and respect for intellectual property","text":"<p>ACM 1.5: \u201cRespect the work required to produce new ideas, inventions, creative works, and computing artifacts.\u201d IEEE 7: \u201cTo credit properly the contributions of others.\u201d SECEPP 2.02: \u201cNot knowingly use software that is obtained or retained either illegally or unethically.\u201d SECEPP 7.03: \u201cCredit fully the work of others and refrain from taking undue credit.\u201d</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#professional-developement","title":"Professional developement","text":"<p>ACM 2.2: \u201cMaintain high standards of professional competence, conduct, and ethical practice.\u201d ACM 3.5: \u201cCreate opportunities for members of the organization or group to grow as professionals.\u201d IEEE 6: \u201cTo maintain and improve our technical competence.\u201d IEEE 10: \u201cTo assist colleagues and coworkers in their professional development and to support them in following this code of ethics.\u201d SECEPP 7.02: \u201cAssist colleagues in professional development.\u201d SECEPP 8.01: \u201cFurther their knowledge of developments in the analysis, specification, design, development, maintenance and testing of software and related documents, together with the management of the development process.\u201d SECEPP 8.06: \u201cImprove their knowledge of this Code, its interpretation, and its application to their work.\u201d</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#accepting-and-giving-review","title":"Accepting and giving review","text":"<p>ACM 2.4: \u201cAccept and provide appropriate professional review.\u201d IEEE 7: \u201cTo seek, accept, and offer honest criticism of technical work, to acknowledge and correct errors.\u201d</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#workplace-condifentiality","title":"Workplace Condifentiality","text":"<p>ACM 1.7 elaboration: \u201cComputing professionals should protect confidentiality except in cases where [the information] is evidence of the violation of law, of organizational regulations, or of the Code. In these cases, the nature or contents of that information should not be disclosed except to appropriate authorities.\u201d SECEPP 2.05: \u201cKeep private any confidential information gained in their professional work, where such confidentiality is consistent with the public interest and consistent with the law.\u201d</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#equitable-design-ada-and-equal-opportunity","title":"Equitable design (ADA and equal opportunity)","text":"<p>ACM 1.4 elaboration: \u201cTechnologies and practices should be as inclusive and accessible as possible and computing professionals should take action to avoid creating systems or technologies that disenfranchise or oppress people.\u201d SECEPP 1.07: \u201cConsider issues of physical disabilities, allocation of resources, economic disadvantage and other factors that can diminish access to the benefits of software.\u201d</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#privacy-protected-design","title":"Privacy-protected design","text":"<p>ACM 1.6: \u201cRespect privacy.\u201d SECEPP 3.12: \u201cWork to develop software and related documents that respect the privacy of those who will be affected by that software.\u201d</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#professional-guidelines-for-algorithms-bias-transparency-accountability","title":"Professional guidelines for Algorithms: Bias, Transparency, Accountability","text":"<ol> <li>Awareness: Owners, designers, builders, users, and other stakeholders of analytic systems should be aware of the possible biases involved in their design, implementation, and use and the potential harm that biases can cause to individuals and society.</li> <li>Access and redress: Regulators should encourage the adoption of mechanisms that enable questioning and redress for individuals and groups that are adversely affected by algorithmically informed decisions.</li> <li>Accountability: Institutions should be held responsible for decisions made by the algorithms that they use, even if it is not feasible to explain in detail how the algorithms produce their results.</li> <li>Explanation: Systems and institutions that use algorithmic decision-making are encouraged to produce explanations regarding both the procedures followed by the algorithm and the specific decisions that are made. This is particularly important in public policy contexts.</li> <li>Data Provenance: A description of the way in which the training data was collected should be maintained by the builders of the algorithms, accompanied by an exploration of the potential biases induced by the human or algorithmic data-gathering process. Public scrutiny of the data provides maximum opportunity for corrections. However, concerns over privacy, protecting trade secrets, or revelation of analytics that might allow malicious actors to game the system can justify restricting access to qualified and authorized individuals.</li> <li>Auditability: Models, algorithms, data, and decisions should be recorded so that they can be audited in cases where harm is suspected.</li> <li>Validation and Testing: Institutions should use rigorous methods to validate their models and document those methods and results. In particular, they should routinely perform tests to assess and determine whether the model generates discriminatory harm. Institutions are encouraged to make the results of such tests public.</li> </ol>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#functions-of-the-using-codes-of-ethics","title":"Functions of the using Codes of Ethics","text":"<p>Two types of professional ethics: - rules and guidelines that govern behavior and are aimed at preventing cases of professional misconduct - Aimed at positive, or aspirational ethics, aimed at using tech for the betterment of humankind  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#suggestions-on-making-ethical-decsions-in-practice","title":"Suggestions on Making ethical decsions in practice","text":"<p>Within the framework of utilitarianism, Harris et al. (2013) outline three possible approaches for solving moral disagreements:</p> <ul> <li>The cost-benefit analysis approach, where one attempts to quantify all the various costs and benefits to all the relevant parties to a decision.</li> <li>The act-utilitarian approach, where one tries to determine for each possible action what the benefits and consequences of each are and selects the one that brings about the greatest good.</li> <li>The rule-utilitarian approach, where one works to find rules that are justified by their utility.</li> </ul> <p>These methods lead to a set of approaches that bear a close resemblance to the  deontological and virtue ethics approaches:  </p> <p>The golden rule approach, which enjoins one to think about what would happen if others acted as we are considering. The self-defeating approach, which is a version of negative universalization that asks the question: if everyone were to act this way, would it invalidate the action or the usefulness of that action? And finally the rights approach, which starts from the position that all persons have a set of rights (e.g., life, physical integrity, and the right not to be deceived or cheated), and that actions should not infringe on these rights. Hence in order to make a decision, one should list the rights that are relevant and then choose an action that does not impinge this set of rights.</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#ethics-in-information-tech-pg-57-61","title":"Ethics in Information Tech, pg 57-61","text":"<p>A professional code of ethics states the principles and core values that are essential to the work of a particular occupational group. Practitioners in many professions subscribe to a code of ethics that governs their behavior.</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#generic-code-of-ethics","title":"Generic code of ethics:","text":"<ul> <li>Ethical decision making: Adherence to a professional code of ethics means that practitioners use a common set of core values and beliefs as a guideline for ethical decision making.  </li> <li>High standards of practice and ethical behavior: Adherence to a code of ethics reminds professionals of the responsibilities and duties that they may be tempted to compromise to meet the pressures of day-to-day business.   </li> <li>Trust and respect from the general public  </li> <li>Evaluation benchmark: A code of ethics provides an evaluation benchmark that a professional can use as a means of self-assessment. Peers of the professional can also use the code for recognition or censure.  </li> </ul> <p>A software engineer is defined as one who applies engineering principles and practices to the design, development, implementation, testing, and maintenance of software.  </p> <p>ACM and IEEE Software engineer code of ethics: Public - Software engineers shall act consistently with the public interest.</p> <ul> <li>Client and Employer - Software engineers shall act in a manner that is in the best interests of their client and employer consistent with the public interest.</li> <li>Product - Software engineers shall ensure that their products and related modifications meet the highest professional standards possible.</li> <li>Judgment - Software engineers shall maintain integrity and independence in their professional judgment.</li> <li>Management - Software engineering managers and leaders shall subscribe to and promote an ethical approach to the management of software development and maintenance.</li> <li>Profession - Software engineers shall advance the integrity and reputation of the profession consistent with the public interest.</li> <li>Colleagues - Software engineers shall be fair to and supportive of their colleagues.</li> <li>Self - Software engineers shall participate in lifelong learning regarding the practice of their profession and shall promote an ethical approach to the practice of the profession.</li> </ul> <p>Source: Software Engineering Code of Ethics and Professional Practice. \u00a9 acm.org, 2015. http://www.acm.org/about/se-code</p> <p>Negligence is defined as not doing something that a reasonable person would do or doing something that a reasonable person would not do.</p> <p>Duty of care refers to the obligation to protect people against any unreasonable harm or risk.</p> <p>The courts decide whether parties owe a duty of care by applying a reasonable person standard to evaluate how an objective, careful, and conscientious person would have acted in the same circumstances.</p> <p>Defendants who have particular expertise or competence are measured against a reasonable professional standard. For example, in a medical malpractice suit based on improper treatment of a broken bone, the standard of measure would be higher if the defendant were an orthopedic surgeon rather than a general practitioner.  </p> <p>If a court finds that a defendant actually owed a duty of care, it must then determine whether the duty was breached. A breach of the duty of care is the failure to act as a reasonable person would act. A breach of duty might consist of an action, such as throwing a lit cigarette into a fireworks factory  </p> <p>Professional Malpractice: Professionals who breach the duty of care are liable for injuries that their negligence causes.  </p> <p>What is an objective of a professional code of ethics in IT? Provide benchmarks for self-assessment </p> <p>Organizations like ACM and IEEE help define standards and ethical practices in software engineering.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#cyberattacks-and-cybersecurity-section-2-module-4","title":"Cyberattacks and Cybersecurity, Section 2, module 4","text":"<p>A zero-day exploit is a cyberattack that takes place before the security community and/or software developers become aware of and fix a security vulnerability.  </p> <p>Vulnerability Equities Process (VEP): a policy where the government witholds  known vulnerabilities to venders (zero-day attacks).  </p> <p>Under VEP, the Federal Bureau of Investigation (FBI) found an exception that allowed it to refuse to reveal the vulnerability that enabled it to hack into the iPhone of the San Bernardino shooter who killed 14 people in late 2015.  </p> <p>Tradeoffs when making IT security: - How much effort and money should be spent to safeguard against computer crime? (In other words, how safe is safe enough?) - What should be done if recommended computer security safeguards make conducting business more difficult for customers and employees, resulting in lost sales and increased costs? - If a firm is a victim of a cybercrime, should it pursue prosecution of the criminals at all costs, maintain a low profile to avoid the negative publicity, inform affected customers, or take some other action?  </p> <p>An exploit is an attack on an information system that takes advantage of a particular system vulnerability.</p> <p>Black hat hacker: Someone who violates computer or Internet security maliciously or for illegal personal gain (in contrast to a white hat hacker who is someone who has been hired by an organization to test the security of its information systems)</p> <p>Malicious insider: An employee or contractor who attempts to gain financially and/or disrupt a company\u2019s information systems and business operations  </p> <p>Industrial spy: An individual who captures trade secrets and attempts to gain an unfair competitive advantage  </p> <p>Cybercriminal: Someone who attacks a computer system or network for financial gain  </p> <p>Hacktivist: An individual who hacks computers or websites in an attempt to promote a political ideology</p> <p>Cyberterrorist: Someone who attempts to destroy the infrastructure components of governments, financial institutions, and other corporations, utilities, and emergency response units</p> <p>Ransomware: is malware that stops you from using your computer or accessing your data until you meet certain demands  </p> <p>Virus is a piece of programming code, usually disguised as something else, that causes a computer to behave in an unexpected and usually undesirable manner. For example, a virus may be programmed to display a certain message on an infected computer\u2019s display screen, delete or modify a certain document, or reformat the hard drive.</p> <p>Worm: is a harmful program that resides in the active memory of the computer and duplicates itself. Worms differ from viruses in that they can propagate without human intervention, often sending copies of themselves to other computers by email.</p> <p>Trojan horse is a seemingly harmless program in which malicious code is hidden. A victim on the receiving end of a Trojan horse is usually tricked into opening it because it appears to be useful software from a legitimate source, such as an update for software the user currently has installed on his or her computer. The program\u2019s harmful payload might be designed to enable the hacker to destroy hard drives, corrupt files, control the computer remotely, launch attacks against other computers, steal passwords, or spy on users by recording keystrokes and transmitting them to a server operated by a third party. A Trojan horse often creates a \u201cbackdoor\u201d on a computer that enables an attacker to gain future access to the system and compromise confidential or private information.</p> <p>Another type of Trojan horse is a logic bomb, which executes when it is triggered by a specific event. For example, logic bombs can be triggered by a change in a particular file, by typing a specific series of keystrokes, or at a specific time or date.</p> <p>A blended threat is a sophisticated threat that combines the features of a virus, worm, Trojan horse, and other malicious code into a single payload.</p> <p>The Controlling the Assault of Non-Solicited Pornography and Marketing (CAN-SPAM) Act states that it is legal to spam, provided the messages meet a few basic requirements\u2014spammers cannot disguise their identity by using a false return address, the email must include a label specifying that it is an ad or a solicitation, and the email must include a way for recipients to indicate that they do not want future mass mailings.</p> <p>A partial solution to this problem is the use of CAPTCHA to ensure that only humans obtain free accounts. CAPTCHA (Completely Automated Public Turing Test to Tell Computers and Humans Apart) </p> <p>Distributed denial-of-service (DDoS) attack is one in which a malicious hacker takes over computers via the Internet and causes them to flood a target site with demands for data and other small tasks. - The term botnet is used to describe a large group of such computers, which are controlled from one or more remote locations by hackers, without the knowledge or consent of their owners. - botnet computers are called zombies </p> <p>A rootkit is a set of programs that enables its user to gain administrator-level access to a computer without the end user\u2019s consent or knowledge. Once installed, the attacker can gain full control of the system and even obscure the presence of the rootkit from legitimate system administrators. - Rootkits are one part of a type of blended threat that consists of a dropper, a loader, and a rootkit.  - The dropper code gets the rootkit installation started and can be activated by clicking on a link to a malicious website in an email or opening an infected PDF file. The dropper launches the loader program and then deletes itself.  - The loader loads the rootkit into memory;  - at that point, the computer has been compromised.  </p> <p>An advanced persistent threat (APT) is a network attack in which an intruder gains access to a network and stays there\u2014undetected\u2014with the intention of stealing data over a long period of time (weeks or even months). </p> <p>Steps for APT:  </p> <ol> <li>Reconnaissance\u2014The intruder begins by conducting reconnaissance on the network to gain useful information about the target (security software installed, computing resources connected to the network, number of users).</li> <li>Incursion\u2014The attacker next launches incursions to gain access to the network at a low level to avoid setting off any alarms or suspicion. Some forms of spear phishing may be employed in this phase. After gaining entrance, the attacker establishes a back door, or a means of accessing a computer program that bypasses security mechanisms.</li> <li>Discovery\u2014The intruder now begins a discovery process to gather valid user credentials (especially administrative ones) and move laterally across the network, installing more back doors. These back doors enable the attacker to install bogus utilities for distributing malware that remains hidden in plain sight.</li> <li>Capture\u2014The attacker is now ready to access unprotected or compromised systems and capture information over a long period of time.</li> <li>Export\u2014Captured data are then exported back to the attacker\u2019s home base for analysis and/or used to commit fraud and other crimes.  </li> </ol> <p>phishing is the act of fraudulently using email to try to get the recipient to reveal personal data. </p> <p>Spear phishing is a variation of phishing in which the phisher sends fraudulent emails to a certain organization\u2019s employees.</p> <p>Smishing is another variation of phishing that involves the use of texting. In a smishing scam, people receive a legitimate-looking text message</p> <p>Vishing is similar to smishing except that the victims receive a voice-mail message telling them to call a phone number or access a website  </p> <p>Cyberespionage involves the deployment of malware that secretly steals data in the computer systems of organizations, such as government agencies, military contractors, political organizations, and manufacturing firms. The type of data most frequently targeted includes data that can provide an unfair competitive advantage to the perpetrator. </p> <p>Cyberterrorism is the intimidation of government or civilian population by using information technology to disable critical national infrastructure  </p> <p>The Department of Homeland Security (DHS) is a large federal agency with more than 240,000 employees and a budget of almost $65 billion whose goal is to provide for a \u201csafer, more secure America, which is resilient against terrorism and other potential threats.\u201d The agency was formed in 2002 when 22 different federal departments and agencies were combined into a unified, integrated cabinet agency  </p> <p>The DHS website (www.dhs.gov) provides a link that enables users to report cyber incidents. Incident reports go to the US-CERT Incident Reporting System, which assists analysts at the U.S. Computer Emergency Readiness Team (US-CERT) (a partnership between the DHS and the public and private sectors) in providing timely handling of security incidents as well as in conducting improved analysis of such incidents.  </p> <p>North American Aerospace Defense Command (NORAD)  </p> <p>White hat hackers are hired by an organization to penetration test security systems.</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#federal-laws-for-prosecuting-computer-attacks","title":"Federal Laws for Prosecuting Computer Attacks","text":"<p>Section 814 of the USA Patriot Act defines cyberterrorism as any hacking attempts designed to gain unauthorized access to a protected computer, which, if successful, would cause a person an aggregate loss greater than $5,000; adversely affect someone\u2019s medical examination, diagnosis, or treatment; cause a person to be injured; cause a threat to public health or safety; or cause damage to a governmental computer that is used as a tool to administer justice, national defense, or national security</p> <p>Federal Laws That Address Computer Crime Computer Fraud and Abuse Act (U.S. Code Title 18, Section 1030): Addresses fraud and related activities in association with computers, including the following: - Accessing a computer without authorization or exceeding authorized access - Transmitting a program, code, or command that causes harm to a computer - Trafficking of computer passwords - Threatening to cause damage to a protected computer Fraud and Related Activity in Connection with Access Devices Statute (U.S. Code Title 18, Section 1029): Covers false claims regarding unauthorized use of credit cards Stored Wire and Electronic Communications and Transactional Records Access Statutes (U.S. Code Title 18, Chapter 121): Focuses on unlawful access to stored communications to obtain, alter, or prevent authorized access to a wire or electronic communication while it is in electronic storage USA Patriot Act (Public Law 107-56): Defines cyberterrorism and associated penalties</p> <p>Federal Information Security Management Act: Requires federal agencies to implement comprehensive information security programs to protect government information, operations, and assets against natural or man-made threats.  </p> <p>Gramm-Leach-Bliley Act: Regulates the handling of personal financial information by financial institutions to safeguard consumer privacy and prevent misuse of financial data.</p> <p>Payment Card Industry Data Security Standard: Establishes security requirements for organizations that handle credit card information to protect against data breaches and fraud.  </p> <p>Sarbanes-Oxley Act: Mandates stringent financial reporting and internal controls for publicly traded companies to enhance transparency and prevent corporate fraud.</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#cia","title":"CIA","text":"<p>confidentiality, integrity, availability  </p> <p> </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#section-2-review","title":"Section 2 Review","text":"<p>What is the meaning of morals in the context of ethical judgment? The personal principles that determine what an individual considers to be right or wrong </p> <p>What is the primary goal for a supply chain relating to corporate social responsibility (CSR)? Sustainability </p> <p>Which factor is primarily used by deontology to evaluate morality of human actions? According to deontology, morality is evaluated based on duty, without considering probable outcomes or consequences.</p> <p>Which part of the decision-making process involves defining a transition plan? Implementing the decision </p> <p>Which measure of the confidentiality, integrity, and availability (CIA) triad should be used by IT professionals at the organization level to supply validation of non-repudiation regarding data access in IT? Security Audit an organization-level measure of the CIA triad that supplies validation of non-repudiation regarding data access in IT </p> <ul> <li>Data encryption is an application-level measure of the CIA triad, and it does not supply validation of non-repudiation but instead offers confidentiality assurances.  </li> <li>Intrusion detection is a network-level measure of the CIA triad, and it does not supply validation of non-repudiation but instead offers protection against cyberthreats.  </li> <li>Antivirus software is an end user-level measure of the CIA triad, and it does not supply validation of non-repudiation but instead offers protection against cyberthreats.</li> </ul> <p>An IT professional wants the proper credentials and knowledge that is required to collect data from devices affected by cyberattacks to ensure such data would be admissible as evidence in a court of law. Certified Computer Examiner </p> <p>What are two main elements of a professional code of ethics in IT? Core Values and Common beliefs </p> <p>Which type of guidance is provided by professional codes of ethics within IT? Course of action in cases of conflict of interest  </p> <p>What are two components of the concept of information privacy? Communication privacy and Data privacy </p> <p>Which philosophy is doing what is morally correct instead of following a law? Deontology says to do what is morally correct instead of following a law.  </p> <ul> <li>Altruists assume what is morally correct will help others.  </li> <li>Pluralism beliefs state that there can be multiple good ways to handle situations.  </li> <li>Egoism is people doing what is best for themselves.  </li> </ul> <p>Which type of attack is a common cause of data-level breaches with global scope? *Phishing </p> <ul> <li>SQL injection targets individual websites that use relational databases as their data store, so their scope is limited.  </li> <li>Distributed Denial of Service (DDoS) attacks do not result in data breaches because their purpose is to affect service availability.  </li> <li>By definition, spear phishing is targeted, so it does not have a global scope.  </li> </ul> <p>A software developer publishes an application that can download and play animal videos. Employees of a company can download the application to their company-issued device from a third-party application store. The videos are being watched during business hours despite acceptable use policies that prohibit this. How might Epicurus respond to the question of whether it is ethical to obey or disobey the acceptable use policies? Epicurus would assert that pleasure is the greatest good for human beings, emphasizing the importance of pursuing enjoyment in life. </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#privacy-section-3-module-1","title":"Privacy Section 3, Module 1","text":"<p>the right of privacy is \u201cthe right to be left alone\u2014the most comprehensive of rights, and the right most valued by a free people.\u201d</p> <p>information privacy is the combination of communications privacy (the ability to communicate with others without those communications being monitored by other persons or organizations) and data privacy (the ability to limit access to one\u2019s personal data by other individuals and organizations in order to exercise a substantial degree of control over that data and their use)</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#privacy-laws-applications-and-court-rulings","title":"Privacy Laws, Applications, and Court Rulings","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#financial-data","title":"Financial Data","text":"<p>The Fair Credit Reporting Act (15 U.S.C. \u00a7 1681) (1970) regulates the operations of credit reporting bureaus, including how they collect, store, and use credit information. The act, enforced by the U.S. Federal Trade Commission</p> <p>The Right to Financial Privacy Act (12 U.S.C. \u00a7 3401) (1978) protects the records of financial institution customers from unauthorized scrutiny by the federal government. Prior to the passage of this act, financial institution customers were not informed if their personal records were being turned over for review by a government authority The customer must also be given written procedures to follow if he or she does not wish the records to be made available. In addition, to gain access to a customer\u2019s financial records, the government must obtain one of the following: - an authorization signed by the customer that identifies the records, the reasons the records are requested, and the customer\u2019s rights under the act; - an appropriate administrative or judicial subpoena or summons; - a qualified search warrant or a formal written request by a government agency (can be used only if no administrative summons or subpoena authority is available).</p> <p>The Gramm-Leach-Bliley Act (GLBA) (Public Law 106-102), also known as the Financial Services Modernization Act of 1999, was a bank deregulation law that repealed a Depression-era law known as Glass-Steagall Glass-Steagall prohibited any one institution from offering investment, commercial banking, and insurance services; individual companies were only allowed to offer one of those types of financial service products. GLBA also included three key rules that affect personal privacy: - Financial Privacy Rule: This rule established mandatory guidelines for the collection and disclosure of personal financial information by financial organizations. Under this provision, financial institutions must provide a privacy notice to each consumer that explains what data about the consumer are gathered, with whom that data are shared, how the data are used, and how the data are protected. - Financial Privacy Rule: This rule established mandatory guidelines for the collection and disclosure of personal financial information by financial organizations. Under this provision, financial institutions must provide a privacy notice to each consumer that explains what data about the consumer are gathered, with whom that data are shared, how the data are used, and how the data are protected. - Pretexting Rule: This rule addresses attempts by people to access personal information without proper authority by means such as impersonating an account holder or phishing. GLBA encourages financial institutions to implement safeguards against pretexting.</p> <p>The Fair and Accurate Credit Transactions Act (Public Law 108-159) was passed in 2003 as an amendment to the Fair Credit Reporting Act, and it allows consumers to request and obtain a free credit report once each year from each of the three primary consumer credit reporting companies (Equifax, Experian, and TransUnion) Also established the National Fraud Alert system. Consumers can place an alert for fraud.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#health-information","title":"Health Information","text":"<p>The Health Insurance Portability and Accountability Act (HIPAA) (Public Law 104-191) (1996) was designed to improve the portability and continuity of health insurance coverage; to reduce fraud, waste, and abuse in health insurance and healthcare delivery; and to simplify the administration of health insurance.</p> <p>The American Recovery and Reinvestment Act (Public Law 111-5) is a wide-ranging act passed in 2009 that authorized $787 billion in spending and tax cuts over a 10-year period. Title XIII, Subtitle D, of this act (known as the Health Information Technology for Economic and Clinical Health Act, or HITECH) included strong privacy provisions for electronic health records (EHRs), including banning the sale of health information, promoting the use of audit trails and encryption, and providing rights of access for patients.</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#childrens-personal-data","title":"Children's Personal Data","text":"<p>The Family Educational Rights and Privacy Act (FERPA) (20 U.S.C. \u00a7 1232g)(1974) is a federal law that assigns certain rights to parents regarding their children\u2019s educational records. These rights transfer to the student once the student reaches the age of 18, - the right to access educational records maintained by a school; - the right to demand that educational records be disclosed only with student consent; - the right to amend educational records; and - the right to file complaints against a school for disclosing educational records in violation of FERPA.</p> <p>According to the Children\u2019s Online Privacy Protection Act (COPPA) (15 U.S.C. \u00a7\u00a7 6501\u20136506)(1998), any website that caters to children must offer comprehensive privacy policies, notify parents or guardians about its data collection practices, and receive parental consent before collecting any personal information from children under 13 years of age.</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#electronic-surveillance","title":"Electronic Surveillance","text":"<p>Title III of the Omnibus Crime Control and Safe Streets Act (Public Law 90-351), also known as the Wiretap Act, regulates the interception of wire (telephone) and oral communications. It allows state and federal law enforcement officials to use wiretapping and electronic eavesdropping, but only under strict limitations. Under this act, a warrant must be obtained from a judge to conduct a wiretap</p> <p>The Foreign Intelligence Surveillance Act (FISA)(50 U.S.C.) describes procedures for the electronic surveillance and collection of foreign intelligence information in communications between foreign powers and the agents of foreign powers.</p> <p>Under Executive Order 12333, intelligence-gathering agencies are allowed to collect information\u2014including message content\u2014obtained in the course of a lawful foreign intelligence, counterintelligence, international drug, or international terrorism investigation, as well as incidentally obtained information that may indicate involvement in activities that may violate federal, state, local, or foreign laws Conflicts with FISA  </p> <p> </p> <p>The Electronic Communications Privacy Act (ECPA) (18 U.S.C. \u00a7 2510-22) (1986) deals with three main issues: - Protect communications while in transfer from sender to receiver - Protection of communications held in electronic storage - Prohibition of devices from recording dialing, routing, addressing, and signaling  information without a search warrant.  </p> <p>The third part of ECPA establishes a requirement for court-approved law enforcement use of a pen register\u2014a device that records electronic impulses to identify the numbers dialed for outgoing calls\u2014or a trap and trace\u2014a device that records the originating number of incoming calls for a particular phone number.</p> <p>The Communications Assistance for Law Enforcement Act (CALEA) (47 U.S.C. 1001-1010) was passed by Congress in 1994 and amended both the Wiretap Act and ECPA. CALEA was a hotly debated law because it required the telecommunications industry to build tools into its products that federal investigators could use\u2014after obtaining a court order\u2014to eavesdrop on conversations and intercept electronic communications. </p> <p>The USA PATRIOT Act (Uniting and Strengthening America by Providing Appropriate Tools Required to Intercept and Obstruct Terrorism) (Public Law 107-56):  - increased law enforcement ability to search telephones, email, medical records,  financial, and other records.  </p> <p>Foreign Intelligence Surveillance Act Amendments Act (2004): authorized intelligence gathering on individuals not affiliated with any known terrorist organization.  </p> <p>Foreign Intelligence Surveillance Act of 1978 Amendments Act of 2008: warrantless eavesdropping on international communications. -The USA Freedom Act terminated the bulk collection of telephone metadata by the NSA in 2015  </p> <p>There is more, but I give up </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#consumer-profiling","title":"Consumer profiling","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#electronic-discovery","title":"Electronic Discovery","text":"<p>Part of a pretrial phase of a lawsuit, in which each party can obtain evidence  from the other party by various means, including requests for the production of documents.  </p> <p>Often organizations will send a litigation hold notice that informs its employees (or employees or officers of the opposing party) to save relevant data and to suspend data that might be due to be destroyed based on normal data-retention rules.</p> <p>predictive coding is a process that couples human guidance with computer-driven concept searching in order to \u201ctrain\u201d document review software to recognize relevant documents within a document universe. </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#workplace-monitoring","title":"Workplace Monitoring","text":"<p>cyberloafing is defined as using the Internet for purposes unrelated to work such as posting to Facebook, sending personal emails or Instant messages, or shopping online. </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#advanced-surveillance","title":"Advanced surveillance","text":"<p>A vehicle event data recorder (EDR) is a device that records vehicle and occupant data for a few seconds before, during, and after any vehicle crash that is severe enough to deploy the vehicle\u2019s air bags. </p> <p>Cell phone spy software called a stalking app can be loaded onto someone\u2019s cell phone or smartphone within minutes, making it possible for the user to perform location tracking, record calls, view every text message or picture sent or received, and record the URLs of any website visited on the phone. </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#review-questions","title":"Review Questions","text":"<p>A security company performs a superficial investigation of a data breach and issues a root cause analysis that unintentionally misses key details about the means to remediate the existing vulnerabilities. It is found that the security company has insufficient expertise. What best describes the company\u2019s problematic behavior? Professional malpractice </p> <p>Which act protects the records of clients at financial institutions? GLBA </p> <p>Which amendment protects your right to privacy? 4th, unreasonable search and seizures. </p> <p>Which EU law requires all businesses to implement privacy policies on the fair and appropriate usage of personal information? EU Data Protection Directive</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#freedom-of-expression-section-3-module-6","title":"Freedom of Expression, Section 3, Module 6","text":"<p>Chapter 5 in Ethics in Information Technology.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#first-amendment-right","title":"First Amendment Right","text":"<p>Freedom of expression  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#obscene-speech","title":"Obscene Speech","text":"<p>Miller v. California is the 1973 Supreme Court case that established a test to determine if material is obscene and therefore not protected by the First Amendment. After conducting a mass mailing campaign to advertise the sale of adult material His material was determined to be a violation of the 1st amendment. Three questions must be asked for material protected under the 1st amendment:  </p> <ul> <li>Would the average person, applying contemporary community standards, find that the work, taken as a whole, appeals to the prurient interest?</li> <li>Does the work depict or describe, in a patently offensive way, sexual conduct specifically defined by the applicable state law?</li> <li>Does the work, taken as a whole, lack serious literary, artistic, political, or scientific value?</li> </ul> <p>To determine the impact on an average adult in a community: - Who is an average adult? - What are contemporary community standards? - What is a community? (This question is particularly relevant in cases in which potentially obscene material is displayed worldwide via the Internet.)</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#defamation","title":"Defamation","text":"<p>Making either an oral or a written statement of alleged fact that is false and that harms another person is defamation </p> <p>An oral defamatory statement is slander, and a written defamatory statement is libel</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#contolling-access-to-information-on-the-internet","title":"Contolling Access to Information on the Internet","text":"<p>Judged unconstitutional. Title V of the Telecommunications Act was the Communications Decency Act (CDA), aimed at protecting children from pornography.</p> <p>The ruling applied essentially the same free-speech protections to communication over the Internet as exist for print communication.  </p> <p>Section 230 of the CDA, which was not ruled unconstitutional, states that \u201cNo provider or user of an interactive computer service shall be treated as the publisher or speaker of any information provided by another information content provider\u201d (47 U.S.C. \u00a7 230). This provides immunity to an Internet service provider (ISP) that publishes user-generated content, as long as its actions do not rise to the level of a content provider.   </p> <p>Unconstitutional. In October 1998, the Child Online Protection Act (COPA) was signed into law. This act is not to be confused with the Children\u2019s Online Privacy Protection Act (COPPA) makes any communication for commercial purposes that is available to any minor and that includes any material that is harmful to minors shall be fined and/or imprisoned  </p> <p>An Internet filter is software that can be used to block access to certain websites that contain material deemed inappropriate or offensive.</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#internet-censorship","title":"Internet Censorship","text":"<p>Internet censorship is the control or suppression of the publishing or accessing of information on the Internet. </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#strategic-lawsuit-against-public-participation","title":"Strategic Lawsuit Against Public Participation","text":"<p>A strategic lawsuit against public participation (SLAPP) is employed by corporations, government officials, and others against citizens and community groups who oppose them on matters of public interest.</p> <p>anti-SLAPP laws are designed to reduce frivolous SLAPPs. As of 2015, 28 states and the District of Columbia had passed anti-SLAPP legislation to protect people who are the target of a SLAPP</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#anonymity-on-the-internet","title":"Anonymity on the Internet","text":"<p>Doxing involves doing research on the Internet to obtain someone\u2019s private personal information\u2014such as home address, email address, phone numbers, and place of employment\u2014and even private electronic documents, such as photographs, and then posting that information online without permission. </p> <p>Internet users who want to remain anonymous can send email to an anonymous remailer service, which uses a computer program to strip the originating header and/or IP number from the message. It then forwards the message to its intended recipient\u2014an individual, a chat room, or a newsgroup\u2014with either no IP address or a fake one, ensuring that the header information cannot be used to identify the author.</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#john-doe-lawsuit","title":"John Doe Lawsuit","text":"<p>An aggrieved party can file a John Doe lawsuit against a defendant whose identity is temporarily unknown because he or she is communicating anonymously or using a pseudonym. Once the John Doe lawsuit is filed, the plaintiff can request court permission to issue subpoenas to command a person to appear under penalty.</p> <p>Test determined in Doe v. 2TheMart.com if a subpoena for a John Doe can be issued: - The subpoena was issued in good faith and not for any improper purpose. - The information sought was related to a core claim or defense. - The identifying information was directly and materially relevant to that claim or defense. - Adequate information was unavailable from any other source.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#hate-speech","title":"Hate Speech","text":"<p>Persistent or malicious harassment aimed at a specific person is hate speech, which can be prosecuted under the law  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#porno-on-the-internet","title":"Porno on the Internet","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#fake-news","title":"Fake News","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#review-questions_1","title":"Review Questions","text":"<p>Why is fake news a threat in IT? It is misrepresented as facts and It is driven by ulterior motives </p> <p>Why is hate speech a threat in IT? There are insufficient resources to prescreen online content </p> <p>Which act requires email marketers to include an \"unsubscribe\" option for all spam? CAN-SPAM </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#intellectual-property-section-3-module-7","title":"Intellectual Property, Section 3, Module 7","text":"<p>intellectual property is a term used to describe works of the mind\u2014such as art, books, films, formulas, inventions, music, and processes\u2014that are distinct and owned or created by a single person or group. It is protected through copyright, patent, and trade secret laws</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#copyrights","title":"Copyrights","text":"<p>Copyright and patent protection was established through the U.S. Constitution, Article I, section 8, clause 8  </p> <p>A copyright is the exclusive right to distribute, display, perform, or reproduce an original work in copies or to prepare derivative works based on the work. Sonny Bono Copyright Term Extension: - For works created after January 1, 1978, copyright protection endures for the life of the author plus 70 years. - For works created but not published or registered before January 1, 1978, the term endures for the life of the author plus 70 years, but in no case expires earlier than December 31, 2004. - For works created before 1978 that are still in their original or renewable term of copyright, the total term was extended to 95 years from the date the copyright was originally secured.</p> <p>Eligible works include: architecture, art, audiovisual works, choreography, drama, graphics, literature, motion pictures, music, pantomimes, pictures, sculptures, sound recordings, and other intellectual works, as described in Title 17 of the U.S. Code</p> <p>copyright infringement is a violation of the rights secured by the owner of a copyright</p> <p>Fair Use Doctrine: allows portions of copyrighted materials to be used without permission under certain circumstances. Copyright law tries to strike a balance between protecting an author\u2019s rights and enabling public access to copyrighted works.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#the-prioritizing-resources-and-organization-for-intellectual-property-act-of-2008","title":"The Prioritizing Resources and Organization for Intellectual Property Act of 2008","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#general-agreement-on-tariffs-and-trade-gatt","title":"General Agreement on Tariffs and Trade (GATT)","text":"<p>The outcome was Agreement on Trade-Related Aspects of Intellectual Property Rights (TRIPS) establish minimum levels of protection that each government must provide to the intellectual property of all WTO members  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#the-wto-and-the-wto-trips-agreement-1994","title":"The WTO and the WTO Trips Agreement (1994)","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#the-world-intellectual-property-organization-copyright-treaty-1996","title":"The World Intellectual Property Organization Copyright Treaty (1996)","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#the-digital-millennium-copyright-act-1998","title":"The Digital Millennium Copyright Act (1998)","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#patents","title":"Patents","text":"<p>Title 35 of the U.S. Code. Section 101  </p> <p>A patent is a grant of a property right issued by the U.S. Patent and Trademark Office (USPTO) to an inventor. A patent permits its owner to exclude the public from making, using, or selling a protected invention, and it allows for legal action against violators. Unlike a copyright, a patent prevents independent creation as well as copying. </p> <p>There are six types of patents.  </p> <ul> <li> <p>A utility patent is \u201cissued for the invention of a new and useful process, machine, manufacture, or composition of matter, or a new and useful improvement thereof, it generally permits its owner to exclude others from making, using, or selling the invention for a period of up to twenty years from the date of patent application.  </p> </li> <li> <p>A design patent, which is \u201cissued for a new, original, and ornamental design embodied in or applied to an article of manufacture,\u201d permits its owner to exclude others from making, using, or selling the design in question. Design patents issued from applications filed on or after May 13, 2015, are granted for a term of 15 years from the date of grant.  </p> </li> </ul> <p>The U.S. Supreme Court has ruled that three classes of items cannot be patented: abstract ideas, laws of nature, and natural phenomena.   </p> <p>patent infringement, or the violation of the rights secured by the owner of a patent, occurs when someone makes unauthorized use of another\u2019s patent. Unlike with copyright infringement, there is no specified dollar amount limitation on the monetary penalty if patent infringement is found.  </p> <p>Passed in 2011, the Leahy-Smith America Invents Act, which amends Title 35 of the U.S. Code: Under this law, the U.S. patent system changed from a \u201cfirst-to-invent\u201d to a \u201cfirst-inventor-to-file\u201d  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#cross-licensing-agreements","title":"Cross-Licensing Agreements","text":"<p>Many large software companies have cross-licensing agreements in which each party agrees not to sue the other over patent infringements.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#trade-secrets","title":"Trade Secrets","text":"<p>A trade secret is defined as business information that represents something of economic value, has required effort or cost to develop, has some degree of uniqueness or novelty, is generally unknown to the public, and is kept confidential.</p> <p>Trade secret law protects only against the misappropriation of trade secrets. If competitors come up with the same idea on their own, it is not misappropriation;  </p> <ul> <li>There are no time limitations on the protection of trade secrets, as there are with patents and copyrights.</li> <li>There is no need to file an application, make disclosures to any person or agency, or disclose a trade secret to outsiders to gain protection. (After the USPTO issues a patent, competitors can obtain a detailed description of it.) Hence, no filing or application fees are required to protect a trade secret.</li> <li>Although patents can be ruled invalid by the courts, meaning that the affected inventions no longer have patent protection, this risk does not exist for trade secrets.</li> </ul>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#uniform-trade-secrets-act","title":"Uniform Trade Secrets Act","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#the-economic-espionage-act","title":"The Economic Espionage Act","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#defend-trade-secrets-act-of-2016","title":"Defend Trade Secrets Act of 2016","text":"<p>Because organizations can risk losing trade secrets when key employees leave, they often try to prohibit employees from revealing secrets by adding nondisclosure clauses to employment contracts.</p> <p>A noncompete agreement prohibits an employee from working for any competitors for a period of time, often one to two years.</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#plagiarism","title":"Plagiarism","text":"<p>plagiarism is the act of stealing someone\u2019s ideas or words and passing them off as one\u2019s own.</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#reverse-engineering","title":"Reverse Engineering","text":"<p>reverse engineering is the process of taking something apart in order to understand it, build a copy of it, or improve it.</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#open-source-code","title":"Open Source Code","text":"<p>open source code is any program whose source code is made available for use or modification, as users or other developers see fit  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#competitive-intelligence","title":"Competitive Intelligence","text":"<p>Competitive intelligence is legally obtained information that is gathered to help a company gain an advantage over its rivals.  </p> <p>Competitive intelligence is not the same as industrial espionage, which is the use of illegal means to obtain business information not available to the general public.  </p> <p>Sources of Competitive Intelligence:  </p> <ul> <li>Crunchbase is a free database of technology of over 110,000 companies, people, and investors.</li> <li>CORI (http://cori.missouri.edu/pages/ksearch.htm) is an online database of more than 690,000 contract documents, most of which are executed agreements made public through SEC and other regulatory agency filings; users can access the database using a full-text search and retrieval system.</li> <li>ThomasNet.com is an excellent source for identifying suppliers and sources for products.</li> <li>WhoGotFunded.com is a comprehensive website of data about what organizations have received funding and for what purposes.</li> </ul>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#trademark-infringement","title":"Trademark Infringement","text":"<p>A trademark is a logo, package design, phrase, sound, or word that enables a consumer to differentiate one company\u2019s products from another\u2019s. </p> <p>Nominative fair use is a defense often employed by the defendant in trademark infringement cases in which a defendant has used a plaintiff\u2019s mark to identify the plaintiff\u2019s products or services: - that the plaintiff\u2019s product or service cannot be readily identifiable without using the plaintiff\u2019s mark, - that it uses only as much of the plaintiff\u2019s mark as necessary to identify the defendant\u2019s product or service, and - that the defendant does nothing with the plaintiff\u2019s mark that suggests endorsement or sponsorship by the plaintiff.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#cyber-squatting","title":"Cyber squatting","text":"<p>cybersquatters registered domain names for famous trademarks or company names to which they had no connection, with the hope that the trademark\u2019s owner would eventually buy the domain name  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#review-questions_2","title":"Review Questions","text":"<p>What are the ethical challenges with an IT professional reverse engineering an in-house-developed software and a third party-developed software? Only reverse engineering a third party-developed software would be in violation of a professional code of ethics in IT.  </p> <p>Which two actions should be taken to address the potential ethical challenges associated with this scenario? Implement safeguards that prevent industrial espionage Obtain approval from the legal department for data-gathering methods </p> <ul> <li>Analysts should fully disclose their identity when conducting data-gathering interviews.</li> </ul> <p>Which law requires all World Trade Organization members to codify protections for intellectual property? TRIPS </p> <p>What act provided additional legal protections for trade secrets? DTSA</p> <ul> <li>The LSAIA is a U.S. law designed to facilitate lawful surveillance and intelligence gathering by setting procedures and requirements for government agencies.</li> <li>The DTSA is a U.S. law that provides federal protection for trade secrets and allows companies to file lawsuits for misappropriation of trade secrets in federal court.  </li> <li>The DMCA is a U.S. law that offers copyright protection for digital content and establishes procedures for addressing online copyright infringement.  </li> <li>COPPA is a U.S. law that regulates the collection of personal information from children under 13 years old and requires websites to obtain parental consent before collecting such data.  </li> </ul> <p>What act grants a patent to the first person to file, not necessarily the first person to invent an item? Leahy-Smith America Invents Act  </p> <ul> <li>The PRO-IP Act is a U.S. law aimed at enhancing the enforcement of intellectual property rights by strengthening federal enforcement and coordination efforts.  </li> <li>The Uniform Trade Secrets Act is a model law adopted by U.S. states to standardize the protection of trade secrets and provide legal remedies for their misappropriation.  </li> </ul>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#section-3-review-questions","title":"Section 3 Review Questions","text":"<p>Which challenge associated with data overload in IT is addressed with predictive coding? Electronic discovery of a large volume of documents </p> <p>A company encourages its employees and their families to wear fitness trackers to promote healthy lifestyles and help address the cost of insurance benefits. HIPPA  </p> <ul> <li>The Communication Assistance for Law Enforcement Act (CALEA) requires telecommunications industries to build eavesdropping tools into their products.  </li> <li>The Family Educational Rights and Privacy Act (FERPA) gives parents certain rights to their child\u2019s education records.  </li> <li>The Children's Online Privacy Protection Act (COPPA) regulates websites that cater to children.  </li> </ul> <p>What are two implications of using advanced surveillance technologies in public locations from the technical, legal, and ethical standpoints? Diminishing individual privacy Proliferation of stalking apps </p> <ul> <li>Does no violate the 4th Amendment because this is done in a public space  </li> </ul> <p>What are two challenges of using stalking apps from the technical, legal, and ethical standpoints? Selling and buying stalking apps over the internet is not prohibited by law. Stalking apps allow for remote activation of the built-in microphone.  </p> <p>What are two implications of this decision from the technical, legal, and ethical standpoints? Increased privacy rights infringement Decreased legal liabilities  </p> <ul> <li>The First Amendment of the U.S. Constitution does not apply here at all because there are no free speech considerations.  </li> </ul> <p>What are two technical implications of fake news proliferation? Decreased data accuracy in the public domain Increased bandwidth usage on the public internet </p> <ul> <li>Fake news proliferation increases bandwidth usage on the public internet because fake news releases are commonly shared among users.  </li> </ul> <p>Which two characteristics attributed to fake news releases are the most significant threats to data accuracy Sensationalism  - Editorialism implies that the content is an opinion, rather than facts, so it should not affect data accuracy. - The multimedia attribute increases the chances of verifying the accuracy of a news release. - Publishing speed (immediacy) is one of the characteristics attributed to fake news releases. These releases are a significant threat to data accuracy because the speed at which they are published implies that the news has not been verified and requires post-publication correction - Sensationalism is one of the characteristics attributed to fake news releases. The sensationalism of the releases is a significant threat to data accuracy because it implies that the release hides an ulterior agenda geared towards gaining attention rather than being fact based.  </p> <p>A software developer creates software and wants to ensure that it will always be in the public domain, including later modifications by others. How should the developer publish the software? To the public domain with an open-source license  </p> <p>What is the primary argument against overly restrictive copyright laws? It stifles creativity</p> <p>A software development company wants to make its application run on a database platform that is owned by a private company. Which two actions could the software development company take to address its need that would raise ethical concerns related to data property? Create a competitive intelligence team targeting the private company </p> <ul> <li>Signing a cross-licensing agreement with the private company would eliminate ethically questionable behavior.  </li> <li>Reverse engineering third-party products is ethically questionable because the products are owned by a third party.  </li> <li>Reverse engineering third-party products is ethically questionable because the products are owned by a third party. Hiring developers from the company that owns the product makes it even more questionable.  </li> </ul>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#ethical-decisions-in-software-development-section-4-module-8","title":"Ethical Decisions in Software Development, Section 4, Module 8","text":"<p>Chapter 7 in Ethics in Information Technology  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#software-quality-and-why-it-is-important","title":"Software Quality and Why it is Important","text":"<p>A software defect is any error that, if not removed, could cause a software system to fail to meet its users\u2019 needs.</p> <p>software quality is the degree to which a software product meets the needs of its users</p> <p>quality management focuses on defining, measuring, and refining the quality of the development process and the products developed during its various stages. </p> <p>Deliverable: product delivered to customer  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#software-product-liability","title":"Software Product Liability","text":"<p>The liability of manufacturers, sellers, lessors, and others for injuries caused by defective products is commonly referred to as product liability.  </p> <p>There is no federal product liability law; instead, product liability in the United States is mainly covered by common law (made by state judges) and Article 2 of the Uniform Commercial Code, which deals with the sale of goods.  </p> <p>strict liability means that the defendant is held responsible for injuring another person, regardless of negligence or intent</p> <p>The defendant in a negligence case may either answer the charge with a legal justification for the alleged misconduct or demonstrate that the plaintiffs\u2019 own actions contributed to their injuries (contributory negligence).</p> <p>A warranty assures buyers or lessees that a product meets certain standards of quality. A warranty of quality may be either expressly stated or implied by law.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#strategies-for-developing-quality-software","title":"Strategies for developing Quality Software","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#software-development-methedologies","title":"Software Development Methedologies","text":"<p>software development methodology \u2014a standard, proven work process that enables systems analysts, programmers, project managers, and others to make controlled and orderly progress in developing high-quality software. </p> <p> </p> <p> </p> <p>quality assurance (QA) refers to methods within the development process that are designed to guarantee reliable operation of a product. Ideally, these methods are applied at each stage of the development cycle.</p> <p>One approach to QA is to test the code for a completed unit of software by actually entering test data and comparing the results to the expected results in a process called dynamic testing. Two types of dynamic testing: - black-box testing involves viewing the software unit as a device that has expected input and output behaviors but whose internal workings are unknown (a black box). - white-box testing treats the software unit as a device that has expected input and output behaviors but whose internal workings, unlike the unit in black-box testing, are known.</p> <p>Other types of testing: - static testing\u2014This is a software-testing technique in which software is tested without actually executing the code. It consists of two steps\u2014review and static analysis.     - Review: informal, walk-through, peer review, and inspection     - During the static analysis step, special software programs called static analyzers are run against the code. Rather than reviewing input and output, the static analyzer looks for suspicious patterns in programs that might indicate a defect. - unit testing: This involves testing individual components of code (subroutines, modules, and programs) to verify that each unit performs as intended.  - integration testing: After successful unit testing, the software units are combined into an integrated subsystem that undergoes rigorous testing to ensure that the linkages among the various subsystems work successfully. - system testing: After successful integration testing, the various subsystems are combined to test the entire system as a complete entity. - user acceptance testing: Trained end users conduct independent user acceptance testing to ensure that the system operates as they expect.</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#capability-maturity-model-integration","title":"Capability Maturity Model Integration","text":"<p>Capability Maturity Model Integration (CMMI) models are collections of best practices that help organizations improve their processes. </p> <p>A best practice is a method or technique that has consistently shown results superior to those achieved with other means, and that is used as a benchmark within a particular industry. </p> <p>CMMI-Development (CMMI-DEV)\u2014is frequently used to assess and improve software development practices. CMMI-DEV is a set of guidelines for 22 process areas related specifically to systems development.  </p> <p>Five Levels of Software Development Maturity: </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#developing-safety-critical-systems","title":"Developing Safety-Critical Systems","text":"<p>A safety-critical system is one whose failure may cause human injury or death. The safe operation of many safety-critical systems relies on the flawless performance of software.</p> <p>The key to ensuring that these additional tasks are completed is to appoint a system safety engineer, who has explicit responsibility for the system\u2019s safety. The safety engineer uses a logging and monitoring system to track hazards from a project\u2019s start to its finish.</p> <p>This hazard log is used at each stage of the software development process to assess how it has accounted for detected hazards. </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#risk-management","title":"Risk Management","text":"<p>risk is the potential of gaining or losing something of value. Risk can be quantified by three elements: a risk event, the probability of the event happening, and the impact (positive or negative) on the business outcome if the risk does actually occur  </p> <p>The annualized rate of occurrence (ARO) is an estimate of the probability that this event will occur over the course of a year. </p> <p>The single loss expectancy (SLE) is the estimated loss that would be incurred if the event happens. </p> <p>The annualized loss expectancy (ALE) is the estimated loss from this risk over the course of a year.  </p> <p><code>ARO x SLE = ALE =&gt; 0.01 x $1,000,000 = $10,000</code> </p> <p>risk management is the process of identifying, monitoring, and limiting risks to a level that an organization is willing to accept.   The level of risk that remains after managing risk is called residual risk.   </p> <p>acceptance \u2014When the cost of avoiding a risk outweighs the potential loss of a risk, an organization will likely accept the risk.   </p> <p>avoidance\u2014An organization may choose to eliminate the vulnerability that gives rise to a particular risk in order to avoid the risk altogether.  </p> <p>mitigation \u2014Risk mitigation involves the reduction in either the likelihood or the impact of the occurrence of a risk     -  N-version programming is an approach to minimizing the impact of software errors by independently implementing the same set of user requirements N times. So multiple teams are building the same product. The idea is that each team might cover a different aspect, so it is less likely all version will fail.  </p> <p>redundancy is the provision of multiple interchangeable components to perform a single function in order to cope with failures and errors.</p> <p>transference\u2014A common way to accomplish risk transference is for an individual or an organization to purchase insurance, such as auto or business liability insurance. </p> <p>reliability is a measure of the rate of failure in a system that would render it unusable over its expected lifetime.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#quality-management-standards","title":"Quality Management Standards","text":"<p>International Organization for Standardization (ISO)</p> <p>ISO 9001 family of standards serves as a guide to quality products, services, and management. - Have written procedures for all processes - Follow those procedures - Prove to an auditor that it has fulfilled the first two requirements; this proof can require observation of actual work practices and interviews with customers, suppliers, and employees</p> <p>failure mode and effects analysis (FMEA) is an important technique used to develop ISO 9000\u2013compliant quality systems by both evaluating reliability and determining the effects of system and equipment failures. The use of FMEA helps to prioritize those actions necessary to reduce potential failures with the highest relative risks.  </p> <p>A failure mode describes how a product or process could fail to perform the desired functions described by the customer.</p> <p>An effect is an adverse consequence that the customer might experience. </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#module-8-review-questions","title":"Module 8 Review Questions","text":"<p>Which technique is used to develop International Organization for Standardization (ISO) 9000-compliant systems? Failure mode and effects analysis </p> <p>What is the primary purpose of Capability Maturity Model Integration (CMMI)? To evaluate and improve organizational processes </p> <p>What is meant by \"residual risk\" in the context of risk management? The level of risk that remains after implementing risk management strategies </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#the-impact-of-information-technology-on-society-module-9","title":"The Impact of Information Technology on Society, Module 9","text":"<p>An electronic health record (EHR) is a comprehensive view of the patient\u2019s complete medical history designed to be shared with authorized providers and staff from more than one organization.</p> <p>Health Information Technology for Economic and Clinical Health Act (HITECH) program to incentivize physicians and hospitals to implement EHR.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#the-impact-of-it-on-the-standard-of-living-and-worker-productivity","title":"The Impact of IT on the Standard of Living and Worker Productivity","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#it-investment-and-productivity","title":"IT Investment and Productivity","text":"<p>labor productivity is a measure of economic performance that compares the amount of goods and services produced (output) with the number of labor hours used in producing those goods and services.</p> <p>Fundamental Drivers for Productivity Performance: - Reduce the amount of input required to produce a given output by:     - Consolidating operations to better leverage economies of scale.     - Improving performance by becoming more efficient - Increse the value of the output produced by a given amount of input by:     - Selling higher-value goods and services     - Selling more goods and services to increase capacity and use of existing resources  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#it-and-workplace-automation","title":"IT and Workplace Automation","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#artificial-intelligence","title":"Artificial Intelligence","text":"<p>artificial intelligence systems include the people, procedures, hardware, software, data, and knowledge needed to develop computer systems and machines that can simulate human intelligence processes, including learning (the acquisition of information and rules for using the information), reasoning (using rules to reach conclusions), and self-correction (using the outcome from one scenario to improve its performance on future scenarios).</p> <p>machine learning, a type of artificial intelligence (AI), involves computer programs that can learn some task and improve their performance with experience. - a model - parameter - learner  </p> <p>The learner component of the system compares the prediction with reality and uses the difference between the two to modify the parameters that are used in the model. This learning process is repeated until the learning system is able to make predictions that are sufficiently accurate. </p> <p>Machine learning is employed in a wide spectrum of computing functions in which designing and programming explicit algorithms is not feasible.  </p> <p>robotics is a branch of engineering that involves the development and manufacture of mechanical or computer devices that can perform tasks that require a high degree of precision or that are tedious or hazardous for human beings, such as painting cars or making precision welds.  </p> <p>natural language processing is an aspect of artificial intelligence that involves technology that allows computers to understand, analyze, manipulate, and/or generate \u201cnatural\u201d languages, such as English. Many companies provide natural language processing help over the phone  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#the-impact-of-it-on-health-care","title":"The Impact of IT on Health Care","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#computerized-patient-records","title":"Computerized Patient Records","text":"<p>An electronic medical record (EMR) is a collection of health-related information on an individual that is created, managed, and consulted by authorized clinicians and staff within a single healthcare organization.  </p> <p>An EHR, on the other hand, is a comprehensive view of the patient\u2019s complete medical history designed to be shared with authorized providers and staff from more than one organization.   </p> <p>health information exchange (HIE) is the process of sharing patient-level electronic health information between different organizations. HIE can result in more cost-effective and higher-quality care.  </p> <p>A personal health record (PHR) includes those portions of the EHR that are routinely shared with the patient\u2014such as personal identifiers, contact information, health provider information, problem list, medication history, allergies, immunizations, and lab and test results. </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#clinical-decision-support","title":"Clinical Decision Support","text":"<p>clinical decision support (CDS) is a process and a set of tools designed to enhance healthcare-related decision making through the use of clinical knowledge and patient-specific information to improve healthcare delivery.</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#computerized-provider-order-entry","title":"Computerized Provider Order Entry","text":"<p>A computerized provider order entry (CPOE) system enables physicians to place orders (for drugs, laboratory tests, radiology, physical therapy) electronically, with the orders transmitted directly to the recipient. CPOE streamlines the ordering process because lab techs, nurses, and pharmacy staffs do not need to seek clarification or solicit missing information due to illegible or incomplete orders.</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#telehealth","title":"Telehealth","text":"<p>telehealth employs electronic information processing and telecommunications to support at-a-distance health care, provide professional and patient health-related training, and support healthcare administration. </p> <p>telemedicine is the component of telehealth that provides medical care to people at a location different from the healthcare providers. </p> <p>store-and-forward telemedicine involves acquiring data, sound, images, and video from a patient and then transmitting everything to a medical specialist for later evaluation. </p> <p>live telemedicine requires the presence of patients and healthcare providers at different sites at the same time and often involves a video conference link between the two sites. </p> <p>remote monitoring (also called home monitoring) involves the regular, ongoing, accurate measurement of an individual\u2019s vital signs (temperature, blood pressure, heart rate, and breathing rate) and other health measures (for example, glucose levels for a diabetic) and the transmission of this data to a healthcare provider.</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#module-9-review-questions","title":"Module 9 Review Questions","text":"<p>An electronic health record (EHR) allows patient information to be shared immediately with other healthcare providers, including physical therapists and pharmacists. Electronic records can reduce the number of prescription errors using databases that can query drug interaction Electronic records would decrease the amount of time to transfer prescriptions, getting patients their medication faster. </p> <p>A pharmaceutical company is automating the production of a vaccine to lessen the impact of a global pandemic. The application that controls the manufacturing does not have identity and access management controls. Which existential risk exists because of the lack of controls? Anyone could change the formula for the vaccine. Changing the formula would be an existential risk because it could directly kill a large group of people.  </p> <p>An automobile company is preparing to manufacture a self-driving vehicle. The company has provided the vehicle with terabytes of information and rules on how to handle specific scenarios. Which two existential threats exist because of the use of artificial intelligence (AI)? An error in rules was not corrected. An error in a rule could cause the vehicle to behave in an unexpected manner, killing large groups of people. Fake data could be fed to the vehicle. Fake data could cause the vehicle to behave in an unexpected manner, killing large groups of people.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#social-media-section-4-module-10","title":"Social Media, Section 4, Module 10","text":"<p>social networking platform creates an online community of Internet users that enables members to break down barriers created by time, distance, and cultural differences. social media marketing involves the use of social networks to communicate and promote the benefits of products and services.  organic media marketing employs tools provided by or tailored for a particular social media platform to build a social community and interact with it by sharing posts and responding to customer comments on the organization\u2019s blog and social media accounts. paid media marketing involves paying a third party to broadcast an organization\u2019s display ads or sponsored messages to social media users. </p> <p>Two common methods of charging for paid media are cost per thousand impressions and cost per click: - cost per thousand impressions (CPM) ads are billed at a flat rate per 1,000 impressions, which is a measure of the number of times an ad is displayed - cost per click (CPC) ads are paid for only when someone actually clicks on them.  </p> <p>earned media refers to the media exposure an organization gets through press and social media mentions, positive online ratings, and reviews, tweets and retweets, reposts (or \u201cshares\u201d), recommendations, and so on.  </p> <p>viral marketing is an approach to social media marketing that encourages individuals to pass along a marketing message to others, thus creating the potential for exponential growth in the message\u2019s exposure and influence as one person tells two people, each of those two people tell two or three more people, and so on.</p> <p>Improving Customer Service Using Social Media: \u201cA happy customer tells a few people, an unhappy customer tells everyone\u201d has never been more true.  </p> <p>Social shopping platforms combine two highly popular online activities\u2014shopping and social networking.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#social-networking-ethical-issues","title":"Social Networking Ethical Issues","text":"<p>cyberabuse is any form of mistreatment or lack of care, both physical and mental, based on the use of an electronic communications device that causes harm and distress to others.  Cyberabuse encompasses both cyberharassment and cyberstalking: - cyberharassment is a form of cyberabuse in which the abusive behavior, which involves the use of an electronic communications device, is degrading, humiliating, hurtful, insulting, intimidating, malicious, or otherwise offensive to an individual or group of individuals causing substantial emotional distress. - cyberstalking is a subcategory of cyberabuse that consists of a long-term pattern of unwanted, persistent pursuit and intrusive behavior (involving the use of an electronic communications device) that is directed by one person against another and that causes fear and distress in the victim. </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#section-4-review-questions","title":"Section 4 Review Questions","text":"<p>What does a victim have to prove to win a strict liability case against a software company? The product was defective. In a strict liability case, the victim does not need to prove vendor negligence.  </p> <p>Which two things should a government contractor ensure to defend against a strict liability case? The software is developed based on strict specifications. and The contractor warned the agency of defects. </p> <p>A government agency asks an outside company to develop an application based on a specific set of criteria. Deviations from the specifications are not allowed. During static and dynamic testing, flaws are discovered in the application. What should the company do to avoid losing a strict liability lawsuit? Advise the client of the defects </p> <p>Which two things could happen if a person\u2019s electronic health record (EHR) is compromised? The person could receive bills for procedures the person never had. The person could be given the wrong medication. </p> <p>An organization is integrating AI to improve decision-making processes using predictive analytics. What should they focus on to prevent unauthorized access to the data and maintain data integrity? Implement data access controls and audit trails to monitor and secure data access. Data access controls and audit trails help monitor, secure, and maintain the integrity of the data.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#ethics-of-it-organizations-section-5-module-11","title":"Ethics of IT Organizations, Section 5, Module 11","text":"<p>Executive Order 11246, which was signed by President Lyndon B. Johnson in 1965, states that \u201cIt is the policy of the Government of the United States to provide equal opportunity in Federal employment for all qualified persons, to prohibit discrimination in employment because of race, creed, color, or national origin, and to promote the full realization of equal employment opportunity through a positive, continuing program in each executive department and agency. The policy of equal opportunity applies to every aspect of Federal employment policy and practice.\u201d  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#use-of-contingent-workers","title":"Use of Contingent Workers","text":"<p>contingent work as a job situation in which an individual does not have an explicit or implicit contract for long-term employment</p> <p>professional employer organizations (PEOs)  </p> <p>In employee leasing, a business (called the subscribing firm) transfers all or part of its workforce to another firm (called the leasing firm), which handles all human resource-related activities and costs, such as payroll, training, and the administration of employee benefits. </p> <p>Employee leasing creates a coemployment relationship, in which two employers have actual or potential legal rights and duties with respect to the same employee or group of employees.</p> <p>A professional employer organization (PEO) is a business entity that coemploys the employees of its clients and typically assumes responsibility for all human resource management functions.</p> <p>EIN (Employer Identification Number)  </p> <p>The exact terms of the arrangement are specified in a client service agreement.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#the-gig-economy","title":"The Gig Economy","text":"<p>A gig as a \u201ca single project or task for which a worker is hired\u2014often through a digital marketplace\u2014to work on demand.\u201d  </p> <p>The gig economy refers to a work environment in which temporary positions are common and organizations contract with independent workers for short-term engagements.   </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#independent-contractors","title":"Independent Contractors","text":"<p>An independent contractor is an individual who provides services to another individual or organization according to terms defined in a written contract or within a verbal agreement. </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#h-1b-workers","title":"H-1B Workers","text":"<p>An H-1B visa is a temporary work visa granted by the U.S. Citizenship and Immigration Services (USCIS) for people who work in specialty occupations\u2014jobs that require at least a four-year bachelor\u2019s degree in a specific field, or equivalent experience.</p> <p>Even though companies applying for H-1B visas must offer a wage that is at least 95 percent of the average salary for the occupation, some companies use H-1B visas as a way to lower salaries.  </p> <p>Companies that employ H-1B workers are required to declare that they will not displace American workers. But companies are exempt from that requirement if 15 percent or more of their workers are on H-1B visas and the H-1B workers are paid at least $60,000 a year. Thus, H-1B workers at outsourcing firms often receive wages slightly above $60,000\u2014below what similarly skilled American technology professionals earn, allowing those firms to offer services to U.S. companies at a lower cost, undercutting U.S. workers.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#outsourcing","title":"Outsourcing","text":"<p>outsourcing is a long-term business arrangement in which a company contracts for services with an outside organization that has expertise in providing a specific function. </p> <p>offshore outsourcing is a form of outsourcing in which services are provided by an organization whose employees are in a foreign country. Any work done at a relatively high cost in the United States may become a candidate for offshore outsourcing\u2014not just IT work.</p> <p>The cost advantage for offshore outsourcing to India used to be 6:1 or more\u2014you could hire six Indian IT workers for the cost of one U.S. IT worker. The cost advantage is shrinking, and once it reaches about 1.5:1, the cost savings will no longer be much of an incentive for U.S. offshore outsourcing to India.  </p> <p>Statement on Standards for Attestation Engagements (SSAE)</p> <p>A successful SSAE No. 16 audit report demonstrates that an outsourcing firm has effective internal controls in accordance with the Sarbanes-Oxley Act of 2002.</p> <p>The International Standard on Assurance Engagements (ISAE) No. 3402, Assurance Reports on Controls at a Service Organization, was issued by the International Auditing and Assurance Standards Board (IAASB) and is the international counterpart to SSAE No. 16.</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#whistle-blowing","title":"Whistle-Blowing","text":"<p>whistle-blowing is an effort to attract public attention to a negligent, illegal, unethical, abusive, or dangerous act by an individual or organization. In some cases, whistle-blowers are employees who act as informants on their company, revealing information to enrich themselves or to gain revenge for a perceived wrong. </p> <p>The False Claims Act, also known as the Lincoln Law, was enacted during the U.S. Civil War to combat fraud by companies that sold supplies to the Union Army. War profiteers sometimes shipped boxes of sawdust instead of guns, for instance, and some swindled the Union Army into purchasing the same cavalry horses several times. When it was enacted, the act\u2019s goal was to entice whistle-blowers to come forward by offering them a share of the money recovered. Violators of the False Claims Act are liable for three times the dollar amount for which the government was defrauded. </p> <p>The qui tam (\u201cwho sues on behalf of the king as well as for himself\u201d) provision of the False Claims Act allows a private citizen to file a suit in the name of the U.S. government, charging fraud by government contractors and other entities who receive or use government funds.  A qui tam plaintiff can receive between 15 and 30 percent of the total recovery from the defendant, depending on how helpful the person was to the success of the case.  </p> <p>Steps for a whistle-blower to take: - Asess the seriousness of the situation - Begin documentation - Attempt to address the situation internally - Consider escalating the situation within the company - Assess the implications of becoming a whistle-blower - Use Experienced Resources to Develop an Action Plan - Execute the Action Plan - Live with the Consequences  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#green-computing","title":"Green Computing","text":"<p>green computing is concerned with the efficient and environmentally responsible design, manufacture, operation, and disposal of IT-related products:  </p> <p>Green computing has three goals:  </p> <ol> <li>reduce the use of hazardous material</li> <li>allow companies to lower their power-related costs, and</li> <li>enable the safe disposal or recycling of computers and computer-related equipment.</li> </ol> <p>Electronic Product Environmental Assessment Tool (EPEAT) is a system that enables purchasers to evaluate, compare, and select electronic products based on a total of 51 environmental criteria.</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#module-11-review","title":"Module 11 Review","text":"<p>A junior software engineer discovers a company conspiracy to defraud the government. She hacks into a senior engineer\u2019s workstation to preserve evidence and distributes that evidence to the press. How would her actions be characterized? Ethical/illegal. The junior engineer's actions could be considered ethical due to the intent to expose a conspiracy, but hacking into a workstation and distributing evidence without authorization is illegal.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#ai-section-5-module-12","title":"AI, Section 5, Module 12","text":""},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#video-ai-bias","title":"Video, AI Bias","text":"<p>AI Ethics: Understanding Bias and Fairness in Your Models</p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#ai-trust-3-core-components","title":"AI Trust 3 Core components","text":"<ul> <li>Understanding: define haxards and thresholds  </li> <li>Action: Guardrails to mitigate hazard liklihood &amp; severity  </li> <li>Explanations: Communicate ristk behaviors &amp; events, i.e. compliance documentation &amp; visualizations  </li> </ul> <p>Understanding: 14 defined measurements for the AI model - Performance     - Data Quality     - Accuracy     - Robustness     - Stability     - Speed - Operations     - Monitoring     - Compliance     - Security     - Humility     - Business Rules - Ethics     - Inaterpretability     - Bias/fairness     - Governance     - Social Impact Asessment  </p> <p>What are the sources of bias? Biased AI isn't doing anything wrong; it's exposing problems that already exist in human systems. Causes: - Skewed Sample: Skewed to a group that doesn't reflect the real world.   - Limited Features: Feature collection for certain groups may not be informative or reliable.   - Tainted Examples: Unreliable labels, historical bias.  - Sample Size Disparity - Proxies: Zip cod or scholl can be proxies for race. A sport can be a proxy for gender. </p> <p>How do you solve AI bias? - Laws and Regulations - Margin of Tolerance for Bias - Cost/Accuracy vs fairness tradeoff  </p> <ol> <li>Identify protected features in your dataset: race, color, gender,...    </li> <li>Select an appropriate \"fairness metric\" for your use case and value system: conditional statistical parity, false negative parity      </li> <li>Build insights to identify &amp; understand your mode's potential bias  </li> <li>Mitigate bias uncovered in your data or model  </li> </ol>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#book-automated-decision-making-system-bias","title":"Book, Automated decision-making system bias","text":"<p>Chapter 3.4 and Chapter 4.4 in Computing and Technology Ethics: Engaging Through Science Fiction.</p> <p>Bias is tightly bound with a concept of fairness and typically means an inclination  for or against some people, ideas, or things that result in treating them unfairly.  </p> <p>Algorithms have reproduced subjective bias in harmful ways, to include: - Predictive policing: police using analytics to anticipate where crimes are  more likely to be happening. - Weblining: alludes to \"redlining\", the practice of offering services such  as home loans or insurance on a selective basis. Make resources unavailable to persons  in poorer and minority areas. - Targeted Advertising: Retailers collect personal information to assist in  targeting the customer's shopping habbit and interest - Sentencing Software: Decides for a judge the parole of an offender. Blacks  were more frequently flagged as high-risk parole defendants. - Hiring and admissions: Hiring adds are placed on media platforms based on historical data.  Algorithms sort resumes and college applications.  </p> <p>All of the bias displayed in big data analytics replicated existing patterns of bias.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#module-12-review-questions","title":"Module 12 review questions","text":"<p>What does the term \u201cethics washing\u201d refer to in the context of automated decision-making systems? The development of new ethical guidelines for algorithm design. Developing ethical guidelines is an attempt to address ethical concerns, whereas \"ethics washing\" involves pretending that ethical issues have been resolved when they have not.  </p>"},{"location":"WGU_Notes/D333_Ethics_in_Tech/D333_ethics_in_tech/#section-5-review-questions","title":"Section 5 Review Questions","text":"<p>What is a result of adopting green computing? Safe recycling and disposal of computer equipment - Green computing reduces the use of hazardous materials, not the number of hazardous materials.</p> <p>Which certification is the global version of the Statement on Standards for Attestation Engagements (SSAE) No. 16? International Auditing and Assurance Standards Board (IAASB) - ISO 31000 is a standard for risk management. - EPEAT is a tool that helps buyers quickly evaluate and compare products.  </p> <p>How many consecutive years can an employer use an employee with an H-1B visa before the visa expires? 6 </p> <p>Which age does the Age Discrimination in Employment Act of 1967 start protecting people? 40 </p> <p>Which executive order prohibited employment discrimination based on race, creed, color, or national origin? Executive Order 11246 is about discrimination in employment. </p> <p>How can organizations avoid bias in their hiring practices? By identifying the protected features By selecting the proper fairness metric </p> <p>Which philosophy is doing what is morally correct instead of following a law? Deontology,Deontology says to do what is morally correct instead of following a law. - Altruists assume what is morally correct will help others. - Pluralism beliefs state that there can be multiple good ways to handle situations. - Egoism is people doing what is best for themselves.  </p> <p>What does data governance do in the context of ethics in artificial intelligence (AI)? It ensures data lineage, Ensuring data lineage is crucial for transparency and accountability, key elements of ethical AI practices. - Defining business rules is part of governance, but it doesn't specifically capture the ethical implications of data use in AI.</p> <p>Which two compromises should be considered when evaluating the fairness of artificial intelligence (AI) algorithms? Accuracy, Accuracy is critical in evaluating fairness, as biased algorithms can lead to incorrect outcomes that affect fairness.  Cost, Cost is an important compromise, as implementing fair AI often requires significant resources. </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/","title":"D336 ITIL","text":"<p>Dion Training practice exams CyberVista </p> <p>7,6,2,1 are the order of the most important chapters  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#service-value-system","title":"Service Value System","text":"<p>What describes.. is a question that leads to the SVS - Service Value Chain: flexible model for the creation, delivery, and  continual improvement of services     - Is the departments or people in an organization  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#key-concepts-of-service-management","title":"Key Concepts of Service Management","text":"<ul> <li> <p>1.1 Recall definition of: </p> <ul> <li>Service: facilitates outcomes for customer with limited cost to them  <ul> <li>The means of enabling value co-creation by facilitating outcomes that customers want to achieve without the customer having to manage specific costs and risks.  </li> </ul> </li> <li>Utility: What the service does  </li> <li>Warranty: How the service performs  </li> <li>Customer: Person who defines requirement for service  </li> <li>User: End user of services  </li> <li>Service Management: Set of specialized organizational capabilities for enabling value to customers in the form of services. (Like Microsoft providing email or drive for a company)    </li> <li>Sponsor: Person who authorizes budget for service  </li> </ul> </li> <li> <p>1.2 Describe key concepts of creating value with services:  </p> <ul> <li>Cost: Amount spent     </li> <li>Value: PERCEIVED benefits, usefulness, or importance  </li> <li>Organization: Person or group with its own functions  </li> <li>Outcome: Result for stakeholder (The outcome of the output below is that emails are sent and communication is enhanced)      </li> <li>Output: Deliverable of an activity (You are given a product, like email service)  </li> <li>Risk: Possibile events that could cause harm or loss    </li> <li>Utility: Functionality to meet a need (An airconditioner will cool 5,000sqf)     </li> <li>Warranty: Assurance that requirements will be met (The airconditioner is lowering the temp in a 4,000 sqf room)    </li> </ul> </li> <li> <p>1.3 Describe key concepts of service relationship:  </p> <ul> <li>Service offering (The offer of the provision)<ul> <li>A formal description of one or more services, designed to address the needs  of a target consumer group.  Aservice offering may include goods, access to resources,  and service actions.  </li> </ul> </li> <li>Service relationship management (Usually the negotiations of all this)   </li> <li>Service provision (The person offering)    </li> <li>Service consumption (Who is receiving the offer)    </li> </ul> </li> </ul> <p> </p> <ul> <li> <p>Guiding principles: </p> <ul> <li>create the organization's culture  </li> <li>Comman principles across organization  </li> </ul> </li> <li> <p>Governance  </p> <ul> <li>organization align operations with stategic direction  </li> </ul> </li> </ul> <p>Four dimensions of Sevice Management:     - Organizations and people     - Information and technology     - partners and suppliers     - value streams and processes  </p> <p>Value: the percieved benefits, usefulness, and importance of something - Values is subject to perception of the stakeholders  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#value-co-creation","title":"Value co-creation","text":"<p>Mono-directional: a provider delivers the service without involvement of the consumer on the creation of the service  </p> <p>Stake holders and consumers need to provide feedback to help build the service  </p> <p>Stakeholders involved in value co-creation: - Organization  </p> <p>Service Consumption involves: - Customer: role that defines the requirements for a service and takes  responsibility for the outcomes of service consumption. The person negotiating the contract.     - Users: the person using the service from the contract - Sponsors  </p> <p> </p> <p>Services: A means of enabling value co-creationg by facilitation outcomes that customers  want to achieve, without the customer having to manage specific costs and risks. Product: A configuration of an organization's resources designed to offer  value for a customer.  </p> <p>Service offerings are a specific mix of services and products sold ot a specific customer. Service offerings can be under the control of: - Prividers gives control to consumer (Goods)   - (Access to resources) Provider keeps control of service, but grants access to consumer - Service actions performed to address needs of consumer on demand ( customer service, patch updates, for a good that was purchased)  </p> <p> </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#service-relationships","title":"Service Relationships","text":"<p>Service relationships are established between two or more organizations to co-create  value. In a service relationship, organizations will take on the orles of service  providers or service consumers. The two roles are not mutually exclusive, and  organizations typically both provide and consume a number of services at any given time.  </p> <p>Service Relationship: A cooperation between a service provider and service  consumer. Service relationships include service provision, service consumption, and  service relationship management. Service provision: Activities performed by an organization to provide services. - management of the provider's resources, configured to deliver the service - ensuring access to these resources for users - fulfillment of the agreed service actions - service level management and continual improvement - may also include the suppling of goods  </p> <p>Service consumption: Activities performed by and organization to consume services. - management of the consumer's resources needed to use the service - service actions performed by users, including utilizing the provider's resources, and  requesting service actions to be fulfilled - may also include the receiving of goods Service relationship management: Joint activities performed by a service provider and a service consumer to ensure continual value co-creation based on agreed and available service offerings.  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#value-outcomes-costs-risks","title":"Value: outcomes, costs, risks","text":"<p>The resources needed to provide services have cost. This equates to risk. </p> <p>Output: A tangible or intangible deliverable of an activity. Outcome: A result for a stakeholder enabled by one or more outputs. BRM (Business Relationship Manager): </p> <p>Two types of costs from a consumer's perspective in service relationship: - cost removed from consumer by service - Cost imposed on the consumer by service  </p> <p>Risk: a possible event that could cause harm or loss, or make it more difficult  to achieve objectives. Can also be defined as uncertainty of outcome, and can  be used in the context of measuring the probability of positive outcomes as well as  negative outcomes. - Risks removed from consumer by teh service - Risks imposed on the consumer by the service The provider manages the detailed level of risk on behalf of the consumer.  </p> <p>The consumer contributes to the reduction of risk through:  - Actively participating in the definition of the requirements of the service - clear communication of the critical success factors (CSF) and constraints - ensuring the provider has access tot he necessary resources  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#utility-and-warranty","title":"Utility and Warranty","text":"<p>Utility and Warranty ensure consumers get their expected outcome.  </p> <p>Utility: the functionality offered by a product or service to meet a particular  need. Utility can be summarized as 'what the servie does' and can be used to  determine whether a service is 'fit for urpose'. To have utility, a service must either support the performance of the consumer or remove constraints from the consumer. Many services do both.  </p> <p>Warranty: assurance that a product or service will meet agreed requirements. Warranty can be summarixed as 'how the service performs' and can be used to  determine whether a service is 'fit for use'. Warranty often relates to service levels  aligned with the needs of service consumers.  This may be based on a formal agreement, or it  may be marketing message or brand image.  Warranty typically addresses such areas as  the availability of the service, its capacity, levels of security and continuity. A service may be said to provide acceptable assurance, or 'warranty', if all defined  and agreed conditions are met.  </p> <p>These two equal expected value Utility is getting from point A to point B. Warranty is HOW to get from point A to point B.</p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#video-2","title":"Video 2","text":""},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#itil-7-guiding-principles","title":"ITIL 7 Guiding Principles","text":"<p>Allows organizations to integrate them into an overall approach to service management. Engourage and support organizations in continual improvement.   Use the principles that are relevant to the situation.  </p> <ol> <li>Focus on Value </li> <li>all activities conducted by an organization should link back - directly or  indirectly - to value for its customers, for its stakeholders, and for the organization itself.   </li> <li>What gives the most customer satisfaction  </li> <li>What brings customers back to you  </li> <li>Start where you are  </li> <li>consider what is already available instead of starting from scratch  </li> <li>Progress iteratively with feedback  </li> <li>break down the work into manageable components that can be executed  iteratively to accomplish the objective  </li> <li>Collaborate and promote visibility  </li> <li>efforts benefit from better buy-in  </li> <li>better information is available for decision making  </li> <li>Creative solutions, enthusiastic contributions, and important perspectives  </li> <li>Involve the right people at the right time and gather factual data to make the right decisions.  can be obtained from unexpected sources  </li> <li>inclusion is generally a better policay than exclusion   </li> <li>Think and work holistically  </li> <li>no service, practice process, department, or supplier stands alone  </li> <li>Think as a whole  </li> <li>Keep it simple and practical  </li> <li>use the minimum number of steps necessary to accomplish an objective  </li> <li>Optimize and automate  </li> <li>organizations should streamline activities and automate work, so that minimal human  intervention is required.  </li> </ol>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#four-dimensions-of-service-management","title":"Four dimensions of service management:","text":"<p>VOIP, like voice over ip 1. Organizations and people 2. Information and technology 3. Partners and suppliers 4. Value streams and processes   </p> <p> </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#partners-and-suppliers","title":"Partners and Suppliers","text":"<p>Factors that may influence an organization's stategy when using suppliers: - Stategic focus: may outsource non-core supporting functions - Corporate culture: longstanding cultural bias - Resource scacity: - Cost concern: - Subject matter expertise: - External constraints: - Demand patterns:  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#value-streams-and-processes","title":"Value Streams and Processes","text":"<ul> <li>A value stream is a series of steps undertaken by and organization to create  and deliver products and services to consumers. It's implemented as a combination  of the organization's value chain activities.  </li> <li>A process descibes what is done to accomplish an objective. Inputs into outputs.</li> <li>Activities the organization undertakes      </li> </ul> <p>Service value chain: converts demand into value, can be used for mapping value streams    - Plan: ensures shared understanding of vision, current status and direction   - Improve: continual improvment of products and services   - Engage: understand stakeholder needs and demands   - Design and Transition: make sure that services meet stakeholder needs   - Obtain/Build: ensure components are available when needed   - Deliver and Support: ensure sla comform service delivery</p> <p></p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#external-factors-pestle","title":"External factors (PESTLE)","text":"<ul> <li>Political  </li> <li>Economic  </li> <li>Social  </li> <li>Technological  </li> <li>Legal  </li> <li>Environmental </li> </ul>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#organizations-and-people","title":"Organizations and People","text":"<ul> <li>Roles and responsibilities  </li> <li>Formal organizational structure  </li> <li>Culture  </li> <li>Staffing and competencies  </li> </ul>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#information-and-technology","title":"Information and Technology","text":"<ul> <li>Information created, managed, and used in the course of service provision and consumption  </li> <li>Technologies that support and enable that service  </li> </ul>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#partners-and-suppliers_1","title":"Partners and Suppliers","text":"<ul> <li>Some organizations might believe they can be best served by focusing their attention  on developing core competencies, using partners and suppliers to provide other  needs.  </li> <li>Other organizations might rely on their own resources, thus using partners and  suppliers as little as necessary. Both these approaches represent extremes.  </li> </ul>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#service-value-chain-svc","title":"Service Value Chain (SVC)","text":"<ul> <li>It is an operating model  </li> <li>Outlines activities needed to transform demand into value  </li> <li>Universally applicable  </li> <li>Can be used for mapping value streams  </li> <li>practices include specific sequences of SVC activities  </li> </ul> <p>Value chain activity (persons and departments): PIE-DOD  - Plan - Imporve - Engage - Design and Transition - Obtain/Build - Deliver and Support  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#engage-sales-representative","title":"Engage (Sales representative)","text":"<p>Provide a good understanding of relationships with all stakeholders. Key inputs to the Engage Activity: - A product and service portfolio provided by plan - High-level demand for services and products provided by internal and external customers - Detailed requirements for services and products provided by customers - Request and feedback from customers - Incidents, service requests, and feedback from users - Information on the completion of user support tasks from deliver and support - Marketing opportunities from current and potential customers and users - Cooperation opportunities and feedback provided by partners and suppliers  - Contract and agreement requirements from all value chain activities - Knowledge and information about new and changed products and services from design  and trasition and objtain/build - Knowledge and information about third-party service components from suppliers and partners - Product and service performance information from deliver and support  </p> <p>Key outputs of the Engage activity: - Consolidated demands and opportunities for plan - Product and service requirements for design and transition - User support tasks for delivery and support - Improvement opportunities and stakeholders feedback for improve - Change or project initiation requests for obtain/build - Contracts and agreements with external and internal suppliers and partners for design and transition  and obtain/build - Knowledge and information about third-party service components for all value chain activities - Service performance reports for customers  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#plan","title":"Plan","text":"<p>Shared understanding of the vision Key inputs to the plan activity are: - Policies, requirements, and constraints provided by the organization's governing body - Consolidated demands and opportunities provided by Engage - Value chain performance information, improvement status reports, and improvement initiatieves  from Improve - Knowledge and information about new and changed products and services from Design and Transition, and Obtain/Build - Knowledge and information about third-party service components from Engage  </p> <p>Key outputs to the plan activity: - Stategic, tactical, and operational plans - Portfolio decisions for Design and Transition - Architectures and policies for Design and Transition - Improvement opportunities for Improve - A product and service portfolio for Engage - Contract and agreement requirements for Engage  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#obtainbuild-goes-out-and-procures-stuff","title":"Obtain/Build (Goes out and procures stuff)","text":"<p>Service components are available when and where they are needed and that they meet  agreed specifications. The key inputs to the Obtain/Build activity are: - Architectures an policies provided by Plan - Contracts and agreements with external and internal suppliers and pertners provided  by engage - Goods and services provided by external and internal suppliers and partners - Requirements and specifications provided by Design and Transition  - Improvement initiatives provided by Improve - Improvement status reports from Improve - Change requests provided by Deliver and Support - Knowledge and Information about new and changed products and services from Desing and Transition - Knowledge and Information about third-party service components from Engage  </p> <p>The key Outputs: - Service components for Deliver and Suppoert - Service components for Design and Transition - Knowledge and Information about new and changed service components to all value chain activities - Contract and agreement requirement for Engage - Performance information and improvement opportunities for Improve  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#design-and-transition-the-developers","title":"Design and Transition (The developers)","text":"<p>Products and services meet expectations for quality, costs, and time to market. Key inputs: - Portfolio decisions provided by Plan - Architectures and policies provided by Plan - Product ans service requirements provided by Engage - Improvement initiatives provided by Improve - Improvement status reports from Improve - Service performance information provided b Deliver and Support and Improve - Service components from Obtain/Build - Knowledge and information About third-party service components from Engage - Knowledge and information about new and changed products and services from Obtain/Build - Contract and agreements with external and internal suppliers and partners provided  by Engage Key outputs: - Requirements and specifications for Obtain/Build - Contract and agreement requirements for Engage - New and changed products and services for Deliver and Support - Knowledge and information about new and changed products and services to all value  chain activities - Performance information and improvement opportunities for Improve  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#improve","title":"Improve","text":"<p>Continual improvement of products, services, and practices Key inputs: - Product and service performance information provided by Deliver and Support - Stakeholders' feedback provided by Engage - Performance information and improvement opportunities provided by all value chain activities - Knowledge and information about new and changed products and services from Design and Transition and Obtain/Build - Knowledge and information about third-party service components from Engage  </p> <p>Key outputs: - Improvement initiatives for all chain activities  - Value chain performance information for Plan and governing body - Improvement status reports for all value chain activities - Contract and agreement requirements for Engage - Service performance information for Design and Transition  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#service-value-system_1","title":"Service Value System","text":"<p>Service Value System (SVS): Describes how all the components and activities of the  organization work together as a system to enable value co-creation  </p> <ul> <li> <p>Require integration and coordination of activities, practices, teams,  authorities, and responsibilities.  </p> </li> <li> <p>Ensures continued co-create value  </p> </li> <li> <p>Engage: All incoming and outgoing interactions </p> </li> <li>All new resources are obtained through the obtain/build activity  </li> <li>Planning at all levels is performed via Plan activity  </li> </ul>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#continual-improvement","title":"Continual Improvement","text":"<p>Align the organization's practices and services with changing business needs through  the ongoing indentification and improvement of services, service components,  practices, or any element involved in the efficient and effective management of products and services.  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#practices","title":"Practices","text":"<p>Practice: set of organized resources designed for performing work or accomplishing  and objective  </p> <p>There are 34 of them, divided into 3 categories. - General Management. (14 practices) General management practices have been adapted  from wider business domain.     - Architecture management     - Continual improvement     - Information security     - Knowledge management     - Measurement and reporting     - Organization change management     - Portfolio management     - Project management     - Relationship management     - Risk management     - Service financial management     - Strategy management     - Supplier management     - Workforce and talent management - Service Management. (17 practices) Service management practices have been created/adapted  from the service management industry.     - Availability management     - Business analysis     - Capacity and performance management     - Change enablement     - Incident management     - IT asset management     - Monitoring and event management     - Problem management     - Release management     - Service catalog management     - Service configuration management     - Service continuity management     - Service design     - Service desk     - Service level management     - Service request management     - Service valication and testing - Technical Management. (3 practices) Technical functions which have been elevated to the  level of a service.     - Deployment Management     - Infrastructure and Platform Management     - Software Development and Management  </p> <p>Key inputs to the SVS are opportunity and demand. Opportunity represent options or ppossibilities to add value for stakeholders or  otherwise improve the organization. Demand is the need or desire for products and services among internal and external consumers.  </p> <p>Guiding Principles: Recommendations that can guide an organization in all  circumstances, regardless of changes in its goals, stategeries, type of work, or  management structure.  </p> <p>Governance: The means by which an organization is directed and controlled.  </p> <p>Service value chain: A set of interconnected activities that an organization performs  to deliver a valuable product or service to its consumers and to facilitate value  realization.  </p> <p>Practices: Sets of oranizational resources designed for performing work or  accomplishing an objective.  </p> <p>Continual improvement: A recurring organizational activity performed at all levels to ensure that an organization's performance continually meets stakeholders' expectations. ITIL 4 supports continual improvement with the ITIL continual Improvement model.  </p> <p>Organizational Silos: prevent easy access to information, resistant to change Organizational resilience: thrive in changing external circumstances. anticipate, prepare for, respond to changes and sudden disruptions.   Organizational agility: move and adapt quickly  </p> <ul> <li>Opportunity and demand trigger activities within SVS, lead to creation of value Opportunity: options or posibilities to add value for stakeholders. Demand: need or desire for service.  </li> </ul> <p>Guiding Principles: </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#focus-on-value","title":"Focus on value","text":""},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#agile-and-itil-together","title":"Agile and ITIL together:","text":"<ul> <li>streamlining practices such as change enablement  </li> <li>establishing procedures to incorporate and prioritize the management of unplanned interruptions (incidents), and to investigate the causes of failure.  </li> <li>separating interactions, if necessary, between systems of record (configuration  management database), needed to manage services from system of engagement (collaboration tools) used by software development teams.  </li> </ul> <p>DevOps: builds on agile, close collaboration between developement and technical  operations, use automation to free up time of skilled professionals to focus on  value-adding activities. Combines Agile for software development, ITIL for  value co-creation, improving the way value is generated with LEAN. - creating fast feedback loops - Streamlining value chain activities and value streams so that demand for work  can be quickly converted to value for multiple stakeholders. - differentiating deployment management from release management - advocating a 'system view' that emphasizes close collaboration between enterprise  governance, service teams, software development, and technology operations.  </p> <p>Customer experience (CX) is both objective and subjective.  </p> <p>Applying principles for achieving Focus on Value: - Know how service consumers use each service - Encourage a focus on value among all staff - Focus on value during normal operational activities as well as during improvment  initiatives - Include focus on value in every step of any improvement initiative  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#start-where-you-are","title":"Start Where you are","text":"<p>The role of measurement:  </p> <p>When a measurement becomes a target, it ceases to be a good measure, Goodhart's Law  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#progress-interatively-with-feedback","title":"Progress interatively with feedback","text":"<p>Benefits of Iteration and feedback together: - greater flexibility - faster responses to customer and business needs - the ability to discover and respond to failure - overall improvement in quality  </p> <p>To apply this principle: - Comprehend the whole, but do something. Don't fall to 'analysis paralysis' - The ecosystem is constantly changing, so feedback is essential - Fast does not mean incomplete  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#collablorate-and-promote-visibility","title":"Collablorate and promote visibility","text":"<p>Discuss important issues/tasks, not talking about them can appear that they are not  important. Critical analysis of: - understanding flow of work in progress - identifying bottlenecks, as well as excess capacity - uncovering waste  </p> <p>Advice for this principle: - collaboration does not mean consensus - Communicate is a way the audience can hear - Decisions can only be made on visible data  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#think-about-work-holistically","title":"Think about work holistically","text":"<p>Applying this principle: - Recognize the complexity of the systems - Collaboration is key to thinking and working holistically - Where possible, look for patterns in the needs of and interactions between  system elements - Automation can facilitate working holistically  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#keep-it-simple-and-practical","title":"Keep it simple and practical","text":"<p>Always use the minimum steps to accomplish an objective.  </p> <p>Applying this value: - Ensure value - Simplicity is the ultimate sophistication - Do fewer things, but do them better - Respect the time of the people involved - Easier to understand, more likely to adopt - simplicity is the best route to achieving quick wins  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#optimize-and-automate","title":"Optimize and automate","text":"<p>Make something as effective and useful as it needs to be. Steps to optimization: - Understand and agree the context in which the proposed optimization exists. - Assess the current state of the proposed optimization - Agree what the future state and priorities of the organiztion should be, focusing on simplification and value. - Ensure the optimization has the appropriate level of stakeholder engagement and commitment. - Execute the improvements in an iterative way. - Continually monitor the impact of optimization.  </p> <p>Steps to automation: - simplify and/or optimize before automating - Define your metrics - Use the other guiding principles when applying this one.     - Progress iteratively with feedback     - Keep it simple and practical     - Focus on value     - Start where you are   </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#videos","title":"Videos","text":""},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#continual-improvement_1","title":"Continual Improvement","text":"<p>Ongoing improvement of products, services, and practices, or any element involved  in management of products and services.  </p> <p>Continual Improvement Model: - Provides approach for continual improvement - Applies to SVS in its entirety - Supports iterative approach - Improvement efforts linked to organization's vision  </p> <p> </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#change-enablement","title":"Change Enablement","text":"<p>Maximize the number of successful changes through proper risk assessment and minimize  the negative impact of failed changes Types: - Standard: Pre-authorized, low risk, low cost, basically Service Request. No additional authorization.   - Normal: authorization depends on what kind of change it is. Goes through the normal  change workflow. Authorization based on change type.   - Emergency: needs rapid action. May have a separate change authority  </p> <p>Imporve: Many improvements will require changes to be made, and these should  be assessed and authorized in the same way as all other changes. Design and transition: Many changes are initiated as a result of new or  changed services. Change control activity is a mahor contributor to transiton. Obtain/build: Changes to components are subject to change control, whether  they are built in house or obtained from suppliers. Deliver and Support: Changes may have an impact on delivery and support, and  information about changes must be communicated to personnel who carry out this value  chain activity. These people may also play a part in assessing and authorizing changes.  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#incident-management","title":"Incident Management","text":"<p>Minimize negative impact of incidents by restoring normal operation as soon as  possible.  </p> <p>Incident: unplanned interruption or reduction of quality. Must be logged, prioritized  and managed through their lifecycle. Uses same categorization as Problem Tickets.  Swarming may help with complex issues. Normal is defined in the SLA.   Major Incidents: need a separate procedure. Swarming can be used for quicker  solutions.  </p> <p>Imporvement: Incident record are a key input to improvement activities, and are  prioritized both in terms of incident frequency and severity. Engage: Incidents are visible to users, and significant incidents are also visible  to customers.  Good incident management requires regular communication to understand  the issues, set expectations, provide status updates, and agree that the issue has  been resolved so the incident can be closed. Design and transition: Incidents may occur in test environments, as well as  during service release and deployment. The practice ensures these incidents are resolved  in a timely and controlled manner. Obtain/build: Incidents may occur in development environments. Incident management  practice ensures these incidents are resolved in a timely and controlled manner. Deliver and support: Incident management makes a significant contribution to  support. THis value chain activity includes resolving incidents and problems.  </p> <p>Swarmming!! </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#problem-management","title":"Problem Management","text":"<p>Reduce likelihood of recurring incidents by identifying actual and potential  causes of incidents, manages workarounds and known errors.  </p> <ul> <li>Problem: unknown cause of one or more incidents  </li> <li>Known Error: a problem with a known root cause but no solution yet  </li> <li>Workaround: alternate solution, reducing the impact of the problem</li> </ul> <p>Phases: problem identification =&gt; problem control =&gt; error control  </p> <p>Imporve: This is the main focus area for problem management. Effective problem  management provides the understanding needed to reduce the number of incidents and  the impact of incidents that can't be prevented. Deliver and support: Problem management makes a significant contribution by  preventing incident repetition and supporting timely incident resolution. Engage: Problems that have a significant impact on services will be visible to  customers and users. In some cases, customers may wish to be involved in problem  prioritization, and the status and plans for managing problems should be communicated. Workarounds are often presented to users via a serviceportal.  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#service-desk","title":"Service Desk","text":"<p>Capture demand for incidents and service requests. Single point of contact between  service provider and users.  </p> <p> SPOC: single point of contatct </p> <p>A service desk: - has a practical understanding of the wider, organization, the business processes, and the  users. - have a major influence on the user experience and how the service provider is  perceived.  </p> <p>What services should a good service desk deliver: - Add value by understanding and acting on the business actions - Should provide empathetic and informed links between the service provider and its  users.  </p> <p>What skills should service desk staff have? - exellent customer service skills - empathy - incident analysis and prioritization - effective communication - emotional intelligence  </p> <p>Engage: service desk is the main channel for tactical and operational engagement with users. Deliver and support: The service desk is the coordination point for managing incidents and servic requests. Design and transition: provides a channel for communicating with users about new  and changed services. Service desk staff participate in release planning, testing,  and early life support. Improve: activities are constantly monitored and evaluated to support continula  improvement, alignment, and value creation. Feedback from users is collected by the  service desk to support continual improvement.  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#service-level-management","title":"Service Level Management","text":"<p>To set clear business-based targets for service performance, so that the delivery of a service can be measured properly  </p> <ul> <li>SLA: agreement between customer and service provider  </li> <li>OLA(operational level agreements): agreement between different units of the same organization  </li> <li>UC(Underpinning Contracts): agreement between service provider and external supplier  </li> </ul> <p>Recommendations: - clear language, no jargon - simply written, easy to understand - Should relate to defined outcomes - Listen actively to customer needs  </p> <p>Plan: supports planning of the product and service portfolio and service offerings  with information about the actual service performance and trends. Engage: ensures ongoing engagement with customers and users through geedback processing  and continual service review.  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#service-request-management","title":"Service Request Management","text":"<p>To support the agreed quality of services by handling all pre-defined, user-initiated  service requests.  </p> <p>Service Request: a formal request for something other than incident resolution  (information, advice, how-to questions)  </p> <p>Steps to fulfill requests should be well known (for both simple and complex requests)  When defining new workflows, try to reuse already existing ones. User expectations must be managed in regards of what can be delivered  </p> <ol> <li>Steps should be well known and proven, agree times for fulfillemnt, and provide clear communication  of the status.  </li> <li>Requests and their fulfilment should be standardized and automated to the greatest  degree possible.  </li> <li>Policies should be established regarding what service requests will be fulfilled with  limited or even no additional approvals so that fulfilment can be streamlined.  </li> <li>Expectations of users regarding times clearly set, based on what organiztion can  realistically deliver.  </li> <li>Opportunities for improvement identified and implemented to produce faster fulfillment  times and benefit from automation.  </li> </ol> <p>Policies and workflows included for documenting and redirecting any requests  submitted as service requests, but which should actually be managed as incidents or changes.  </p> <p>Request Examples: - Report - Toner cartridge - Office hours - Phone - Laptop - Access to files - Feedback - Compliments  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#information-security-management","title":"Information Security Management","text":"<p>Protects information needed by organizations to conduct business.   </p> <p>Ensures appropriate levels of: - Confidentiality - Integrity - Availability - Authentication - Non-repudiation  </p> <p>Protect the information needed by the organization to conduct its business.  This  includes understanding and managing risks to the confidentiality, integrity, and  availability of information, as well as other spects of information security  such as authentication (ensuring someone is who they claim to be) and nonrepudiation  (ensuring that someone can't deny that they took an action). - Prevention: ensuring security incidents do not occur - Detection: Rapidly and reliably detecting incidents that can't be prevented - Correction: Recovering from incidents after they are detected.  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#relationship-management","title":"Relationship Management","text":"<p>Establishes and nurtures links between organizations and stakeholders at strategic and  tactical levels. Makes sure we find the best possible ways to communicate and collaborate with different  internal and external stakeholders.  </p> <p>Relationships are identified =&gt; Analyzed =&gt; Monitored =&gt; Improved  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#supplier-management","title":"Supplier Management","text":"<p>Ensures that suppliers of the organization and their performances are managed  to support seamless service provision to customers.  </p> <p>The goal is to make sure \"we get what we paid for\" from our vendors and suppliers.  </p> <p>Agreements and contracts are made in the form of UCs (Underpinning Contracts). </p> <p>Includes creating closer, more collaborative relationships with key  suppliers to uncover and realize new value and reduce the risk of failure.  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#it-asset-management","title":"IT Asset Management","text":"<p>Assets that have monetary value. Plans and manages the full lifecycle of IT assets to: - Maxamize their value - Control their costs - Support decisions about reusing or purchasing new assets  </p> <p>IT Asset: any financially valuable component that can contribute to the  delivery of IT products or services.  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#monitoring-event-management","title":"Monitoring &amp; Event Management","text":"<p>Observes services and components and records changes in their state. Identifies  those events, categorizes them and establishes standard responses.  </p> <p>Systematically observes services an service components. Records and reports selected changes  of state identified as events. Identifies and prioritizes infrastructure, services, business processes, and  information security events.  Establish the appropriate reponse to those events,  including to conditions that could lead to potential faults or incidents.   </p> <p>Event: any change of state that has a significance for the management of  a configuration item or service.  </p> <p>Types: Informational, Warning, Exception  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#release-management","title":"Release Management","text":"<p>Makes new and changed services and features available for use.  </p> <p>Release: a version of a service or other configuration items, or a collection of  configuration items, that is made available for use.  </p> <p>Releases have been disconnected from deployments with canary/dark release (Canary/dark release is pushing something to production, but not showing it to end users. Some sort of toggle exists for using it)  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#service-configuration-management","title":"Service Configuration Management","text":"<p>Ensures accurate information is available when needed about services, configuration  items and their relationships.  </p> <p>**Configuration Item (CI): any component that needs to be managed to deliver an IT  service.  </p> <p>Configuration Management Database (CMDB): a database or collection of databases  holding CIs and their connections. CMS (Configuration Management System): a frontend / user interface for CMDBs  </p>"},{"location":"WGU_Notes/D336_Business_IT/D336_business_it/#deployment-management","title":"Deployment Management","text":"<p>Moves new or changed hardware, software documentation or any other components from  one environment to the next. Move to a live environment.  With the help of DevOps we can reach continuous delivery, where the developer  build the change in DEV, which is automatically tested and moved to the next environment  until it arrives in PROD. Deployment is not equal to Release.  </p>"},{"location":"WGU_Notes/D387_Advanced_Java/D387_Advanced_Java/","title":"D387 Advanced Java","text":""},{"location":"WGU_Notes/D387_Advanced_Java/D387_Advanced_Java/#docker","title":"Docker","text":""},{"location":"WGU_Notes/D387_Advanced_Java/D387_Advanced_Java/#parts","title":"Parts","text":"<ul> <li>Docker Daemon - program that builds Docker Images and runs and distributes  Docker Containers  </li> <li>Docker Image - templage for creating a Docker Container  </li> <li>Docker Container - running instance of an image, containing an application, a filesystem, and any configuration files or software needed  </li> <li>Docker Client - program that runs commands in a console, used to interact with the Docker Daemon  </li> <li>Dockerfile - file that contains instructions for building a Docker image  </li> <li>registry - stores Docker images  <ul> <li>A Docker image build on a ceveloper's computer cannot be used to create  containers on other computers without a registry. </li> <li>Docker Hub - popular registry where developers can create public or private  repositories that house Docker Images  </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D387_Advanced_Java/D387_Advanced_Java/#commands","title":"Commands","text":"<ul> <li><code>build</code> - Builds an image from a Dockerfile  </li> <li><code>run</code> - Creates and runs an image in a container. The options <code>--name</code>  names the container, and <code>-d</code> runs the container in the background  </li> <li><code>stop</code> - Stops the running container  </li> <li><code>ps</code> - Lists currently running containers or all containers with <code>-a</code> option  </li> <li><code>rm</code> - removes a container  </li> <li><code>images</code> - Lists images  </li> <li><code>--help</code> - shows help information  </li> <li>Mapping the Docker Host port to your Container port: <ul> <li><code>docker run -p 27017:27017 -d mongo</code> </li> </ul> </li> <li>Viewing the docker images layer ids: <ul> <li><code>docker images -q --no-trunc</code> shows the list of full ids  </li> <li><code>docker images</code> shows the first 12 characters of the ids  </li> </ul> </li> <li><code>logs</code> <ul> <li>Check the logs for a container with <code>docker logs containerId</code> </li> <li>So if a container fails to launch, you can check the logs for it's failure  </li> </ul> </li> <li>Shell into a running Container<ul> <li><code>docker exec -it &lt;container name&gt; bash</code> </li> </ul> </li> <li>Tail the console output of a running coker container  <ul> <li><code>docker logs -f &lt;container name&gt;</code> </li> </ul> </li> <li>Share storage on the host system with a docker container  <ul> <li><code>docker run -v &lt;my host path&gt;:&lt;the container path&gt; &lt;image name&gt;</code></li> </ul> </li> <li>Specify an environment variable for a docker container  <ul> <li><code>docker run -e MY_VAR=my_prop &lt;image name&gt;</code></li> </ul> </li> </ul>"},{"location":"WGU_Notes/D387_Advanced_Java/D387_Advanced_Java/#registry-commands","title":"Registry Commands","text":"<ul> <li><code>login</code> - Logs the user into Docker Hub  </li> <li><code>tag</code> - Create a target image tag that refers to a source image  <ul> <li>the full registry tag name is: registry.hub.docker.com/[username?]/[repository]:[tag]  </li> <li>Ex: registry.hub.docker.com/mongo:latest  </li> </ul> </li> <li><code>push</code> - Copies an image to a repository  </li> <li><code>pull</code> - Copies an image from a repository  </li> </ul>"},{"location":"WGU_Notes/D387_Advanced_Java/D387_Advanced_Java/#housekeeping","title":"Housekeeping","text":"<ul> <li>Cleaning up a Container  <ul> <li>Kill all running containers: <code>docker kill $(docker ps -q)</code> </li> <li>Delete all Stopped Docker Containers: <code>docker rm $(docker ps -a -q)</code> </li> </ul> </li> <li>Cleaning up Images  <ul> <li>Remove a Docker Image: <code>docker rmi &lt;image name&gt;</code> </li> <li>Delete Untagged (dangling) Images: <code>docker rmi $(docker images -q -f dangling=ture)</code> </li> <li>Delete All Images: <code>docker rmi $(docker images -q)</code> </li> </ul> </li> <li>Cleaning up Volumes<ul> <li>Once a volume is no longer associated with a container, it is considered 'dangling'.  </li> <li>Remove all dangling volumes:  <ul> <li><code>docker volume rm $(docker volume ls -f dangling=true -q)</code> </li> <li>Does not remove files from host system in shared volumes.  </li> </ul> </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D387_Advanced_Java/D387_Advanced_Java/#commands-for-setting-up-centos-image","title":"Commands for setting up CentOS image","text":"<p>CentOS is the free version of RedHat. Enterprises may have you using RedHat for the support, so CentOS is a free way to practice.  </p> <ul> <li><code>docker run -d centos</code><ul> <li>Docker containers run until the last command. CentOS wasn't given a command  so when you run <code>docker ps</code>, you won't see anything, CentOS is not running.  </li> <li>You can also check the log for CentOS's quick execution <code>docker logs &lt;container name&gt;</code> </li> </ul> </li> <li>Run CentOS with a never ending command so that it doesn't close  <ul> <li><code>docker run -d cenos tail -f /dev/null</code> </li> </ul> </li> <li>Shell into the running CentOS container, using the container name  <ul> <li>get the container name <code>docker ps</code> </li> <li><code>docker exec -it &lt;container name&gt; bash</code> </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D387_Advanced_Java/D387_Advanced_Java/#contents-of-a-sample-dockerfile-to-install-java","title":"Contents of a sample Dockerfile to install Java","text":"<p><pre><code>FROM centos  \n\nRUN yum install -y java \n// the -y is for agreeing to prompts. Not agreeing will cause the container to crash  \n\nVOLUME /tmp\n// This designates a storage location for persistant memory  \n\nADD /spring-boot-web-0.0.1-SNAPSHOT.jar myapp.jar  \nRUN sh -c 'touch /myapp.jar'  \n// This just updates the date of the file\nENTRYPOINT [\"java, \"-Djava.security.egd=file:/dev/ ./urandom\", \"-jar\", \"/myapp.jar\"]\n// This helps TomCat run faster\n</code></pre> - Build the Dockerfile     - <code>docker build -t &lt;filename?&gt; .</code></p> <ul> <li>Run the installed docker container  <ul> <li><code>docker run -d -p 8080:8080 spring-boot-docker</code> </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D387_Advanced_Java/D387_Advanced_Java/#use-apache-groovy-for-adding-variables-into-dockerfile","title":"Use Apache Groovy for adding variables into Dockerfile??","text":"<p>Learn how you can use Docker to supercharge your enterprise Java Development! Video 49  </p>"},{"location":"WGU_Notes/D387_Advanced_Java/D387_Advanced_Java/#push-container-to-cloud","title":"Push container to Cloud","text":"<p>These are notes from the WGU instructional video \"Hows to Deploy A Docker Container on AWS and Azure\"  </p> <ul> <li>The start of the video covers assigning the deployed port to a variable  </li> <li>A Docker file was already created  </li> <li>cd to the directory with the Dockerfile, enter the command: <ul> <li><code>docker build --tag &lt;desiredTagName&gt;</code> </li> </ul> </li> <li>Create a DockerHub account. You are allowed one private image in you free DockerHub account  </li> <li>You will have to create an access token for that one private image. This is done in DockerHub. (23:30)  </li> <li>To push the local image to DockerHub: (24:50)  <ul> <li><code>docker tag &lt;nameOfImage&gt; &lt;nameOfRepository&gt;/&lt;nameOfImage&gt;</code> </li> <li><code>docker push &lt;nameOfRepository&gt;/&lt;nameOfImage&gt;</code> </li> </ul> </li> </ul>"},{"location":"WGU_Notes/D387_Advanced_Java/D387_Advanced_Java/#deoploying-to-aws","title":"Deoploying to AWS","text":"<ol> <li>Log into AWS and set up an IAMs account <ul> <li>Search IAM (30:00)</li> <li>Select EC2 role from IAM dashboard</li> <li>Use SSM permissions   </li> </ul> </li> <li>Launch an EC2 Linux instance  </li> <li>Start a session and install docker (37:30) </li> <li>Pull your instance from Docker hub and deploy it in a container (38:50)   </li> </ol>"},{"location":"WGU_Notes/D387_Advanced_Java/D387_Advanced_Java/#deploy-to-azure","title":"Deploy to Azure","text":"<p>(44:20) 1. Log into Azure 2. Set up a management environment 3. Create a resource and choose Container App 4. Fill out the form and deploy (choose port 8080)  </p>"},{"location":"WGU_Notes/D387_Advanced_Java/D387_Advanced_Java/#cors","title":"CORS","text":"<p>Calling a third-party web API from the web browser requires a cross-origin HTTP request, since the web API is not hosted on the local website's web server. Two main techniques are used to make cross-origin requests:</p> <ul> <li>Cross-Origin Resource Sharing (CORS) is a W3C specification for how web browsers and web servers should communicate when making cross-origin requests.</li> <li>JSON with Padding (JSONP) is a technique to circumvent cross-origin restrictions by injecting"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/","title":"D480 Software Engineering and Quality Assurance","text":""},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#software-design","title":"Software Design","text":""},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#software-requirements","title":"Software Requirements","text":"<p>Referring to the requirements phase of the SDLC, requirements need to be  well-defined, clear, and measurable.  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#functional-requirements","title":"Functional Requirements","text":"<p>Define system or component function - Calcualtions - Data manipulation - Designed, coded, and tested  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#types","title":"Types","text":"<ul> <li>Transaction handling </li> <li>Business rules  </li> <li>Certification requirements  </li> <li>Reporting</li> <li>Administrative </li> <li>Authorization </li> <li>Audit  </li> <li>External Interface  </li> <li>Historical data management </li> <li>Legal and regulatory requirements  </li> </ul>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#non-functional-requirements","title":"Non-Functional Requirements","text":"<p>Behaviors and limitations.  Non-functional requirements cover HOW the functional  requirements are performed. EX: How quickly will the site load, how usable is the UI? Other names for non-functional requirements are constraints or quality attributes Usually the \"illities\" of a project, like usability and functionality.  Ensures compliance. Non-functional requirements can impact multiple systems. Functional requirements  can be more atomic to one system.  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#types_1","title":"Types","text":"<ul> <li>Performance and scalability  </li> <li>Portability and compatibility  </li> <li>Reliability, availability, and maintainability  </li> <li>Security  </li> <li>Localization  </li> <li>Usability  </li> </ul>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#comparing-fuctional-to-non-functional","title":"Comparing fuctional to Non-functional","text":""},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#modularity","title":"Modularity","text":"<p>Module = function Separate functions from each other, so that they test, run, and perform on their own. Encapsulated, internal workings are private.   Modules are exclusive responsibility, narrow and focused, no overlap/do not share  responsibility.  </p> <p>Mono-dependency: only used in once instance. Since it is only used for one case, it may not need to be modular.  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#coupling","title":"Coupling","text":"<p>Degree of interdependence between modules. How do modules perform separately?  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#data-coupling","title":"Data Coupling","text":"<p>Data coupling happens when different modules of a program communicate to each other by sharing data (passing data to each other). They usually do this by sending data through the parameters. This form of coupling is thought to be the best.   </p> <p>Tramp data: passing data into a module that is just being passed to the next  module without being used by the first.  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#stamp-coupling","title":"Stamp Coupling","text":"<p>Common data that two functions rely on. More closely connected.  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#control-cooupling","title":"Control Cooupling","text":"<p>One modules sends data that has direct influence over the receiving module. This  can mean the data shared is specific to the two methods.  If you see null passed  in as a parameter.  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#external-coupling","title":"External Coupling","text":"<p>Components are not dependent on eachother, but are dependent on an external source. Stronger form of coupling. Ex: modules are dependent on a database.  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#common-coupling","title":"Common Coupling","text":"<p>Tight coupling.  Modules share global data/variables.  Or reading and writing to  the same data in a database.  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#content-coupling","title":"Content Coupling","text":"<p>One module can modify data of another.  One module cannot exist without the other. Very tightly coupled.  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#design-cohesion","title":"Design Cohesion","text":"<p>Intra-dependency levels between module elements, how well the modules work together.  </p> <p> </p> <ul> <li>Functional Cohesion: add two numbers </li> <li>Sequential: one output from a module serves as the input for the next.  </li> <li>Communication cohesion: Has two elements within the module that act on the same input.  </li> <li>Prodedural Cohesion: elements in module that must happen in order, but are not  dependent on the input/output of the other. EX: print() on multiple lines.  </li> <li>Temporal cohesion: Tasks that happen at the same time, indirect dependency.  </li> <li>Logical cohesion: elements are only logically related. Database connections are  all combined into a database class because they interact with the database. But  they perform completely different functions, so should be put in separate modules.  </li> <li>Coindicental cohesion: a file called miscellaneous that has random functions  </li> </ul>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#software-product-vision","title":"Software Product Vision","text":"<p>Describes overall objective, explains the reason your product exists, and sets direction for future development.  </p> <ul> <li>Research  </li> <li>Create a Team  </li> <li>Define Core Product (MVP)  </li> <li>Validity  </li> <li>Refine and document  </li> </ul>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#product-vision-board","title":"Product vision board","text":"<p>Provides a board view of what you want your product to do and how it benefits the end users.  </p> <ul> <li>Vision statement  </li> <li>Target Group  </li> <li>Needs: What the needs this product fulfills. Why will people want this product.  </li> <li>Product: Important features, address the needs  </li> <li>Business goals: Why our organization should invest in building it.  </li> </ul>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#agile-scoping-tools","title":"Agile Scoping Tools","text":"<p>Consultive questioning and listenting to find the scope  </p> <ul> <li>Establish project requirements  </li> <li>Align Objectives  </li> </ul>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#scoping","title":"Scoping","text":"<ul> <li>Go into product backlog.  </li> <li>Epics: Large pieces of scope that will not fit in a single sprint. Work towards a specific need.      </li> <li>Stories: self-contained, fit in single sprint<ul> <li>Who wants it.</li> <li>What they want. </li> <li>Why they want it.  </li> </ul> </li> <li>Themes: larger than Epic or story. Intangible goals. A category.    </li> <li>Initiatives: Multiple epics.  Not a category, but the overall goal for epics.  </li> </ul>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#user-story-creation","title":"User Story Creation","text":"<p>Focus on the viewpoint of the enduser. Not technical. Not detailed.   Clarifies the reason for the requirement. Example:  <code>As a &lt;role&gt; I need.... So that....</code> Written in first person. The card as the following: - Unique story id - Short title - Story - Functional acceptance criteria - Non-functional acceptance criteria  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#three-cs","title":"Three Cs","text":"<p>lifecycle of the user story. - Added to a card and placed in backlog - Conversations over the userstory, written on card. - Confirmation that the story is complete  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#invest","title":"INVEST","text":"<p>When writing the story, follow:  - Independent - Negotiable - Valuable - Estimable - Small  - Testable  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#mvp","title":"MVP","text":""},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#definition-of-done-dod","title":"Definition of Done (DoD)","text":""},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#ux-design","title":"UX Design","text":"<p>UX Hierarchy: - Information Architecture - Visual Heirarchy  </p> <p>UX Consistency: - Standard patterns - Design Languages  </p> <p>UX Confirmation:  </p> <p>UX User Controls: - Navigation - Settings - Undo actions  </p> <p>UX Accessibility: - Color for visually impaired  </p> <p>Note: Use dedicated UX resources. UX teams can't be spread out, they need to be  one team. If the responsibility is spreadout, the UX will not be unified.  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#higher-order-testing","title":"Higher Order Testing","text":"<p>Chapter 6 of Myers, Sandler, and Badgett. (2011). The Art of Software Testing (3rd) Wiley.  </p> <p>Higher-order testing: Above module testing.</p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#design-phase","title":"Design Phase:","text":"<ol> <li> <p>Translate the program user's needs into a set of written requirements. These are the goals for the product.</p> </li> <li> <p>Translate the requirements into specific objectives by assessing feasibility, time, and cost, resolving conflicting requirements, and establishing priorities and trade-offs.</p> </li> <li> <p>Translate the objectives into a precise product specification, viewing the product as a black box and considering only its interfaces and interactions with the end user. This description is called the external specification.</p> </li> <li> <p>If the product is a system such as an operating system, flight-control system, database system, or employee personnel management system, rather than an application (e.g., compiler, payroll program, word processor), the next process is system design. This step partitions the system into individual programs, components, or subsystems, and defines their interfaces.</p> </li> <li> <p>Design the structure of the program or programs by specifying the function of each module, the hierarchical structure of the modules, and the interfaces between modules.</p> </li> <li> <p>Develop a precise specification that defines the interface to, and function of, each module.</p> </li> <li> <p>Translate, through one or more substeps, the module interface specification into the source code algorithm of each module.</p> </li> </ol> <p> </p> <ul> <li> <p>Requirements specify why the program is needed.</p> </li> <li> <p>Objectives specify what the program should do and how well the program should do it.</p> </li> <li> <p>External specifications define the exact representation of the program to users.</p> </li> <li> <p>Documentation associated with the subsequent processes specifies, in increasing levels of detail, how the program is constructed.</p> </li> </ul> <p>The design and testing cycles should be combined in a one-to-one relationship:   </p> <p>The advantages of this structure are that it avoids unproductive redundant testing and prevents you from overlooking large classes of errors.  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#function-testing","title":"Function Testing","text":"<p>Find descrpancies between the program and the external specification. Black-box activity, the earlier module-testing process achieved white-box testing.  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#system-testing","title":"System Testing","text":"<p>Compare the system or program to its original objectives. System testing is not limited to systems. If the product is a program, system testing is the process of attempting to demonstrate how the program, as a whole, fails to meet its objectives.</p> <p>System testing, by definition, is impossible if there is no set of written, measurable objectives for the product.  </p> <p>Design the system test by analyzing the objectives; formulate test cases by analyzing the user documentation. This has the useful side effect of comparing the program to its objectives and to the user documentation, as well as comparing the user documentation to the objectives  </p> <p>The person performing a system test must be capable of thinking like an end user</p> <p> </p> <p>Categories of Test Cases: - Facility: Ensure that the functionality in the objectives is implemented. - Volume: Subject the program to abnormally large volumes of data to process. - Stress: Subject the program to abnormally large loads, generally concurrent processing. - Usability: Determine how well the end user can interact with the program. - Security: Try to subvert the program's security measures. - Performance: Determine whether the program meets response and throughput requirements. - Storage: Ensure the program correctly manages its storage needs, both system and physical. - Configuration: Check that the program performs adequately on the recommended configurations. - Compatibility/Conversion: Determine whether new versions of the program are compatible with previous releases. - Installation: Ensure the installation methods work on all supported platforms. - Reliability: Determine whether the program meets reliability specifications such as uptime and MTBF. - Recovery: Test whether the system's recovery facilities work as designed. - Serviceability/Maintenance: Determine whether the application correctly provides mechanisms to yield data on events requiring technical support. - Documentation: Validate the accuracy of all user documentation. - Procedure: Determine the accuracy of special procedures required to use or maintain the program.</p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#acceptance-testing","title":"Acceptance Testing","text":"<p>comparing the program to its initial requirements and the current needs of its end users performed by the program's customer or end user and normally is not considered the responsibility of the development organization. the best way to do this is to devise test cases that attempt to show that the program does not meet the contract.  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#installation-testing","title":"Installation Testing","text":"<p>find errors that occur during the installation process.  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#test-planning-and-control","title":"Test Planning and Control","text":"<p>The components of a good test plan are as follows:</p> <ul> <li>Objectives The objectives of each testing phase must be defined.</li> <li>Completion criteria Criteria must be designed to specify when each testing phase will be judged to be complete. This matter is discussed in the next section.</li> <li>Schedules Calendar time schedules are needed for each phase. They should indicate when test cases will be designed, written, and executed. Some software methodologies such as Extreme Programming (discussed in Chapter 9) require that you design the test cases and unit tests before application coding begins.</li> <li>Responsibilities For each phase, the people who will design, write, execute, and verify test cases, and the people who will repair discovered errors, should be identified. And, because in large projects disputes inevitably arise over whether particular test results represent errors, an arbitrator should be identified.</li> <li>Test case libraries and standards In a large project, systematic methods of identifying, writing, and storing test cases are necessary.</li> <li>Tools The required test tools must be identified, including a plan for who will develop or acquire them, how they will be used, and when they will be needed.</li> <li>Computer time This is a plan for the amount of computer time needed for each testing phase. It would include servers used for compiling applications, if required; desktop machines required for installation testing; Web servers for Web-based applications; networked devices, if required; and so forth.</li> <li>Hardware configuration If special hardware configurations or devices are needed, a plan is required that describes the requirements, how they will be met, and when they will be needed.</li> <li>Integration Part of the test plan is a definition of how the program will be pieced together (e.g., incremental top-down testing). A system containing major subsystems or programs might be pieced together incrementally, using the top-down or bottom-up approach, for instance, but where the building blocks are programs or subsystems, rather than modules. If this is the case, a system integration plan is necessary. The system integration plan defines the order of integration, the functional capability of each version of the system, and responsibilities for producing \u201cscaffolding,\u201d code that simulates the function of nonexistent components.</li> <li>Tracking procedures You must identify means to track various aspects of the testing progress, including the location of error-prone modules and estimation of progress with respect to the schedule, resources, and completion criteria.</li> <li>Debugging procedures You must define mechanisms for reporting detected errors, tracking the progress of corrections, and adding the corrections to the system. Schedules, responsibilities, tools, and computer time/resources also must be part of the debugging plan.</li> <li>Regression testing Regression testing is performed after making a functional improvement or repair to the program. Its purpose is to determine whether the change has regressed other aspects of the program. It usually is performed by rerunning some subset of the program's test cases. Regression testing is important because changes and error corrections tend to be much more error prone than the original program code (in much the same way that most typographical errors in newspapers are the result of last-minute editorial changes, rather than changes in the original copy). A plan for regression testing\u2014who, how, when\u2014also is necessary.</li> </ul>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#test-completion-criteria","title":"Test Completion Criteria","text":""},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#the-independent-test-agency","title":"THe independent Test Agency","text":""},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#capability-maturity-model-integration-cmmi-framework","title":"Capability Maturity Model Integration (CMMI) Framework","text":"<p>Chapter 3 of Chapters and Sections of Kasse, T. (2008). Practical Insight into CMMI. (2nd ed.) Artech House Publishers.  </p> <p>CMMI provides a framework from which to organize and prioritize engineering, people,  and business activities.  </p> <p>It is all about improving processes.</p> <p>Stages of CMMI: </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#chapter-13-reviews-and-testing","title":"Chapter 13  Reviews and Testing","text":"<p>Peer reviews are human based testing. Why conduct reviews?: - Detect defects - Remove defects as close to the point of insertion as possible - Determine products progress/status - Identify potential improvements - Produce technical work of a more uniform and predictable quality. - Gain ownership by the project team. - Assist employees with cross-training - Reduce costs to build and maintain better products - Reduce development time. - Reduce testing cost and time. - Reduce total system maintenance cost dramatically.  </p> <p>The sooner a defect is found, the less it will cost to fix it.  </p> <ul> <li>Project manager reviews: usually weekly </li> <li>Milestone Reviews: meaningful points or dates.  </li> <li>Senior Management OVersight Reviews: Seniors own the project. They decide if more resources need to be allocated, or any other big decision.</li> <li>Peer Reviews: inspections, structured walkthroughs, technical reviews, buddy checks, circulation reviews  </li> </ul>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#full-stack-testing","title":"Full Stack Testing","text":"<p>Chapter 1 of Mohan, G. (2022). Full stack testing. O'Reilly Media, Incorporated.  </p> <p>Move Testing activities to the beginning of the SDLC so that it can produce high quality results. Shift testing left: </p> <p>Ten fullstack testing skills: </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#managing-bugs","title":"Managing Bugs","text":"<p>A bug record contains several important elements:</p> <ul> <li>An accurate description of the problem</li> <li>The browser/operating system being used</li> <li>Steps to repeat the problem</li> <li>What was expected versus what actually happened</li> <li>Error messages (with screenshots), if applicable </li> </ul> <p>The following information is what you need to properly report a bug:</p> <ul> <li>A brief but accurate description of the problem. It is important that this description includes how and under what circumstances the problem is occurring.</li> <li>The environment where the problem was discovered. This is important because the environment may have been a contributing factor to the problem. Without this information, you may not be able to reproduce the problem. Environment details include:<ul> <li>Operating system and version</li> <li>Browser and version</li> <li>Environment URL</li> </ul> </li> <li>Steps describing how to recreate the problem. This is important because the tester cannot always be present with the developer to describe how the problem was found. These steps provide the developer with the means to investigate the problem. Steps should be clear and provide any credentials that may be needed to recreate the issue.</li> <li>Expected vs. actual result. It is important for the tester to include the expected result to ensure there is a clear understanding of the functionality under test. A comparison of expected vs. actual result will inform the developer why the actual result was flagged as a problem.</li> <li>Error messages and screenshots, if possible. These are important because they provide visual representations of the problem. They can also sometimes offer additional clues as to where to start looking in the program.  </li> </ul>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#test-strategies","title":"Test Strategies","text":""},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#linkedin-test-strategy-doc","title":"LinkedIn Test Strategy Doc","text":"<ul> <li>Introduction: High level summary of the project. What testing and how it is carried out.  </li> <li>References  </li> <li>QA Deliverables  </li> <li>Test Management: test tools and environments  </li> <li>Scope of Testing: What types ot tests exist in the project. How much code each test convers. Who is responsible for the tests.  </li> </ul>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#usability-test","title":"Usability Test","text":"<p>Chapter 7 of Myers, Sandler, and Badgett. (2011). The Art of Software Testing (3rd) Wiley.</p> <p>User based, black-box method.  </p> <p>Considerations: - Has each user interface been tailored to the intelligence, educational background, and environmental pressures of the end user? - Are the outputs of the program meaningful, noninsulting to the user, and devoid of computer gibberish? - Are the error diagnostics, such as error messages, straightforward, or does the user need a PhD in computer science to comprehend them? For instance, does the program produce such messages as IEK022A OPEN ERROR ON FILE \u2018SYSIN\u2019 ABEND CODE=102? Messages such as these weren't all that uncommon in software systems of the 1970s and 1980s. Mass-market systems do better today in this regard, but users still will encounter unhelpful messages such as, \u201cAn unknown error has occurred,\u201d or \u201cThis program has encountered an error and must be restarted.\u201d - Programs you design yourself are under your control and should not be plagued with such useless messages. Even if you didn't design the program, if you are on the testing team, you can push for improvements in this area of the human interface. - Does the total set of user interfaces exhibit considerable conceptual integrity, an underlying consistency, and uniformity of syntax, conventions, semantics, format, style, and abbreviations? - Where accuracy is vital, such as in an online banking system, is sufficient redundancy present in the input? For example, such a system should ask for an account number, a customer name, and a personal identification number (PIN) to verify that the proper person is accessing account information. - Does the system contain an excessive number of options, or options that are unlikely to be used? One trend in modern software is to present to users only those menu choices they are most likely to use, based on software testing and design considerations. Then a well-designed program can learn from individual users and begin to present those menu items that they frequently access. Even with such an intelligent menu system, successful programs still must be designed so that accessing the various options is logical and intuitive. - Does the system return some type of immediate acknowledgment to all inputs? Where a mouse click is the input, for example, the chosen item can change color, or a button object can depress or be presented in a raised format. If the user is expected to choose from a list, the selected number should be presented on the screen when the choice is made. Moreover, if the selected action requires some processing time\u2014which is frequently the case when the software is accessing a remote system\u2014then a message should be displayed informing the user of what is going on. This level of testing sometimes is referred to as component testing, whereby interactive software components are tested for reasonable selection and user feedback. - Is the program easy to use? For example, is the input case-sensitive without making this fact clear to the user? Also, if a program requires navigation through a series of menus or options, is it clear how to return to the main menu? Can the user easily move up or down one level? - Is the design conducive to user accuracy? One test would be an analysis of how many errors each user makes during data entry or when choosing program options. Were these errors merely an inconvenience\u2014errors the user was able to correct\u2014or did an incorrect choice or action cause some kind of application failure? - Are the user actions easily repeated in later sessions? In other words, is the software design conducive to the user learning how to be more efficient in using the system? - Did the user feel confident while navigating the various paths or menu choices? A subjective evaluation might be the user response to using the application. At the end of the session did the user feel stressed by or satisfied with the outcome? Would the user be likely to choose this system for his or her own use, or recommend it to someone else? - Did the software live up to its design promise? Finally, usability testing should include an evaluation of the software specifications versus the actual operation. From the user perspective\u2014real people using the software in a real-world environment\u2014did the software perform according to its specifications?  </p> <p>You should establish practical, real-world, repeatable exercises for each user to conduct. Design these testing scenarios to present the user with all aspects of the software, perhaps in various or random order.  </p> <p>During each phase of the test, have observers document the user experience as they perform each task. When the test is complete, conduct an interview with the user or provide a written questionnaire to document other aspects of the user's experience, such as his or her perception of usage versus specification.</p> <p>In addition, write down detailed instructions for user tests, to ensure that each user starts with the same information, presented in the same way. Otherwise, you risk coloring some of the tests if some users receive different instructions.  </p> <p>A complete usability testing protocol usually involves multiple tests from the same users, as well as tests from multiple users. Why multiple tests from the same users? One area we want to test is user recall, that is, how much of what a user learns about software operation is retained from session to session.  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#data-gathering","title":"Data Gathering","text":"<ul> <li>Read aloud user actions  </li> <li>remote user testing  </li> <li>Questionnaire  </li> </ul>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#agile-testing","title":"Agile Testing","text":"<p>Chapter 9 of Myers, Sandler, and Badgett. (2011). The Art of Software Testing (3rd) Wiley.  </p> <p>Relies on automated testing  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#extreme-programing","title":"Extreme Programing","text":"<p>You can group the 12 core XP practices into four concepts:</p> <ul> <li>Listening to the customer and other programmers.</li> <li>Collaborating with the customer to develop the application's specification and test cases.</li> <li>Coding with a programming partner.</li> <li> <p>Testing, and retesting, the code base.</p> </li> <li> <p>Planning and requirements</p> </li> <li> <p>Marketing and business development personnel work together to identify the maximum business value of each software feature.</p> </li> <li> <p>Each major software feature is written as a user story.</p> </li> <li> <p>Programmers provide time estimates to complete each user story.</p> </li> <li> <p>The customer chooses the software features based on time estimates and business value.</p> </li> <li> <p>Small, incremental releases</p> </li> <li> <p>Strive to add small, tangible, value-added features and release a new code base often.</p> </li> <li> <p>System metaphors</p> </li> <li> <p>Your programming team identifies an organizing metaphor to help with naming conventions and program flow.</p> </li> <li> <p>Simple designs</p> </li> <li> <p>Implement the simplest design that allows your code to pass its unit tests. Assume change will come, so don't spend a lot of time designing; just implement.</p> </li> <li> <p>Continuous testing</p> </li> <li> <p>Write unit tests before writing the code module. Each unit is not complete until it passes its unit test. Further, the program is not complete until it passes all unit tests, and acceptance tests are complete.</p> </li> <li> <p>Refactoring</p> </li> <li> <p>Clean up and streamline your code base. Unit tests help ensure that you do not destroy the functionality in the process. You must rerun all unit tests after any refactoring.</p> </li> <li> <p>Pair programming</p> </li> <li> <p>You and another programmer work together, at the same machine, to create the code base. This allows for real-time code review, which dramatically facilitates bug detection and resolution.</p> </li> <li> <p>Collective ownership of the code</p> </li> <li> <p>All code is owned by all programmers.</p> </li> <li> <p>No single programmer is dedicated to a specific code base.</p> </li> <li> <p>Continuous integration</p> </li> <li> <p>Every day, integrate all changes; after the code passes the unit tests, add it back into the code base.</p> </li> <li> <p>Forty-hour workweek</p> </li> <li> <p>No overtime is allowed. If you work with dedication for 40 hours per week, overtime will not be needed. The exception is the week before a major release.</p> </li> <li> <p>On-site customer presence</p> </li> <li> <p>You and your programming team have unlimited access to the customer, to enable you to resolve questions quickly and decisively, which keeps the development process from stalling.</p> </li> <li> <p>Coding standards</p> </li> <li> <p>All code should look the same. Developing a system metaphor helps meet this principle.</p> </li> </ul>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#testing-internet-applications","title":"Testing Internet Applications","text":"<p>From chapter 10 of Myers, Sandler, and Badgett. (2011). The Art of Software Testing (3rd) Wiley.  </p> <p> </p> <p>Components of three tier architecture: - Web server: hosts the HTML website, also called the presentation tier   - Business layer:  houses the application server.  - Data source  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#presentation-layer-testing","title":"Presentation Layer Testing:","text":"<ul> <li>Fonts the same in each browser  </li> <li>Confirm all links work  </li> <li>Grammar and spelling  </li> <li>Defaults are initially loaded on page  </li> <li>User friendly  </li> </ul>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#data-tier-testing","title":"Data Tier Testing:","text":"<ul> <li>Meets performance goals  </li> <li>Verify data is accurate  </li> <li>Data can be recovered  </li> <li>Test failover redundancy  </li> <li>Test security and encryption  </li> <li>Test api from business tier, ensure CRUD  </li> </ul>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#fault-tolerance-and-recoverability-testing","title":"Fault Tolerance and Recoverability Testing","text":"<p>MTBF: Mean Time Between Failures MTTR: Mean Time to repair  </p>"},{"location":"WGU_Notes/D480_Software_QA/D480_Software_QA/#mobile-application-testing","title":"Mobile Application Testing","text":"<p>Chapter 11 of Myers, Sandler, and Badgett. (2011). The Art of Software Testing (3rd) Wiley.  </p>"}]}